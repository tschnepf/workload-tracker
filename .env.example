# === Application Settings ===OFFSITE_SCHEDULE_CRON=0 3 * * *APP_NAME=workload-trackerDEBUG=trueSECRET_KEY=dev-secret-key-change-in-productionALLOWED_HOSTS=localhost,127.0.0.1,backend,frontend# === Database Settings ===POSTGRES_DB=workload_trackerPOSTGRES_USER=postgresPOSTGRES_PASSWORD=postgresPOSTGRES_HOST=dbPOSTGRES_PORT=5432DATABASE_URL=postgresql://postgres:postgres@db:5432/workload_tracker# === Port Configuration ===BACKEND_PORT=8000FRONTEND_PORT=3000# === API Settings ===API_BASE_URL=http://localhost:8000/apiVITE_API_URL=http://localhost:8000/api# === Default Admin (Dev Only) ===DJANGO_SUPERUSER_USERNAME=adminDJANGO_SUPERUSER_EMAIL=admin@example.comDJANGO_SUPERUSER_PASSWORD=admin123# === Docker Settings ===COMPOSE_PROJECT_NAME=workload-trackerDOCKER_BUILDKIT=1# === Security Feature Flags ===# Use httpOnly cookie to store refresh token (backend + frontend must both enable)COOKIE_REFRESH_AUTH=falseLOGIN_PROTECTION=false# === Login protection (django-axes) ===# Number of failed attempts before lockoutAXES_FAILURE_LIMIT=5# Lockout cooloff period in hours (can be fractional)AXES_COOLOFF_TIME=1# Comma-separated list of usernames that are never locked out (e.g., admin emails)AXES_NEVER_LOCKOUT_USERNAMES=# Comma-separated list of CIDR ranges that bypass lockout checks (e.g., 10.0.0.0/8)AXES_ALLOWED_CIDR_NETS=# Email ADMINS on lockout events (requires Django email config + ADMINS)AXES_ALERT_ADMINS=false# === CORS/CSRF (optional overrides) ===# Comma-separated list of allowed origins for CORS# CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000# Comma-separated list for CSRF trusted origins# CSRF_TRUSTED_ORIGINS=http://localhost,http://127.0.0.1# === Frontend Flags ===VITE_COOKIE_REFRESH_AUTH=falseVITE_ROUTE_PREFETCH=trueVITE_VIEW_TRANSITIONS=falseVITE_PREFETCH_CONCURRENCY=2VITE_NAV_PROGRESS=trueVITE_NAV_PENDING_OVERLAY=true# === Sentry (frontend) ===# Upload sourcemaps during CI build only (recommended)SENTRY_UPLOAD=falseVITE_SENTRY_ORG=VITE_SENTRY_PROJECT=VITE_SENTRY_AUTH_TOKEN=VITE_APP_VERSION=dev# === Notifications (Slack) ===# Webhook must be https and hosted under hooks.slack.com (or *.slack.com)# Example: https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXXSLACK_WEBHOOK_URL=# === Content Security Policy ===# Enable/disable CSP header injection (handled by Django middleware)CSP_ENABLED=true# Start in report-only mode to collect violations without breaking users# Set to false in production once violations are resolvedCSP_REPORT_ONLY=true# Endpoint to receive CSP violation reports (relative or absolute)CSP_REPORT_URI=/csp-report/# === OpenAPI / Swagger exposure ===# Keep schema open in dev; require auth in prod. Set to "false" in prod to gate /api/schema/ and Swagger UI.OPENAPI_PUBLIC=true# === Celery (Background Jobs) ===ASYNC_JOBS=false# If not set, falls back to REDIS_URL used by the app (docker-compose provides REDIS_URL to backend)CELERY_BROKER_URL=redis://redis:6379/1CELERY_RESULT_BACKEND=redis://redis:6379/1CELERY_TASK_ALWAYS_EAGER=false# === Performance (Phase 3) ===# Keep DB connections alive (seconds)DB_CONN_MAX_AGE=60# Enable connection health checks (recommended in production)DB_CONN_HEALTH_CHECKS=true# Enable shortâ€‘TTL caching for heavy aggregate endpointsSHORT_TTL_AGGREGATES=false# DRF throttles for aggregate endpointsDRF_THROTTLE_HEATMAP=1200/minDRF_THROTTLE_SKILL_MATCH=600/minDRF_THROTTLE_PROJECT_AVAILABILITY=600/minDRF_THROTTLE_FIND_AVAILABLE=600/minDRF_THROTTLE_GRID_SNAPSHOT=600/min# Optional TTLs (seconds)# DEPT_DESC_CACHE_TTL=300# AGGREGATE_CACHE_TTL=15# === DRF Throttles for backups (Phase 0) ===DRF_THROTTLE_BACKUP_CREATE=2/hourDRF_THROTTLE_BACKUP_DELETE=5/hourDRF_THROTTLE_BACKUP_DOWNLOAD=20/hourDRF_THROTTLE_BACKUP_STATUS=120/min# Granular control (optional; defaults inherit from BACKUP_CREATE). Leave unset to use defaults.# DRF_THROTTLE_BACKUP_RESTORE=2/hour# DRF_THROTTLE_BACKUP_UPLOAD_RESTORE=2/hour# === Backup encryption & offsite (optional) ===# Encrypt backups at rest (handled by backup process)BACKUP_ENCRYPTION_ENABLED=false# Provider: 'gpg' or 'kms' (future use)BACKUP_ENCRYPTION_PROVIDER=gpg# For GPG: recipient email or key fingerprint; for KMS: key id/arnBACKUP_ENCRYPTION_RECIPIENT=# Sync backups to offsite storage (handled by worker/cron)BACKUP_OFFSITE_ENABLED=false# 's3'|'gcs'|'azure'|'rclone' (future use)BACKUP_OFFSITE_PROVIDER=BACKUP_OFFSITE_BUCKET=# Optional prefix inside the bucket/containerBACKUP_OFFSITE_PREFIX=# === Backup & Maintenance (Phase 0) ===# Standardized backups directory (mounted volume in Docker)BACKUPS_DIR=/backups# Read-only mode toggle to block writes during maintenanceREAD_ONLY_MODE=false# Optional privileged DSN for DB restore (owner)DB_ADMIN_URL=# Max upload size for backup archives (bytes). Default 5 GiB.BACKUP_UPLOAD_MAX_BYTES=5368709120# Celery Beat schedule file location (must be writable inside container)# Defaults to /tmp/celerybeat-schedule if unsetCELERY_BEAT_SCHEDULE_FILE=# Optional: directory to hold the schedule file. If set, file name defaults to# "/celerybeat-schedule" unless CELERY_BEAT_SCHEDULE_FILE is provided.CELERY_BEAT_DIR=# === JWT Blacklist Auto-Repair (Dev Safety) ===# On container start, verify SimpleJWT token_blacklist tables match the# installed package schema. If not, drop and recreate just those tables.# Safe for dev/test; set to false in production if you prefer manual control.AUTO_FIX_JWT_BLACKLIST=true# === Automation & Retention (Phase 9) ===ENABLE_AUTOMATION=false# Cron strings (UTC) when automation enabledBACKUP_SCHEDULE_CRON=0 2 * * *CLEANUP_SCHEDULE_CRON=30 2 * * *# Retention policy defaultsBACKUP_RETENTION_DAILY=7BACKUP_RETENTION_WEEKLY=4BACKUP_RETENTION_MONTHLY=12# Nightly restore safety drill (disabled by default)RESTORE_TEST_ENABLED=false# RESTORE_TEST_SCHEDULE_CRON=0 4 * * *   # when enabled