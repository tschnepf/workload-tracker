{
    "openapi": "3.0.3",
    "info": {
        "title": "Workload Tracker API",
        "version": "0.1.0",
        "description": "OpenAPI schema for Workload Tracker (People, Projects, Assignments, Deliverables, Departments)."
    },
    "paths": {
        "/api/assignments/": {
            "get": {
                "operationId": "assignments_list",
                "description": "Get all assignments with person details and optional project\nfiltering.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "assignments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "assignments_create",
                "description": "Create assignment with validation",
                "tags": [
                    "assignments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/assignments/{id}/": {
            "get": {
                "operationId": "assignments_retrieve",
                "description": "Assignment CRUD API with utilization tracking\nUses AutoMapped serializer for automatic snake_case -> camelCase conversion",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "assignments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "assignments_update",
                "description": "Assignment CRUD API with utilization tracking\nUses AutoMapped serializer for automatic snake_case -> camelCase conversion",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "assignments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "assignments_partial_update",
                "description": "Assignment CRUD API with utilization tracking\nUses AutoMapped serializer for automatic snake_case -> camelCase conversion",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "assignments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedAssignmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedAssignmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedAssignmentRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "assignments_destroy",
                "description": "Assignment CRUD API with utilization tracking\nUses AutoMapped serializer for automatic snake_case -> camelCase conversion",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "assignments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/assignments/bulk_update_hours/": {
            "patch": {
                "operationId": "assignments_bulk_update_hours_partial_update",
                "description": "Bulk update weekly hours for multiple assignments in a single transaction.",
                "tags": [
                    "assignments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedBulkUpdateHoursRequestRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedBulkUpdateHoursRequestRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedBulkUpdateHoursRequestRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkUpdateHoursResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/assignments/by_person/": {
            "get": {
                "operationId": "assignments_by_person_retrieve",
                "description": "Get assignments grouped by person",
                "parameters": [
                    {
                        "in": "query",
                        "name": "person_id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter by person id"
                    }
                ],
                "tags": [
                    "assignments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/assignments/check_conflicts/": {
            "post": {
                "operationId": "assignments_check_conflicts_create",
                "description": "Check assignment conflicts for a person in a specific week.\nOptimized to prevent N+1 queries by fetching all person assignments\nin a single query.",
                "tags": [
                    "assignments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/assignments/grid_snapshot/": {
            "get": {
                "operationId": "assignments_grid_snapshot_retrieve",
                "description": "Return compact pre-aggregated grid data for N weeks ahead (default 12).\n\nResponse shape: { weekKeys: [YYYY-MM-DD], people: [{id, name, weeklyCapacity, department}], hoursByPerson: { <personId>: { <weekKey>: hours } } }",
                "parameters": [
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_children",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "0|1"
                    },
                    {
                        "in": "query",
                        "name": "weeks",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of weeks (1-26), default 12"
                    }
                ],
                "tags": [
                    "assignments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GridSnapshotResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/assignments/grid_snapshot_async/": {
            "get": {
                "operationId": "assignments_grid_snapshot_async_retrieve",
                "description": "Start async grid snapshot job and return task ID for polling.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_children",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "0|1"
                    },
                    {
                        "in": "query",
                        "name": "weeks",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of weeks (1-26), default 12"
                    }
                ],
                "tags": [
                    "assignments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GridSnapshotAsyncResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/assignments/rebalance_suggestions/": {
            "get": {
                "operationId": "assignments_rebalance_suggestions_retrieve",
                "description": "Suggest non-destructive rebalancing ideas across the next N weeks\n(default 12).\n\n    Heuristic:\n    - Overallocated: utilization > 100% (based on 1-week snapshot)\n    - Underutilized: utilization < 70%\n    - Pair over with under and propose shifting 4–8 hours\n    Returns at most 20 suggestions.",
                "tags": [
                    "assignments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/auth/admin_audit/": {
            "get": {
                "operationId": "auth_admin_audit_list",
                "description": "Read-only endpoint for recent admin audit logs (admin only).",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "auth"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AdminAuditLog"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/auth/change_password/": {
            "post": {
                "operationId": "auth_change_password_create",
                "description": "Change password for the authenticated user.",
                "tags": [
                    "auth"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordRequestRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordRequestRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/auth/create_user/": {
            "post": {
                "operationId": "auth_create_user_create",
                "description": "Create a new user (staff only) and optionally link to a Person.",
                "tags": [
                    "auth"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserRequestRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserRequestRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/auth/link_person/": {
            "post": {
                "operationId": "auth_link_person_create",
                "description": "Link or unlink the current user's profile to a Person.",
                "tags": [
                    "auth"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LinkPersonRequestRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/LinkPersonRequestRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/LinkPersonRequestRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/auth/me/": {
            "get": {
                "operationId": "auth_me_retrieve",
                "description": "Return the current user's profile with settings and optional person link.",
                "tags": [
                    "auth"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/auth/set_password/": {
            "post": {
                "operationId": "auth_set_password_create",
                "description": "Set password for a target user (staff only).",
                "tags": [
                    "auth"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetPasswordRequestRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SetPasswordRequestRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SetPasswordRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/auth/settings/": {
            "patch": {
                "operationId": "auth_settings_partial_update",
                "description": "Update settings for the current user's profile (partial).",
                "tags": [
                    "auth"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserSettingsPatchRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserSettingsPatchRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserSettingsPatchRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/auth/users/": {
            "get": {
                "operationId": "auth_users_list",
                "description": "List all users with role and linked person (admin only).",
                "tags": [
                    "auth"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserListItem"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/auth/users/{user_id}/": {
            "delete": {
                "operationId": "auth_users_destroy",
                "description": "Delete a user account (admin only).",
                "parameters": [
                    {
                        "in": "path",
                        "name": "user_id",
                        "schema": {
                            "type": "integer"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "auth"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/dashboard/": {
            "get": {
                "operationId": "dashboard_retrieve",
                "description": "Team dashboard with utilization metrics and overview",
                "parameters": [
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter by department id"
                    },
                    {
                        "in": "query",
                        "name": "weeks",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of weeks to aggregate (1-12)"
                    }
                ],
                "tags": [
                    "dashboard"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/deliverables/": {
            "get": {
                "operationId": "deliverables_list",
                "description": "Get deliverables with bulk loading support (Phase 2 optimization)",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDeliverableList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "deliverables_create",
                "description": "CRUD operations for deliverables\nSupports filtering by project and manual reordering",
                "tags": [
                    "deliverables"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deliverable"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/deliverables/{id}/": {
            "get": {
                "operationId": "deliverables_retrieve",
                "description": "CRUD operations for deliverables\nSupports filtering by project and manual reordering",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this deliverable.",
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deliverable"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "deliverables_update",
                "description": "CRUD operations for deliverables\nSupports filtering by project and manual reordering",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this deliverable.",
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deliverable"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "deliverables_partial_update",
                "description": "CRUD operations for deliverables\nSupports filtering by project and manual reordering",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this deliverable.",
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDeliverableRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDeliverableRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDeliverableRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Deliverable"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "deliverables_destroy",
                "description": "CRUD operations for deliverables\nSupports filtering by project and manual reordering",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this deliverable.",
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/deliverables/{id}/staffing_summary/": {
            "get": {
                "operationId": "deliverables_staffing_summary_retrieve",
                "description": "Return derived staffing for a deliverable from Assignment.weekly_hours.\n\nDefault window: 6 weeks prior OR between previous and current deliverable (exclusive→inclusive).\nOptional override: ?weeks=6 to force a fixed lookback window.\n\nReturns array items per person with >0 hours in window on the deliverable's project:\n{ linkId|null, personId, personName, roleOnMilestone|null, totalHours, weekBreakdown }",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this deliverable.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "weeks",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Lookback window in weeks"
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliverableStaffingSummaryItem"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/deliverables/assignments/": {
            "get": {
                "operationId": "deliverables_assignments_list",
                "description": "CRUD and filter endpoints for deliverable-person weekly hour links.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDeliverableAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "deliverables_assignments_create",
                "description": "CRUD and filter endpoints for deliverable-person weekly hour links.",
                "tags": [
                    "deliverables"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableAssignmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableAssignmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableAssignmentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliverableAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/deliverables/assignments/{id}/": {
            "get": {
                "operationId": "deliverables_assignments_retrieve",
                "description": "CRUD and filter endpoints for deliverable-person weekly hour links.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this deliverable assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliverableAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "deliverables_assignments_update",
                "description": "CRUD and filter endpoints for deliverable-person weekly hour links.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this deliverable assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableAssignmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableAssignmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableAssignmentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliverableAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "deliverables_assignments_partial_update",
                "description": "CRUD and filter endpoints for deliverable-person weekly hour links.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this deliverable assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDeliverableAssignmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDeliverableAssignmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDeliverableAssignmentRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliverableAssignment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "deliverables_assignments_destroy",
                "description": "CRUD and filter endpoints for deliverable-person weekly hour links.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this deliverable assignment.",
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/deliverables/assignments/by_deliverable/": {
            "get": {
                "operationId": "deliverables_assignments_by_deliverable_list",
                "description": "CRUD and filter endpoints for deliverable-person weekly hour links.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "deliverable",
                        "schema": {
                            "type": "integer"
                        },
                        "required": true
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDeliverableAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/deliverables/assignments/by_person/": {
            "get": {
                "operationId": "deliverables_assignments_by_person_list",
                "description": "CRUD and filter endpoints for deliverable-person weekly hour links.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "person",
                        "schema": {
                            "type": "integer"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDeliverableAssignmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/deliverables/bulk/": {
            "get": {
                "operationId": "deliverables_bulk_retrieve",
                "description": "Bulk fetch deliverables for multiple projects\nGET /api/deliverables/bulk/?project_ids=1,2,3,4\n\nReturns: { \"1\": [...], \"2\": [...], \"3\": [...], \"4\": [...] }",
                "parameters": [
                    {
                        "in": "query",
                        "name": "project_ids",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Comma-separated project IDs",
                        "required": true
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "description": "Unspecified response body"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/deliverables/calendar/": {
            "get": {
                "operationId": "deliverables_calendar_list",
                "description": "Read-only calendar endpoint returning deliverables within a date range\nwith assignmentCount. Missing params tolerated (returns all dated items).\n\nGET /api/deliverables/calendar?start=YYYY-MM-DD&end=YYYY-MM-DD",
                "parameters": [
                    {
                        "in": "query",
                        "name": "end",
                        "schema": {
                            "type": "string"
                        },
                        "description": "YYYY-MM-DD"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start",
                        "schema": {
                            "type": "string"
                        },
                        "description": "YYYY-MM-DD"
                    }
                ],
                "tags": [
                    "deliverables"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDeliverableCalendarItemList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/deliverables/reorder/": {
            "post": {
                "operationId": "deliverables_reorder_create",
                "description": "Manually reorder deliverables for a project\nExpected payload: {\n    \"project\": project_id,\n    \"deliverable_ids\": [id1, id2, id3, ...]\n}",
                "tags": [
                    "deliverables"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableReorderRequestRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableReorderRequestRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliverableReorderRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliverableReorderResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/departments/": {
            "get": {
                "operationId": "departments_list",
                "description": "Get all departments with bulk loading support",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "departments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDepartmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "departments_create",
                "tags": [
                    "departments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DepartmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DepartmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DepartmentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Department"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/departments/{id}/": {
            "get": {
                "operationId": "departments_retrieve",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this department.",
                        "required": true
                    }
                ],
                "tags": [
                    "departments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Department"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "departments_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this department.",
                        "required": true
                    }
                ],
                "tags": [
                    "departments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DepartmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DepartmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DepartmentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Department"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "departments_partial_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this department.",
                        "required": true
                    }
                ],
                "tags": [
                    "departments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDepartmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDepartmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDepartmentRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Department"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "departments_destroy",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this department.",
                        "required": true
                    }
                ],
                "tags": [
                    "departments"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/jobs/{job_id}/": {
            "get": {
                "operationId": "jobs_retrieve",
                "description": "Return status and metadata for a Celery job.\n\nResponse fields:\n- id: task id\n- state: PENDING|STARTED|PROGRESS|SUCCESS|FAILURE\n- progress: 0-100 if available\n- message: optional status message\n- downloadReady: bool\n- downloadUrl: present when a file is available to download\n- result: task result when not file-based (e.g., import summary)\n- error: error message if failed",
                "parameters": [
                    {
                        "in": "path",
                        "name": "job_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Background job id",
                        "required": true
                    }
                ],
                "tags": [
                    "jobs"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "state": {
                                            "type": "string",
                                            "enum": [
                                                "PENDING",
                                                "STARTED",
                                                "PROGRESS",
                                                "SUCCESS",
                                                "FAILURE"
                                            ]
                                        },
                                        "progress": {
                                            "type": "integer"
                                        },
                                        "message": {
                                            "type": "string",
                                            "nullable": true
                                        },
                                        "downloadReady": {
                                            "type": "boolean"
                                        },
                                        "downloadUrl": {
                                            "type": "string",
                                            "nullable": true
                                        },
                                        "result": {},
                                        "error": {
                                            "type": "string",
                                            "nullable": true
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "state",
                                        "progress",
                                        "downloadReady"
                                    ]
                                }
                            }
                        },
                        "description": ""
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Async jobs not available"
                                }
                            }
                        },
                        "description": ""
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Job not completed"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/jobs/{job_id}/download/": {
            "get": {
                "operationId": "jobs_download_retrieve",
                "description": "Stream the file produced by a completed job (if any).",
                "parameters": [
                    {
                        "in": "path",
                        "name": "job_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Background job id",
                        "required": true
                    }
                ],
                "tags": [
                    "jobs"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "File content"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "No file associated with this job"
                                }
                            }
                        },
                        "description": ""
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Job not completed"
                                }
                            }
                        },
                        "description": ""
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Async jobs not available"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/": {
            "get": {
                "operationId": "people_list",
                "description": "Get all people with conditional request support (ETag/Last-Modified) and bulk loading",
                "parameters": [
                    {
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Return all items without pagination when true"
                    },
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter by department id"
                    },
                    {
                        "in": "query",
                        "name": "include_children",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Include child departments (0|1)"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number"
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page size"
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedPersonList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "people_create",
                "description": "Person CRUD API with utilization calculations\nUses AutoMapped serializer for automatic snake_case â†” camelCase conversion",
                "tags": [
                    "people"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/{id}/": {
            "get": {
                "operationId": "people_retrieve",
                "description": "Person CRUD API with utilization calculations\nUses AutoMapped serializer for automatic snake_case â†” camelCase conversion",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this person.",
                        "required": true
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "people_update",
                "description": "Person CRUD API with utilization calculations\nUses AutoMapped serializer for automatic snake_case â†” camelCase conversion",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this person.",
                        "required": true
                    }
                ],
                "tags": [
                    "people"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "people_partial_update",
                "description": "Person CRUD API with utilization calculations\nUses AutoMapped serializer for automatic snake_case â†” camelCase conversion",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this person.",
                        "required": true
                    }
                ],
                "tags": [
                    "people"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPersonRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPersonRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPersonRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "people_destroy",
                "description": "Person CRUD API with utilization calculations\nUses AutoMapped serializer for automatic snake_case â†” camelCase conversion",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this person.",
                        "required": true
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/people/{id}/utilization/": {
            "get": {
                "operationId": "people_utilization_retrieve",
                "description": "Get detailed utilization breakdown for a person - Chunk 3",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this person.",
                        "required": true
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/autocomplete/": {
            "get": {
                "operationId": "people_autocomplete_retrieve",
                "description": "Lightweight autocomplete for active people.\n\nQuery params:\n- search or q: optional substring of name\n- limit: max results (default 20)",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Max results (1-50)"
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Alias for search"
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Substring of name"
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PeopleAutocompleteItem"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/capacity_heatmap/": {
            "get": {
                "operationId": "people_capacity_heatmap_list",
                "description": "Return per-person week summaries for the next N weeks (default 12).",
                "parameters": [
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_children",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "0|1"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "weeks",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedPersonCapacityHeatmapItemList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/export_excel/": {
            "get": {
                "operationId": "people_export_excel_retrieve",
                "description": "Export people to Excel with streaming response for large datasets",
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/find_available/": {
            "get": {
                "operationId": "people_find_available_list",
                "description": "Person CRUD API with utilization calculations\nUses AutoMapped serializer for automatic snake_case â†” camelCase conversion",
                "parameters": [
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_children",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "0|1"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Max results (1-200), default 100"
                    },
                    {
                        "in": "query",
                        "name": "minAvailableHours",
                        "schema": {
                            "type": "number",
                            "format": "double"
                        },
                        "description": "Filter to people with at least this many hours free"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "skills",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Comma-separated skill names"
                    },
                    {
                        "in": "query",
                        "name": "week",
                        "schema": {
                            "type": "string"
                        },
                        "description": "YYYY-MM-DD (Monday) week key"
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedSkillMatchResultItemList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/import_excel/": {
            "post": {
                "operationId": "people_import_excel_create",
                "description": "Import people from Excel with progress tracking",
                "tags": [
                    "people"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/search/": {
            "get": {
                "operationId": "people_search_retrieve",
                "description": "Server-side typeahead for People.\n\nParams:\n- q: required search query (min length 2)\n- limit: optional, default 20, max 50\nReturns minimal projection: id, name, department",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Max results (1-50)"
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search query (min length 2)",
                        "required": true
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PeopleSearchItem"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/skill_match/": {
            "get": {
                "operationId": "people_skill_match_list",
                "description": "Rank people by skills (and optionally availability for a given week).\n\nReturns an array of items: { personId, name, score, matchedSkills[], missingSkills[], departmentId, roleName }.\nScore is based on percent of required skills matched (case-insensitive contains) and optionally blended with availability when `week` is provided.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_children",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "0|1"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Max results (1-200), default 50"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "skills",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Comma-separated skill names",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "week",
                        "schema": {
                            "type": "string"
                        },
                        "description": "YYYY-MM-DD (Monday) for availability-aware scoring"
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedSkillMatchResultItemList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/skill_match_async/": {
            "get": {
                "operationId": "people_skill_match_async_retrieve",
                "description": "Start async skill match job and return task ID for polling.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_children",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "0|1"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Max results (1-200), default 50"
                    },
                    {
                        "in": "query",
                        "name": "skills",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Comma-separated skill names",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "week",
                        "schema": {
                            "type": "string"
                        },
                        "description": "YYYY-MM-DD (Monday) for availability-aware scoring"
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SkillMatchAsyncResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/people/workload_forecast/": {
            "get": {
                "operationId": "people_workload_forecast_list",
                "description": "Aggregate team capacity vs allocated for N weeks ahead (default 8).\n\nResponse array items:\n{ weekStart, totalCapacity, totalAllocated, teamUtilization, peopleOverallocated[] }",
                "parameters": [
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_children",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "0|1"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "weeks",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "people"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedWorkloadForecastItemList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/projects/": {
            "get": {
                "operationId": "projects_list",
                "description": "Get all projects with conditional request support (ETag/Last-Modified) and bulk loading",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedProjectList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "projects_create",
                "description": "Adds ETag on detail GET and optional If-Match handling on mutations.\n\n- Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.\n- Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.\n  When If-Match is absent, proceeds (frontend can adopt conditionals progressively).",
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/projects/{id}/": {
            "get": {
                "operationId": "projects_retrieve",
                "description": "Adds ETag on detail GET and optional If-Match handling on mutations.\n\n- Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.\n- Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.\n  When If-Match is absent, proceeds (frontend can adopt conditionals progressively).",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this project.",
                        "required": true
                    }
                ],
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "projects_update",
                "description": "Adds ETag on detail GET and optional If-Match handling on mutations.\n\n- Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.\n- Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.\n  When If-Match is absent, proceeds (frontend can adopt conditionals progressively).",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this project.",
                        "required": true
                    }
                ],
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "projects_partial_update",
                "description": "Adds ETag on detail GET and optional If-Match handling on mutations.\n\n- Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.\n- Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.\n  When If-Match is absent, proceeds (frontend can adopt conditionals progressively).",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this project.",
                        "required": true
                    }
                ],
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProjectRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProjectRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProjectRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "projects_destroy",
                "description": "Adds ETag on detail GET and optional If-Match handling on mutations.\n\n- Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.\n- Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.\n  When If-Match is absent, proceeds (frontend can adopt conditionals progressively).",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this project.",
                        "required": true
                    }
                ],
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/projects/{id}/availability/": {
            "get": {
                "operationId": "projects_availability_list",
                "description": "Return availability snapshot for people relevant to the project context.\n\nResponse items: { personId, personName, totalHours, capacity, availableHours, utilizationPercent }\nUses Monday as canonical week key; tolerant to JSON keys +/- 3 days in assignments.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "candidates_only",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Limit to departments already staffing this project (0|1)"
                    },
                    {
                        "in": "query",
                        "name": "department",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter people by department id"
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this project.",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "include_children",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Include child departments (0|1)"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "week",
                        "schema": {
                            "type": "string"
                        },
                        "description": "YYYY-MM-DD (normalized to Monday)"
                    }
                ],
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedProjectAvailabilityItemList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/projects/export_excel/": {
            "get": {
                "operationId": "projects_export_excel_retrieve",
                "description": "Export projects to Excel with streaming response for large datasets",
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/projects/export_template/": {
            "get": {
                "operationId": "projects_export_template_retrieve",
                "description": "Export Excel import template with examples",
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/projects/filter-metadata/": {
            "get": {
                "operationId": "projects_filter_metadata_retrieve",
                "description": "Get optimized filter metadata for all projects.\n\nReturns camelCase keys for direct frontend consumption:\n{\n  \"projectFilters\": {\n    \"<projectId>\": {\n      \"assignmentCount\": number,\n      \"hasFutureDeliverables\": boolean,\n      \"status\": string\n    }, ...\n  }\n}",
                "tags": [
                    "projects"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectFilterMetadataResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/projects/import_excel/": {
            "post": {
                "operationId": "projects_import_excel_create",
                "description": "Import projects from Excel with progress tracking",
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/roles/": {
            "get": {
                "operationId": "roles_list",
                "description": "Role ViewSet providing CRUD operations\n- List all roles (paginated)\n- Create new role\n- Retrieve specific role\n- Update role\n- Delete role\n- Bulk list (for autocomplete)",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "roles"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRoleList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "roles_create",
                "description": "Role ViewSet providing CRUD operations\n- List all roles (paginated)\n- Create new role\n- Retrieve specific role\n- Update role\n- Delete role\n- Bulk list (for autocomplete)",
                "tags": [
                    "roles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/roles/{id}/": {
            "get": {
                "operationId": "roles_retrieve",
                "description": "Role ViewSet providing CRUD operations\n- List all roles (paginated)\n- Create new role\n- Retrieve specific role\n- Update role\n- Delete role\n- Bulk list (for autocomplete)",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Role.",
                        "required": true
                    }
                ],
                "tags": [
                    "roles"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "roles_update",
                "description": "Role ViewSet providing CRUD operations\n- List all roles (paginated)\n- Create new role\n- Retrieve specific role\n- Update role\n- Delete role\n- Bulk list (for autocomplete)",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Role.",
                        "required": true
                    }
                ],
                "tags": [
                    "roles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RoleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "roles_partial_update",
                "description": "Role ViewSet providing CRUD operations\n- List all roles (paginated)\n- Create new role\n- Retrieve specific role\n- Update role\n- Delete role\n- Bulk list (for autocomplete)",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Role.",
                        "required": true
                    }
                ],
                "tags": [
                    "roles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedRoleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedRoleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedRoleRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "roles_destroy",
                "description": "Override destroy to check for role usage before deletion",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Role.",
                        "required": true
                    }
                ],
                "tags": [
                    "roles"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/roles/bulk/": {
            "get": {
                "operationId": "roles_bulk_list",
                "description": "Return all roles without pagination for autocomplete/dropdowns\nAccess via: GET /api/roles/bulk/",
                "parameters": [
                    {
                        "in": "query",
                        "name": "include_inactive",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Include inactive roles when present"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "roles"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRoleList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/skills/person-skills/": {
            "get": {
                "operationId": "skills_person_skills_list",
                "description": "CRUD operations for person skills",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "skills"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedPersonSkillList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "skills_person_skills_create",
                "description": "CRUD operations for person skills",
                "tags": [
                    "skills"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonSkillRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonSkillRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonSkillRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonSkill"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/skills/person-skills/{id}/": {
            "get": {
                "operationId": "skills_person_skills_retrieve",
                "description": "CRUD operations for person skills",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Person Skill.",
                        "required": true
                    }
                ],
                "tags": [
                    "skills"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonSkill"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "skills_person_skills_update",
                "description": "CRUD operations for person skills",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Person Skill.",
                        "required": true
                    }
                ],
                "tags": [
                    "skills"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonSkillRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonSkillRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonSkillRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonSkill"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "skills_person_skills_partial_update",
                "description": "CRUD operations for person skills",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Person Skill.",
                        "required": true
                    }
                ],
                "tags": [
                    "skills"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPersonSkillRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPersonSkillRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPersonSkillRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonSkill"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "skills_person_skills_destroy",
                "description": "CRUD operations for person skills",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Person Skill.",
                        "required": true
                    }
                ],
                "tags": [
                    "skills"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/skills/person-skills/summary/": {
            "get": {
                "operationId": "skills_person_skills_summary_retrieve",
                "description": "Get skill summary for a person",
                "parameters": [
                    {
                        "in": "query",
                        "name": "person",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Person id",
                        "required": true
                    }
                ],
                "tags": [
                    "skills"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonSkillSummaryGrouped"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/skills/skill-tags/": {
            "get": {
                "operationId": "skills_skill_tags_list",
                "description": "CRUD operations for skill tags",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "skills"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedSkillTagList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "skills_skill_tags_create",
                "description": "CRUD operations for skill tags",
                "tags": [
                    "skills"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SkillTagRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SkillTagRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SkillTagRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SkillTag"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/skills/skill-tags/{id}/": {
            "get": {
                "operationId": "skills_skill_tags_retrieve",
                "description": "CRUD operations for skill tags",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Skill Tag.",
                        "required": true
                    }
                ],
                "tags": [
                    "skills"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SkillTag"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "skills_skill_tags_update",
                "description": "CRUD operations for skill tags",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Skill Tag.",
                        "required": true
                    }
                ],
                "tags": [
                    "skills"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SkillTagRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SkillTagRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SkillTagRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SkillTag"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "skills_skill_tags_partial_update",
                "description": "CRUD operations for skill tags",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Skill Tag.",
                        "required": true
                    }
                ],
                "tags": [
                    "skills"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedSkillTagRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedSkillTagRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedSkillTagRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SkillTag"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "skills_skill_tags_destroy",
                "description": "CRUD operations for skill tags",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this Skill Tag.",
                        "required": true
                    }
                ],
                "tags": [
                    "skills"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/token/": {
            "post": {
                "operationId": "token_create",
                "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.",
                "tags": [
                    "token"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenObtainPairRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenObtainPairRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenObtainPairRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenObtainPair"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/token/logout/": {
            "post": {
                "operationId": "token_logout_create",
                "description": "Clears the refresh cookie in cookie mode. Body is ignored.",
                "tags": [
                    "token"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefreshRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefreshRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefreshRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenRefresh"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/token/refresh/": {
            "post": {
                "operationId": "token_refresh_create",
                "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
                "tags": [
                    "token"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefreshRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefreshRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefreshRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenRefresh"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/token/verify/": {
            "post": {
                "operationId": "token_verify_create",
                "description": "Takes a token and indicates if it is valid.  This view provides no\ninformation about a token's fitness for a particular use.",
                "tags": [
                    "token"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenVerifyRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenVerifyRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenVerifyRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {}
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AdminAuditLog": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "action": {
                        "type": "string",
                        "readOnly": true
                    },
                    "detail": {
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "actor": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "readOnly": true
                    },
                    "targetUser": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "readOnly": true
                    }
                },
                "required": [
                    "action",
                    "actor",
                    "created_at",
                    "detail",
                    "id",
                    "targetUser"
                ]
            },
            "Assignment": {
                "type": "object",
                "description": "Assignment serializer with weekly hours support",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "person": {
                        "type": "integer"
                    },
                    "personName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "personWeeklyCapacity": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "personSkills": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonSkillSummary"
                        },
                        "readOnly": true
                    },
                    "projectName": {
                        "type": "string",
                        "maxLength": 200
                    },
                    "project": {
                        "type": "integer",
                        "nullable": true
                    },
                    "projectDisplayName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "roleOnProject": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "weeklyHours": {},
                    "allocationPercentage": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "allocationPercentage",
                    "createdAt",
                    "id",
                    "person",
                    "personName",
                    "personSkills",
                    "personWeeklyCapacity",
                    "projectDisplayName",
                    "updatedAt",
                    "weeklyHours"
                ]
            },
            "AssignmentHoursUpdateRequest": {
                "type": "object",
                "properties": {
                    "assignmentId": {
                        "type": "integer"
                    },
                    "weeklyHours": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                },
                "required": [
                    "assignmentId",
                    "weeklyHours"
                ]
            },
            "AssignmentRequest": {
                "type": "object",
                "description": "Assignment serializer with weekly hours support",
                "properties": {
                    "person": {
                        "type": "integer"
                    },
                    "projectName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "project": {
                        "type": "integer",
                        "nullable": true
                    },
                    "roleOnProject": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "weeklyHours": {}
                },
                "required": [
                    "person",
                    "weeklyHours"
                ]
            },
            "AvailablePerson": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "available_hours": {
                        "type": "number",
                        "format": "double"
                    },
                    "utilization_percent": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "available_hours",
                    "id",
                    "name",
                    "utilization_percent"
                ]
            },
            "BulkUpdateHoursResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkUpdateResultItem"
                        }
                    }
                },
                "required": [
                    "results",
                    "success"
                ]
            },
            "BulkUpdateResultItem": {
                "type": "object",
                "properties": {
                    "assignmentId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "etag": {
                        "type": "string"
                    }
                },
                "required": [
                    "assignmentId",
                    "etag",
                    "status"
                ]
            },
            "ChangePasswordRequestRequest": {
                "type": "object",
                "properties": {
                    "currentPassword": {
                        "type": "string",
                        "minLength": 1
                    },
                    "newPassword": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "required": [
                    "currentPassword",
                    "newPassword"
                ]
            },
            "CreateUserRequestRequest": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "minLength": 1
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "minLength": 1
                    },
                    "personId": {
                        "type": "integer",
                        "nullable": true
                    },
                    "role": {
                        "$ref": "#/components/schemas/RoleEnum"
                    }
                },
                "required": [
                    "password",
                    "username"
                ]
            },
            "DashboardResponse": {
                "type": "object",
                "properties": {
                    "summary": {
                        "$ref": "#/components/schemas/DashboardSummary"
                    },
                    "utilization_distribution": {
                        "$ref": "#/components/schemas/UtilizationDistribution"
                    },
                    "team_overview": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TeamOverviewItem"
                        }
                    },
                    "available_people": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AvailablePerson"
                        }
                    },
                    "recent_assignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecentAssignment"
                        }
                    }
                },
                "required": [
                    "available_people",
                    "recent_assignments",
                    "summary",
                    "team_overview",
                    "utilization_distribution"
                ]
            },
            "DashboardSummary": {
                "type": "object",
                "properties": {
                    "total_people": {
                        "type": "integer"
                    },
                    "avg_utilization": {
                        "type": "number",
                        "format": "double"
                    },
                    "peak_utilization": {
                        "type": "number",
                        "format": "double"
                    },
                    "peak_person": {
                        "type": "string",
                        "nullable": true
                    },
                    "total_assignments": {
                        "type": "integer"
                    },
                    "overallocated_count": {
                        "type": "integer"
                    }
                },
                "required": [
                    "avg_utilization",
                    "overallocated_count",
                    "peak_utilization",
                    "total_assignments",
                    "total_people"
                ]
            },
            "Deliverable": {
                "type": "object",
                "description": "Deliverable serializer with snake_case -> camelCase field mapping",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "project": {
                        "type": "integer"
                    },
                    "percentage": {
                        "type": "integer",
                        "maximum": 100,
                        "minimum": 0,
                        "nullable": true,
                        "description": "Completion percentage (0-100)"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brief description (e.g., SD, DD, IFP, IFC)",
                        "maxLength": 200
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string",
                        "description": "Additional details, owner info, requirements, etc."
                    },
                    "sortOrder": {
                        "type": "integer"
                    },
                    "isCompleted": {
                        "type": "boolean"
                    },
                    "completedDate": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "project",
                    "updatedAt"
                ]
            },
            "DeliverableAssignment": {
                "type": "object",
                "description": "Serializer for linking people to deliverables with weekly hours.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "deliverable": {
                        "type": "integer"
                    },
                    "person": {
                        "type": "integer"
                    },
                    "weeklyHours": {},
                    "roleOnMilestone": {
                        "type": "string",
                        "nullable": true
                    },
                    "is_active": {
                        "type": "boolean"
                    },
                    "personName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "projectId": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "createdAt",
                    "deliverable",
                    "id",
                    "person",
                    "personName",
                    "projectId",
                    "updatedAt",
                    "weeklyHours"
                ]
            },
            "DeliverableAssignmentRequest": {
                "type": "object",
                "description": "Serializer for linking people to deliverables with weekly hours.",
                "properties": {
                    "deliverable": {
                        "type": "integer"
                    },
                    "person": {
                        "type": "integer"
                    },
                    "weeklyHours": {},
                    "roleOnMilestone": {
                        "type": "string",
                        "nullable": true
                    },
                    "is_active": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "deliverable",
                    "person",
                    "weeklyHours"
                ]
            },
            "DeliverableCalendarItem": {
                "type": "object",
                "description": "Serializer for calendar items (aggregate), camelCase API fields.\n\nAccepts Deliverable instances annotated with assignmentCount.",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "project": {
                        "type": "integer"
                    },
                    "projectName": {
                        "type": "string",
                        "nullable": true
                    },
                    "projectClient": {
                        "type": "string",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "isCompleted": {
                        "type": "boolean"
                    },
                    "assignmentCount": {
                        "type": "integer"
                    }
                },
                "required": [
                    "assignmentCount",
                    "date",
                    "id",
                    "isCompleted",
                    "project",
                    "projectName",
                    "title"
                ]
            },
            "DeliverableReorderRequestRequest": {
                "type": "object",
                "properties": {
                    "project": {
                        "type": "integer"
                    },
                    "deliverable_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "deliverable_ids",
                    "project"
                ]
            },
            "DeliverableReorderResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "success"
                ]
            },
            "DeliverableRequest": {
                "type": "object",
                "description": "Deliverable serializer with snake_case -> camelCase field mapping",
                "properties": {
                    "project": {
                        "type": "integer"
                    },
                    "percentage": {
                        "type": "integer",
                        "maximum": 100,
                        "minimum": 0,
                        "nullable": true,
                        "description": "Completion percentage (0-100)"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brief description (e.g., SD, DD, IFP, IFC)",
                        "maxLength": 200
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string",
                        "description": "Additional details, owner info, requirements, etc."
                    },
                    "sortOrder": {
                        "type": "integer"
                    },
                    "isCompleted": {
                        "type": "boolean"
                    },
                    "completedDate": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    }
                },
                "required": [
                    "project"
                ]
            },
            "DeliverableStaffingSummaryItem": {
                "type": "object",
                "properties": {
                    "linkId": {
                        "type": "integer",
                        "nullable": true
                    },
                    "personId": {
                        "type": "integer"
                    },
                    "personName": {
                        "type": "string"
                    },
                    "roleOnMilestone": {
                        "type": "string",
                        "nullable": true
                    },
                    "totalHours": {
                        "type": "number",
                        "format": "double"
                    },
                    "weekBreakdown": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                },
                "required": [
                    "personId",
                    "personName",
                    "totalHours",
                    "weekBreakdown"
                ]
            },
            "Department": {
                "type": "object",
                "description": "Department serializer with explicit camelCase field mapping",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "parentDepartment": {
                        "type": "integer",
                        "nullable": true
                    },
                    "manager": {
                        "type": "integer",
                        "nullable": true
                    },
                    "managerName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "isActive",
                    "managerName",
                    "name",
                    "updatedAt"
                ]
            },
            "DepartmentRequest": {
                "type": "object",
                "description": "Department serializer with explicit camelCase field mapping",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "parentDepartment": {
                        "type": "integer",
                        "nullable": true
                    },
                    "manager": {
                        "type": "integer",
                        "nullable": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "isActive",
                    "name"
                ]
            },
            "GridSnapshotAsyncResponse": {
                "type": "object",
                "properties": {
                    "jobId": {
                        "type": "string"
                    }
                },
                "required": [
                    "jobId"
                ]
            },
            "GridSnapshotPerson": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "weeklyCapacity": {
                        "type": "integer"
                    },
                    "department": {
                        "type": "integer",
                        "nullable": true
                    }
                },
                "required": [
                    "department",
                    "id",
                    "name",
                    "weeklyCapacity"
                ]
            },
            "GridSnapshotResponse": {
                "type": "object",
                "properties": {
                    "weekKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "people": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GridSnapshotPerson"
                        }
                    },
                    "hoursByPerson": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number",
                                "format": "double"
                            }
                        }
                    }
                },
                "required": [
                    "hoursByPerson",
                    "people",
                    "weekKeys"
                ]
            },
            "LinkPersonRequestRequest": {
                "type": "object",
                "properties": {
                    "person_id": {
                        "type": "integer",
                        "nullable": true
                    }
                }
            },
            "PaginatedAssignmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Assignment"
                        }
                    }
                }
            },
            "PaginatedDeliverableAssignmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeliverableAssignment"
                        }
                    }
                }
            },
            "PaginatedDeliverableCalendarItemList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeliverableCalendarItem"
                        }
                    }
                }
            },
            "PaginatedDeliverableList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Deliverable"
                        }
                    }
                }
            },
            "PaginatedDepartmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Department"
                        }
                    }
                }
            },
            "PaginatedPersonCapacityHeatmapItemList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonCapacityHeatmapItem"
                        }
                    }
                }
            },
            "PaginatedPersonList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Person"
                        }
                    }
                }
            },
            "PaginatedPersonSkillList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonSkill"
                        }
                    }
                }
            },
            "PaginatedProjectAvailabilityItemList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectAvailabilityItem"
                        }
                    }
                }
            },
            "PaginatedProjectList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Project"
                        }
                    }
                }
            },
            "PaginatedRoleList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    }
                }
            },
            "PaginatedSkillMatchResultItemList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SkillMatchResultItem"
                        }
                    }
                }
            },
            "PaginatedSkillTagList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SkillTag"
                        }
                    }
                }
            },
            "PaginatedWorkloadForecastItemList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WorkloadForecastItem"
                        }
                    }
                }
            },
            "PatchedAssignmentRequest": {
                "type": "object",
                "description": "Assignment serializer with weekly hours support",
                "properties": {
                    "person": {
                        "type": "integer"
                    },
                    "projectName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "project": {
                        "type": "integer",
                        "nullable": true
                    },
                    "roleOnProject": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "weeklyHours": {}
                }
            },
            "PatchedBulkUpdateHoursRequestRequest": {
                "type": "object",
                "properties": {
                    "updates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AssignmentHoursUpdateRequest"
                        }
                    }
                }
            },
            "PatchedDeliverableAssignmentRequest": {
                "type": "object",
                "description": "Serializer for linking people to deliverables with weekly hours.",
                "properties": {
                    "deliverable": {
                        "type": "integer"
                    },
                    "person": {
                        "type": "integer"
                    },
                    "weeklyHours": {},
                    "roleOnMilestone": {
                        "type": "string",
                        "nullable": true
                    },
                    "is_active": {
                        "type": "boolean"
                    }
                }
            },
            "PatchedDeliverableRequest": {
                "type": "object",
                "description": "Deliverable serializer with snake_case -> camelCase field mapping",
                "properties": {
                    "project": {
                        "type": "integer"
                    },
                    "percentage": {
                        "type": "integer",
                        "maximum": 100,
                        "minimum": 0,
                        "nullable": true,
                        "description": "Completion percentage (0-100)"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brief description (e.g., SD, DD, IFP, IFC)",
                        "maxLength": 200
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string",
                        "description": "Additional details, owner info, requirements, etc."
                    },
                    "sortOrder": {
                        "type": "integer"
                    },
                    "isCompleted": {
                        "type": "boolean"
                    },
                    "completedDate": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    }
                }
            },
            "PatchedDepartmentRequest": {
                "type": "object",
                "description": "Department serializer with explicit camelCase field mapping",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "parentDepartment": {
                        "type": "integer",
                        "nullable": true
                    },
                    "manager": {
                        "type": "integer",
                        "nullable": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean"
                    }
                }
            },
            "PatchedPersonRequest": {
                "type": "object",
                "description": "Person serializer with department and role integration",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "weeklyCapacity": {
                        "type": "integer",
                        "default": 36
                    },
                    "role": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Person's role in the organization"
                    },
                    "department": {
                        "type": "integer",
                        "nullable": true
                    },
                    "location": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100
                    },
                    "notes": {
                        "type": "string"
                    }
                }
            },
            "PatchedPersonSkillRequest": {
                "type": "object",
                "description": "Person skill serializer with camelCase field names and related data",
                "properties": {
                    "person": {
                        "type": "integer"
                    },
                    "skillTagId": {
                        "type": "integer"
                    },
                    "skillType": {
                        "type": "string",
                        "minLength": 1
                    },
                    "proficiencyLevel": {
                        "type": "string",
                        "minLength": 1
                    },
                    "notes": {
                        "type": "string"
                    },
                    "lastUsed": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    }
                }
            },
            "PatchedProjectRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusEnum"
                    },
                    "client": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "estimatedHours": {
                        "type": "integer",
                        "nullable": true
                    },
                    "isActive": {
                        "type": "boolean",
                        "default": true
                    }
                }
            },
            "PatchedRoleRequest": {
                "type": "object",
                "description": "Role serializer with camelCase field transformation",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Role name (e.g., Senior Engineer, Product Manager)",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional description of the role responsibilities"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether this role is currently available for assignment"
                    }
                }
            },
            "PatchedSkillTagRequest": {
                "type": "object",
                "description": "Skill tag serializer with camelCase field names",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "category": {
                        "type": "string",
                        "maxLength": 50
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "PatchedUserSettingsPatchRequest": {
                "type": "object",
                "properties": {
                    "settings": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            },
            "PeopleAutocompleteItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "department": {
                        "type": "integer",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "PeopleSearchItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "department": {
                        "type": "integer",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "Person": {
                "type": "object",
                "description": "Person serializer with department and role integration",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 200
                    },
                    "weeklyCapacity": {
                        "type": "integer",
                        "default": 36
                    },
                    "role": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Person's role in the organization"
                    },
                    "roleName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "department": {
                        "type": "integer",
                        "nullable": true
                    },
                    "departmentName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "location": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100
                    },
                    "notes": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "createdAt",
                    "departmentName",
                    "id",
                    "name",
                    "roleName",
                    "updatedAt"
                ]
            },
            "PersonCapacityHeatmapItem": {
                "type": "object",
                "description": "Serializer for capacity heatmap items returned by capacity_heatmap action.",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "weeklyCapacity": {
                        "type": "integer"
                    },
                    "department": {
                        "type": "string",
                        "nullable": true
                    },
                    "weekKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "weekTotals": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "peak": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "averagePercentage": {
                        "type": "number",
                        "format": "double"
                    },
                    "percentByWeek": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    "availableByWeek": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                },
                "required": [
                    "averagePercentage",
                    "id",
                    "name",
                    "peak",
                    "weekKeys",
                    "weekTotals",
                    "weeklyCapacity"
                ]
            },
            "PersonRequest": {
                "type": "object",
                "description": "Person serializer with department and role integration",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "weeklyCapacity": {
                        "type": "integer",
                        "default": 36
                    },
                    "role": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Person's role in the organization"
                    },
                    "department": {
                        "type": "integer",
                        "nullable": true
                    },
                    "location": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100
                    },
                    "notes": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "PersonSkill": {
                "type": "object",
                "description": "Person skill serializer with camelCase field names and related data",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "person": {
                        "type": "integer"
                    },
                    "skillTagId": {
                        "type": "integer"
                    },
                    "skillTagName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "skillType": {
                        "type": "string"
                    },
                    "proficiencyLevel": {
                        "type": "string"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "lastUsed": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "person",
                    "proficiencyLevel",
                    "skillTagId",
                    "skillTagName",
                    "skillType",
                    "updatedAt"
                ]
            },
            "PersonSkillRequest": {
                "type": "object",
                "description": "Person skill serializer with camelCase field names and related data",
                "properties": {
                    "person": {
                        "type": "integer"
                    },
                    "skillTagId": {
                        "type": "integer"
                    },
                    "skillType": {
                        "type": "string",
                        "minLength": 1
                    },
                    "proficiencyLevel": {
                        "type": "string",
                        "minLength": 1
                    },
                    "notes": {
                        "type": "string"
                    },
                    "lastUsed": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    }
                },
                "required": [
                    "person",
                    "proficiencyLevel",
                    "skillTagId",
                    "skillType"
                ]
            },
            "PersonSkillSummary": {
                "type": "object",
                "description": "Lightweight serializer for person skill summaries",
                "properties": {
                    "skillTagName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "skillType": {
                        "type": "string",
                        "readOnly": true
                    },
                    "proficiencyLevel": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "proficiencyLevel",
                    "skillTagName",
                    "skillType"
                ]
            },
            "PersonSkillSummaryGrouped": {
                "type": "object",
                "properties": {
                    "strengths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonSkillSummary"
                        }
                    },
                    "development": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonSkillSummary"
                        }
                    },
                    "learning": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonSkillSummary"
                        }
                    }
                },
                "required": [
                    "development",
                    "learning",
                    "strengths"
                ]
            },
            "Project": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 200
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusEnum"
                    },
                    "client": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "estimatedHours": {
                        "type": "integer",
                        "nullable": true
                    },
                    "isActive": {
                        "type": "boolean",
                        "default": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "name",
                    "updatedAt"
                ]
            },
            "ProjectAvailabilityItem": {
                "type": "object",
                "description": "Availability snapshot item for a person in project context.",
                "properties": {
                    "personId": {
                        "type": "integer"
                    },
                    "personName": {
                        "type": "string"
                    },
                    "totalHours": {
                        "type": "number",
                        "format": "double"
                    },
                    "capacity": {
                        "type": "number",
                        "format": "double"
                    },
                    "availableHours": {
                        "type": "number",
                        "format": "double"
                    },
                    "utilizationPercent": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "availableHours",
                    "capacity",
                    "personId",
                    "personName",
                    "totalHours",
                    "utilizationPercent"
                ]
            },
            "ProjectFilterItem": {
                "type": "object",
                "properties": {
                    "assignmentCount": {
                        "type": "integer"
                    },
                    "hasFutureDeliverables": {
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "required": [
                    "assignmentCount",
                    "hasFutureDeliverables",
                    "status"
                ]
            },
            "ProjectFilterMetadataResponse": {
                "type": "object",
                "properties": {
                    "projectFilters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ProjectFilterItem"
                        }
                    }
                },
                "required": [
                    "projectFilters"
                ]
            },
            "ProjectRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusEnum"
                    },
                    "client": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "estimatedHours": {
                        "type": "integer",
                        "nullable": true
                    },
                    "isActive": {
                        "type": "boolean",
                        "default": true
                    }
                },
                "required": [
                    "name"
                ]
            },
            "RecentAssignment": {
                "type": "object",
                "properties": {
                    "person": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "created": {
                        "type": "string"
                    }
                },
                "required": [
                    "created",
                    "person",
                    "project"
                ]
            },
            "Role": {
                "type": "object",
                "description": "Role serializer with camelCase field transformation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Role name (e.g., Senior Engineer, Product Manager)",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional description of the role responsibilities"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether this role is currently available for assignment"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "name",
                    "updatedAt"
                ]
            },
            "RoleEnum": {
                "enum": [
                    "admin",
                    "manager",
                    "user"
                ],
                "type": "string",
                "description": "* `admin` - admin\n* `manager` - manager\n* `user` - user"
            },
            "RoleRequest": {
                "type": "object",
                "description": "Role serializer with camelCase field transformation",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Role name (e.g., Senior Engineer, Product Manager)",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional description of the role responsibilities"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether this role is currently available for assignment"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "SetPasswordRequestRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "integer"
                    },
                    "newPassword": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "required": [
                    "newPassword",
                    "userId"
                ]
            },
            "SkillMatchAsyncResponse": {
                "type": "object",
                "properties": {
                    "jobId": {
                        "type": "string"
                    }
                },
                "required": [
                    "jobId"
                ]
            },
            "SkillMatchResultItem": {
                "type": "object",
                "description": "Result item for people skill match scoring.",
                "properties": {
                    "personId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "score": {
                        "type": "number",
                        "format": "double",
                        "description": "0-100"
                    },
                    "matchedSkills": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "missingSkills": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "departmentId": {
                        "type": "integer",
                        "nullable": true
                    },
                    "roleName": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "departmentId",
                    "matchedSkills",
                    "missingSkills",
                    "name",
                    "personId",
                    "score"
                ]
            },
            "SkillTag": {
                "type": "object",
                "description": "Skill tag serializer with camelCase field names",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "category": {
                        "type": "string",
                        "maxLength": 50
                    },
                    "description": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "isActive",
                    "name",
                    "updatedAt"
                ]
            },
            "SkillTagRequest": {
                "type": "object",
                "description": "Skill tag serializer with camelCase field names",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "category": {
                        "type": "string",
                        "maxLength": 50
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "StatusEnum": {
                "enum": [
                    "planning",
                    "active",
                    "active_ca",
                    "on_hold",
                    "completed",
                    "cancelled"
                ],
                "type": "string",
                "description": "* `planning` - Planning\n* `active` - Active\n* `active_ca` - Active CA\n* `on_hold` - On Hold\n* `completed` - Completed\n* `cancelled` - Cancelled"
            },
            "TeamOverviewItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "utilization_percent": {
                        "type": "number",
                        "format": "double"
                    },
                    "allocated_hours": {
                        "type": "number",
                        "format": "double"
                    },
                    "capacity": {
                        "type": "integer"
                    },
                    "is_overallocated": {
                        "type": "boolean"
                    },
                    "peak_utilization_percent": {
                        "type": "number",
                        "format": "double"
                    },
                    "peak_week": {
                        "type": "string"
                    },
                    "is_peak_overallocated": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "allocated_hours",
                    "capacity",
                    "id",
                    "is_overallocated",
                    "is_peak_overallocated",
                    "name",
                    "peak_utilization_percent",
                    "peak_week",
                    "role",
                    "utilization_percent"
                ]
            },
            "TokenObtainPair": {
                "type": "object",
                "properties": {
                    "access": {
                        "type": "string",
                        "readOnly": true
                    },
                    "refresh": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "access",
                    "refresh"
                ]
            },
            "TokenObtainPairRequest": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    }
                },
                "required": [
                    "password",
                    "username"
                ]
            },
            "TokenRefresh": {
                "type": "object",
                "properties": {
                    "access": {
                        "type": "string",
                        "readOnly": true
                    },
                    "refresh": {
                        "type": "string"
                    }
                },
                "required": [
                    "access",
                    "refresh"
                ]
            },
            "TokenRefreshRequest": {
                "type": "object",
                "properties": {
                    "refresh": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "required": [
                    "refresh"
                ]
            },
            "TokenVerifyRequest": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    }
                },
                "required": [
                    "token"
                ]
            },
            "UserListItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "is_staff": {
                        "type": "boolean"
                    },
                    "is_superuser": {
                        "type": "boolean"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "role": {
                        "type": "string"
                    },
                    "person": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserListPerson"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "groups",
                    "id",
                    "is_staff",
                    "is_superuser",
                    "role",
                    "username"
                ]
            },
            "UserListPerson": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "UserProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "user": {
                        "type": "object",
                        "additionalProperties": {},
                        "readOnly": true
                    },
                    "person": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "readOnly": true
                    },
                    "settings": {},
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "person",
                    "updated_at",
                    "user"
                ]
            },
            "UtilizationDistribution": {
                "type": "object",
                "properties": {
                    "underutilized": {
                        "type": "integer"
                    },
                    "optimal": {
                        "type": "integer"
                    },
                    "high": {
                        "type": "integer"
                    },
                    "overallocated": {
                        "type": "integer"
                    }
                },
                "required": [
                    "high",
                    "optimal",
                    "overallocated",
                    "underutilized"
                ]
            },
            "WorkloadForecastItem": {
                "type": "object",
                "description": "Serializer for workload forecast items returned by workload_forecast action.",
                "properties": {
                    "weekStart": {
                        "type": "string"
                    },
                    "totalCapacity": {
                        "type": "number",
                        "format": "double"
                    },
                    "totalAllocated": {
                        "type": "number",
                        "format": "double"
                    },
                    "teamUtilization": {
                        "type": "number",
                        "format": "double"
                    },
                    "peopleOverallocated": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WorkloadForecastOverallocatedItem"
                        }
                    }
                },
                "required": [
                    "peopleOverallocated",
                    "teamUtilization",
                    "totalAllocated",
                    "totalCapacity",
                    "weekStart"
                ]
            },
            "WorkloadForecastOverallocatedItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            }
        },
        "securitySchemes": {
            "cookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "sessionid"
            },
            "jwtAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}