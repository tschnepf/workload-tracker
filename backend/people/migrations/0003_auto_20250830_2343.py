# Generated by Django 5.0.1 on 2025-08-30 23:43

from django.db import migrations


def populate_role_fk_from_role_string(apps, schema_editor):
    """Populate role_fk based on existing role string values"""
    Person = apps.get_model('people', 'Person')
    Role = apps.get_model('roles', 'Role')
    
    role_mapping = {}
    
    # Build mapping of role strings to Role objects
    for role in Role.objects.all():
        role_mapping[role.name] = role
    
    # Default Engineer role
    try:
        default_role = Role.objects.get(name='Engineer')
    except Role.DoesNotExist:
        print("Warning: Engineer role not found, skipping role assignment")
        return
    
    updated_count = 0
    
    # Update each person's role_fk based on their role string
    for person in Person.objects.all():
        role_string = person.role
        
        # Try to find exact match first
        if role_string in role_mapping:
            person.role_fk = role_mapping[role_string]
            person.save()
            updated_count += 1
        else:
            # Assign default Engineer role
            person.role_fk = default_role
            person.save()
            updated_count += 1
    
    print(f"Updated role_fk for {updated_count} people")


def reverse_populate_role_fk(apps, schema_editor):
    """Clear role_fk values"""
    Person = apps.get_model('people', 'Person')
    Person.objects.all().update(role_fk=None)


class Migration(migrations.Migration):

    dependencies = [
        ('people', '0002_person_role_fk'),
        ('roles', '0002_auto_20250830_2331'),  # Ensure roles exist
    ]

    operations = [
        migrations.RunPython(populate_role_fk_from_role_string, reverse_populate_role_fk),
    ]
