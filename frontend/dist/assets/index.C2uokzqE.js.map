{"version":3,"file":"index.C2uokzqE.js","sources":["../../src/pages/Skills/SkillsDashboard.tsx"],"sourcesContent":["/**\r\n * Skills Dashboard - Team skills analysis and gap reporting\r\n * Provides comprehensive overview of team skills coverage and gaps\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Layout from '@/components/layout/Layout';\r\nimport Card from '@/components/ui/Card';\r\nimport Button from '@/components/ui/Button';\r\nimport { Person, Department, SkillTag, PersonSkill } from '@/types/models';\r\nimport { peopleApi, departmentsApi, skillTagsApi, personSkillsApi } from '@/services/api';\r\n\r\ninterface SkillCoverage {\r\n  skillName: string;\r\n  totalPeople: number;\r\n  strengths: number;\r\n  development: number;\r\n  learning: number;\r\n  expertCount: number;\r\n  advancedCount: number;\r\n  intermediateCount: number;\r\n  beginnerCount: number;\r\n  coverage: 'excellent' | 'good' | 'limited' | 'gap';\r\n}\r\n\r\ninterface DepartmentSkills {\r\n  departmentId: number;\r\n  departmentName: string;\r\n  peopleCount: number;\r\n  skillsCoverage: SkillCoverage[];\r\n  topSkills: string[];\r\n  skillGaps: string[];\r\n}\r\n\r\nconst SkillsDashboard: React.FC = () => {\r\n  const [people, setPeople] = useState<Person[]>([]);\r\n  const [departments, setDepartments] = useState<Department[]>([]);\r\n  const [skillTags, setSkillTags] = useState<SkillTag[]>([]);\r\n  const [peopleSkills, setPeopleSkills] = useState<PersonSkill[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const [selectedDepartment, setSelectedDepartment] = useState<string>(''); // Empty = all departments\r\n  const [viewMode, setViewMode] = useState<'coverage' | 'gaps' | 'departments'>('coverage');\r\n\r\n  useEffect(() => {\r\n    loadAllData();\r\n  }, []);\r\n\r\n  const loadAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const [peopleResponse, departmentsResponse, skillTagsResponse, peopleSkillsResponse] = await Promise.all([\r\n        peopleApi.list(),\r\n        departmentsApi.list(),\r\n        skillTagsApi.list(),\r\n        personSkillsApi.list()\r\n      ]);\r\n      \r\n      setPeople(peopleResponse.results || []);\r\n      setDepartments(departmentsResponse.results || []);\r\n      setSkillTags(skillTagsResponse.results || []);\r\n      setPeopleSkills(peopleSkillsResponse.results || []);\r\n      \r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to load skills data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Calculate skills coverage across the team\r\n  const calculateSkillsCoverage = (): SkillCoverage[] => {\r\n    const coverageMap = new Map<string, SkillCoverage>();\r\n    \r\n    // Initialize all skill tags\r\n    skillTags.forEach(skill => {\r\n      coverageMap.set(skill.name, {\r\n        skillName: skill.name,\r\n        totalPeople: 0,\r\n        strengths: 0,\r\n        development: 0,\r\n        learning: 0,\r\n        expertCount: 0,\r\n        advancedCount: 0,\r\n        intermediateCount: 0,\r\n        beginnerCount: 0,\r\n        coverage: 'gap'\r\n      });\r\n    });\r\n    \r\n    // Filter people by selected department\r\n    const filteredPeople = selectedDepartment \r\n      ? people.filter(person => person.department?.toString() === selectedDepartment)\r\n      : people;\r\n    \r\n    // Count skills across filtered people\r\n    peopleSkills.forEach(personSkill => {\r\n      const person = people.find(p => p.id === personSkill.person);\r\n      if (!person) return;\r\n      \r\n      // Skip if department filter doesn't match\r\n      if (selectedDepartment && person.department?.toString() !== selectedDepartment) return;\r\n      \r\n      const skillName = personSkill.skillTagName || 'Unknown';\r\n      const coverage = coverageMap.get(skillName);\r\n      \r\n      if (coverage) {\r\n        coverage.totalPeople++;\r\n        \r\n        // Count by skill type\r\n        if (personSkill.skillType === 'strength') coverage.strengths++;\r\n        else if (personSkill.skillType === 'development') coverage.development++;\r\n        else if (personSkill.skillType === 'learning') coverage.learning++;\r\n        \r\n        // Count by proficiency level\r\n        if (personSkill.proficiencyLevel === 'expert') coverage.expertCount++;\r\n        else if (personSkill.proficiencyLevel === 'advanced') coverage.advancedCount++;\r\n        else if (personSkill.proficiencyLevel === 'intermediate') coverage.intermediateCount++;\r\n        else if (personSkill.proficiencyLevel === 'beginner') coverage.beginnerCount++;\r\n      }\r\n    });\r\n    \r\n    // Determine coverage level for each skill\r\n    const totalPeopleCount = filteredPeople.length;\r\n    \r\n    coverageMap.forEach(coverage => {\r\n      const strengthsRatio = totalPeopleCount > 0 ? coverage.strengths / totalPeopleCount : 0;\r\n      const expertsAndAdvanced = coverage.expertCount + coverage.advancedCount;\r\n      \r\n      if (expertsAndAdvanced >= 3 && strengthsRatio >= 0.3) {\r\n        coverage.coverage = 'excellent';\r\n      } else if (expertsAndAdvanced >= 2 && strengthsRatio >= 0.2) {\r\n        coverage.coverage = 'good';\r\n      } else if (coverage.totalPeople > 0) {\r\n        coverage.coverage = 'limited';\r\n      } else {\r\n        coverage.coverage = 'gap';\r\n      }\r\n    });\r\n    \r\n    return Array.from(coverageMap.values())\r\n      .filter(coverage => coverage.totalPeople > 0 || coverage.coverage === 'gap')\r\n      .sort((a, b) => {\r\n        // Sort by coverage quality, then by total people\r\n        const coverageOrder = { excellent: 0, good: 1, limited: 2, gap: 3 };\r\n        const aOrder = coverageOrder[a.coverage];\r\n        const bOrder = coverageOrder[b.coverage];\r\n        \r\n        if (aOrder !== bOrder) return aOrder - bOrder;\r\n        return b.totalPeople - a.totalPeople;\r\n      });\r\n  };\r\n\r\n  // Calculate department-specific skills analysis\r\n  const calculateDepartmentSkills = (): DepartmentSkills[] => {\r\n    return departments.map(dept => {\r\n      const deptPeople = people.filter(person => person.department === dept.id);\r\n      const deptPeopleIds = deptPeople.map(p => p.id);\r\n      const deptSkills = peopleSkills.filter(skill => deptPeopleIds.includes(skill.person));\r\n      \r\n      // Calculate top skills for this department\r\n      const skillCounts = new Map<string, number>();\r\n      deptSkills.forEach(skill => {\r\n        if (skill.skillType === 'strength') {\r\n          const count = skillCounts.get(skill.skillTagName || '') || 0;\r\n          skillCounts.set(skill.skillTagName || '', count + 1);\r\n        }\r\n      });\r\n      \r\n      const topSkills = Array.from(skillCounts.entries())\r\n        .sort(([,a], [,b]) => b - a)\r\n        .slice(0, 5)\r\n        .map(([skill]) => skill);\r\n      \r\n      // Find skills gaps (skills present in other departments but not here)\r\n      const allOtherSkills = new Set<string>();\r\n      peopleSkills.forEach(skill => {\r\n        if (!deptPeopleIds.includes(skill.person) && skill.skillType === 'strength') {\r\n          allOtherSkills.add(skill.skillTagName || '');\r\n        }\r\n      });\r\n      \r\n      const deptSkillNames = new Set(deptSkills.map(s => s.skillTagName || ''));\r\n      const skillGaps = Array.from(allOtherSkills)\r\n        .filter(skill => !deptSkillNames.has(skill))\r\n        .slice(0, 3);\r\n      \r\n      return {\r\n        departmentId: dept.id!,\r\n        departmentName: dept.name,\r\n        peopleCount: deptPeople.length,\r\n        skillsCoverage: [], // Can be calculated if needed\r\n        topSkills,\r\n        skillGaps\r\n      };\r\n    }).filter(dept => dept.peopleCount > 0);\r\n  };\r\n\r\n  // Get coverage statistics\r\n  const getCoverageStats = () => {\r\n    const coverage = calculateSkillsCoverage();\r\n    const total = coverage.length;\r\n    const excellent = coverage.filter(c => c.coverage === 'excellent').length;\r\n    const good = coverage.filter(c => c.coverage === 'good').length;\r\n    const limited = coverage.filter(c => c.coverage === 'limited').length;\r\n    const gaps = coverage.filter(c => c.coverage === 'gap').length;\r\n    \r\n    return { total, excellent, good, limited, gaps };\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Layout>\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <div className=\"text-[#969696]\">Loading skills analysis...</div>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Layout>\r\n        <Card className=\"bg-red-500/20 border-red-500/30 p-6\">\r\n          <div className=\"text-red-400 font-medium mb-2\">Error Loading Skills Data</div>\r\n          <div className=\"text-red-300 text-sm\">{error}</div>\r\n          <Button onClick={loadAllData} className=\"mt-4 bg-red-500 hover:bg-red-400\">\r\n            Retry\r\n          </Button>\r\n        </Card>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  const skillsCoverage = calculateSkillsCoverage();\r\n  const departmentSkills = calculateDepartmentSkills();\r\n  const stats = getCoverageStats();\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"space-y-6\">\r\n        \r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-[#cccccc]\">Skills Dashboard</h1>\r\n            <p className=\"text-[#969696] mt-2\">\r\n              Team skills analysis, coverage, and gap identification\r\n              {selectedDepartment && (\r\n                <span className=\"block mt-1\">\r\n                  Filtered by: {departments.find(d => d.id?.toString() === selectedDepartment)?.name}\r\n                </span>\r\n              )}\r\n            </p>\r\n          </div>\r\n          \r\n          {/* Department Filter */}\r\n          <div className=\"flex items-center gap-4 mt-4 sm:mt-0\">\r\n            <select\r\n              value={selectedDepartment}\r\n              onChange={(e) => setSelectedDepartment(e.target.value)}\r\n              className=\"px-3 py-2 text-sm bg-[#3e3e42] border border-[#3e3e42] rounded text-[#cccccc] focus:border-[#007acc] focus:outline-none\"\r\n            >\r\n              <option value=\"\">All Departments</option>\r\n              {departments.map(dept => (\r\n                <option key={dept.id} value={dept.id}>\r\n                  {dept.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* View Mode Tabs */}\r\n        <div className=\"flex gap-2\">\r\n          {[\r\n            { key: 'coverage', label: 'Skills Coverage' },\r\n            { key: 'gaps', label: 'Skills Gaps' },\r\n            { key: 'departments', label: 'By Department' }\r\n          ].map(({ key, label }) => (\r\n            <Button\r\n              key={key}\r\n              onClick={() => setViewMode(key as any)}\r\n              variant={viewMode === key ? 'primary' : 'ghost'}\r\n              size=\"sm\"\r\n            >\r\n              {label}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\r\n          <Card className=\"bg-[#2d2d30] border-[#3e3e42] p-4\">\r\n            <div className=\"text-[#969696] text-sm\">Total Skills</div>\r\n            <div className=\"text-2xl font-bold text-[#cccccc]\">{stats.total}</div>\r\n          </Card>\r\n          \r\n          <Card className=\"bg-[#2d2d30] border-[#3e3e42] p-4\">\r\n            <div className=\"text-[#969696] text-sm\">Excellent Coverage</div>\r\n            <div className=\"text-2xl font-bold text-emerald-400\">{stats.excellent}</div>\r\n          </Card>\r\n          \r\n          <Card className=\"bg-[#2d2d30] border-[#3e3e42] p-4\">\r\n            <div className=\"text-[#969696] text-sm\">Good Coverage</div>\r\n            <div className=\"text-2xl font-bold text-blue-400\">{stats.good}</div>\r\n          </Card>\r\n          \r\n          <Card className=\"bg-[#2d2d30] border-[#3e3e42] p-4\">\r\n            <div className=\"text-[#969696] text-sm\">Limited Coverage</div>\r\n            <div className=\"text-2xl font-bold text-amber-400\">{stats.limited}</div>\r\n          </Card>\r\n          \r\n          <Card className=\"bg-[#2d2d30] border-[#3e3e42] p-4\">\r\n            <div className=\"text-[#969696] text-sm\">Skills Gaps</div>\r\n            <div className=\"text-2xl font-bold text-red-400\">{stats.gaps}</div>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Content based on view mode */}\r\n        {viewMode === 'coverage' && (\r\n          <Card className=\"bg-[#2d2d30] border-[#3e3e42] p-6\">\r\n            <h3 className=\"text-lg font-semibold text-[#cccccc] mb-4\">Skills Coverage Analysis</h3>\r\n            <div className=\"space-y-4\">\r\n              {skillsCoverage.map((skill) => (\r\n                <div key={skill.skillName} className=\"border-b border-[#3e3e42] pb-4 last:border-b-0\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <span className=\"font-medium text-[#cccccc]\">{skill.skillName}</span>\r\n                      <span className={`px-2 py-1 rounded text-xs font-medium ${\r\n                        skill.coverage === 'excellent' ? 'bg-emerald-500/20 text-emerald-400' :\r\n                        skill.coverage === 'good' ? 'bg-blue-500/20 text-blue-400' :\r\n                        skill.coverage === 'limited' ? 'bg-amber-500/20 text-amber-400' :\r\n                        'bg-red-500/20 text-red-400'\r\n                      }`}>\r\n                        {skill.coverage}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"text-sm text-[#969696]\">\r\n                      {skill.totalPeople} people\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n                    <div>\r\n                      <div className=\"text-[#969696]\">Strengths</div>\r\n                      <div className=\"text-emerald-400 font-medium\">{skill.strengths}</div>\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"text-[#969696]\">Learning</div>\r\n                      <div className=\"text-blue-400 font-medium\">{skill.learning}</div>\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"text-[#969696]\">Expert/Advanced</div>\r\n                      <div className=\"text-purple-400 font-medium\">{skill.expertCount + skill.advancedCount}</div>\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"text-[#969696]\">Intermediate/Beginner</div>\r\n                      <div className=\"text-[#cccccc] font-medium\">{skill.intermediateCount + skill.beginnerCount}</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              \r\n              {skillsCoverage.length === 0 && (\r\n                <div className=\"text-center py-8 text-[#969696]\">\r\n                  No skills data available for the selected filters\r\n                </div>\r\n              )}\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {viewMode === 'gaps' && (\r\n          <Card className=\"bg-[#2d2d30] border-[#3e3e42] p-6\">\r\n            <h3 className=\"text-lg font-semibold text-[#cccccc] mb-4\">Skills Gaps & Recommendations</h3>\r\n            <div className=\"space-y-4\">\r\n              {skillsCoverage\r\n                .filter(skill => skill.coverage === 'gap' || skill.coverage === 'limited')\r\n                .map((skill) => (\r\n                  <div key={skill.skillName} className=\"p-4 bg-amber-500/10 border border-amber-500/30 rounded\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <span className=\"font-medium text-amber-400\">{skill.skillName}</span>\r\n                      <span className={`px-2 py-1 rounded text-xs font-medium ${\r\n                        skill.coverage === 'gap' ? 'bg-red-500/20 text-red-400' : 'bg-amber-500/20 text-amber-400'\r\n                      }`}>\r\n                        {skill.coverage === 'gap' ? 'No Coverage' : 'Limited Coverage'}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div className=\"text-sm text-amber-300 mb-2\">\r\n                      {skill.coverage === 'gap' \r\n                        ? 'No team members have this skill as a strength. Consider hiring or training.'\r\n                        : `Only ${skill.strengths} team member(s) have this as a strength. Consider expanding coverage.`\r\n                      }\r\n                    </div>\r\n                    \r\n                    {skill.development > 0 && (\r\n                      <div className=\"text-xs text-blue-400\">\r\n                        💡 {skill.development} team member(s) are currently developing this skill\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))\r\n              }\r\n              \r\n              {skillsCoverage.filter(s => s.coverage === 'gap' || s.coverage === 'limited').length === 0 && (\r\n                <div className=\"text-center py-8 text-emerald-400\">\r\n                  🎉 Great job! No critical skills gaps detected in your team.\r\n                </div>\r\n              )}\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {viewMode === 'departments' && (\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {departmentSkills.map((dept) => (\r\n              <Card key={dept.departmentId} className=\"bg-[#2d2d30] border-[#3e3e42] p-6\">\r\n                <div className=\"flex items-center justify-between mb-4\">\r\n                  <h3 className=\"text-lg font-semibold text-[#cccccc]\">{dept.departmentName}</h3>\r\n                  <span className=\"text-sm text-[#969696]\">{dept.peopleCount} people</span>\r\n                </div>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  {/* Top Skills */}\r\n                  <div>\r\n                    <div className=\"text-sm font-medium text-[#cccccc] mb-2\">🌟 Top Skills</div>\r\n                    <div className=\"flex flex-wrap gap-1\">\r\n                      {dept.topSkills.slice(0, 5).map(skill => (\r\n                        <span key={skill} className=\"px-2 py-1 bg-emerald-500/20 text-emerald-400 rounded text-xs\">\r\n                          {skill}\r\n                        </span>\r\n                      ))}\r\n                      {dept.topSkills.length === 0 && (\r\n                        <span className=\"text-xs text-[#969696]\">No skills data available</span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Skills Gaps */}\r\n                  {dept.skillGaps.length > 0 && (\r\n                    <div>\r\n                      <div className=\"text-sm font-medium text-[#cccccc] mb-2\">⚠️ Potential Gaps</div>\r\n                      <div className=\"flex flex-wrap gap-1\">\r\n                        {dept.skillGaps.map(skill => (\r\n                          <span key={skill} className=\"px-2 py-1 bg-amber-500/20 text-amber-400 rounded text-xs\">\r\n                            {skill}\r\n                          </span>\r\n                        ))}\r\n                      </div>\r\n                      <div className=\"text-xs text-[#969696] mt-1\">\r\n                        Skills present in other departments but not here\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default SkillsDashboard;"],"names":["SkillsDashboard","people","setPeople","useState","departments","setDepartments","skillTags","setSkillTags","peopleSkills","setPeopleSkills","loading","setLoading","error","setError","selectedDepartment","setSelectedDepartment","viewMode","setViewMode","useEffect","loadAllData","peopleResponse","departmentsResponse","skillTagsResponse","peopleSkillsResponse","peopleApi","departmentsApi","skillTagsApi","personSkillsApi","err","calculateSkillsCoverage","coverageMap","skill","filteredPeople","person","personSkill","p","skillName","coverage","totalPeopleCount","strengthsRatio","expertsAndAdvanced","a","b","coverageOrder","aOrder","bOrder","calculateDepartmentSkills","dept","deptPeople","deptPeopleIds","deptSkills","skillCounts","count","topSkills","allOtherSkills","deptSkillNames","s","skillGaps","getCoverageStats","total","excellent","c","good","limited","gaps","jsx","Layout","jsxs","Card","Button","skillsCoverage","departmentSkills","stats","d","e","key","label"],"mappings":"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"}