{"version":3,"mappings":"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","names":["useProjects","data","isLoading","isFetching","queryError","useQuery","projectsApi","loading","error","useUpdateProject","queryClient","useQueryClient","useMutation","id","updatedProject","variables","useDeleteProject","usePeople","peopleApi","DeliverablesSection","React","__vitePreload","DeliverablesSectionLoader","jsx","jsxs","AssignmentRow","assignment","isEditing","editData","roleSearchResults","onEdit","onDelete","onSave","onCancel","onRoleSearch","onRoleSelect","onHoursChange","getCurrentWeekHours","e","role","skill","index","PersonSearchResult","person","isSelected","onSelect","ProjectsList","projects","projectsError","people","deleteProjectMutation","updateProjectMutation","selectedProject","setSelectedProject","useState","statusFilter","setStatusFilter","sortBy","setSortBy","sortDirection","setSortDirection","searchTerm","setSearchTerm","selectedIndex","setSelectedIndex","setError","warnings","setWarnings","statusDropdownOpen","setStatusDropdownOpen","projectDeliverables","setProjectDeliverables","assignments","setAssignments","showAddAssignment","setShowAddAssignment","newAssignment","setNewAssignment","personSearchResults","setPersonSearchResults","selectedPersonIndex","setSelectedPersonIndex","personSkillsMap","setPersonSkillsMap","srAnnouncement","setSrAnnouncement","debouncedPersonSearch","useDebounce","editingAssignment","setEditingAssignment","setEditData","availableRoles","setAvailableRoles","setRoleSearchResults","statusOptions","editableStatusOptions","useEffect","precomputePersonSkills","useCallback","newSkillsMap","personId","existingSkills","assignmentSkills","combinedSkills","loadProjectAssignments","loadAllProjectDeliverables","projectsList","startTime","projectIds","p","bulkDeliverablesResponse","deliverablesApi","deliverablesMap","projectId","deliverables","endTime","emptyMap","project","getNextDeliverable","today","upcomingDeliverables","d","year","month","day","deliverableDate","a","b","aYear","aMonth","aDay","bYear","bMonth","bDay","aDate","bDate","dateCompare","formatNextDeliverable","deliverable","parts","date","hasUpcomingDeliverableDates","formatFilterStatus","status","formatStatus","handleDelete","remainingProjects","projectAssignments","assignmentsApi","roles","sortedRoles","err","calculatePersonAvailability","now","dayOfWeek","monday","currentWeekKey","utilizationData","calculateSkillMatch","requiredSkills","personSkills","personSkill","reqSkill","handlePersonSearch","prev","performPersonSearch","filtered","detectedSkills","sortedResults","availability","skillMatchScore","handlePersonSelect","handlePersonSearchKeyDown","getSkillBasedRoleSuggestions","skillBasedRoles","handleNewAssignmentRoleSearch","filteredExistingRoles","allRoles","uniqueRoles","handleNewAssignmentRoleSelect","handleAddAssignment","handleSaveAssignment","weeklyHours","sum","hours","currentWeekHours","conflictWarnings","checkAssignmentConflicts","assignmentData","handleCancelAddAssignment","handleDeleteAssignment","assignmentId","handleEditAssignment","existingRole","handleRoleSearch","editingAssignmentData","editingPerson","handleRoleSelect","weekKey","newHours","handleSaveEdit","hoursChange","updatedWeeklyHours","updateData","handleCancelEdit","handleStatusChange","newStatus","optimisticProject","handleProjectClick","getStatusColor","word","handleSort","column","filteredProjects","useMemo","matchesStatus","matchesSearch","sortedProjects","aValue","bValue","aNext","bNext","result","handleKeyDown","newIndex","handleClickOutside","event","SortIcon","Sidebar","Link","warning","nextDeliverable","Fragment","Suspense","Projects"],"ignoreList":[],"sources":["../../src/hooks/useProjects.ts","../../src/hooks/usePeople.ts","../../src/pages/Projects/ProjectsList.tsx","../../src/pages/Projects/index.tsx"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { projectsApi } from '@/services/api';\r\nimport { Project } from '@/types/models';\r\n\r\n// Projects query hook with state adapter for existing code compatibility\r\nexport function useProjects() {\r\n  const { data, isLoading, isFetching, error: queryError } = useQuery({\r\n    queryKey: ['projects'],\r\n    queryFn: () => projectsApi.listAll(),\r\n    staleTime: 30 * 1000, // 30 seconds\r\n  });\r\n\r\n  // Adapt to existing state shape that components expect\r\n  const loading = isLoading || isFetching;\r\n  const error = queryError ? queryError.message : null;\r\n\r\n  return { \r\n    projects: data || [], \r\n    loading, \r\n    error \r\n  };\r\n}\r\n\r\n// Single project query hook\r\nexport function useProject(id: number) {\r\n  const { data, isLoading, error: queryError } = useQuery({\r\n    queryKey: ['projects', id],\r\n    queryFn: () => projectsApi.get(id),\r\n    enabled: !!id, // Only run query if id is provided\r\n  });\r\n\r\n  return {\r\n    project: data,\r\n    loading: isLoading,\r\n    error: queryError ? queryError.message : null\r\n  };\r\n}\r\n\r\n// Project creation mutation\r\nexport function useCreateProject() {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: (projectData: Omit<Project, 'id'>) => projectsApi.create(projectData),\r\n    onSuccess: () => {\r\n      // Invalidate projects list to refetch updated data\r\n      queryClient.invalidateQueries({ queryKey: ['projects'] });\r\n    },\r\n  });\r\n}\r\n\r\n// Project update mutation\r\nexport function useUpdateProject() {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: ({ id, data }: { id: number; data: Partial<Project> }) => \r\n      projectsApi.update(id, data),\r\n    onSuccess: (updatedProject, variables) => {\r\n      // Update specific project in cache\r\n      queryClient.setQueryData(['projects', variables.id], updatedProject);\r\n      // Invalidate projects list to ensure consistency\r\n      queryClient.invalidateQueries({ queryKey: ['projects'] });\r\n    },\r\n  });\r\n}\r\n\r\n// Project deletion mutation\r\nexport function useDeleteProject() {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: (id: number) => projectsApi.delete(id),\r\n    onSuccess: () => {\r\n      // Invalidate projects list to remove deleted project\r\n      queryClient.invalidateQueries({ queryKey: ['projects'] });\r\n    },\r\n  });\r\n}","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { peopleApi } from '@/services/api';\r\nimport { Person } from '@/types/models';\r\n\r\n// People query hook with state adapter for existing code compatibility\r\nexport function usePeople() {\r\n  const { data, isLoading, isFetching, error: queryError } = useQuery({\r\n    queryKey: ['people'],\r\n    queryFn: () => peopleApi.listAll(),\r\n    staleTime: 30 * 1000, // 30 seconds - people data changes less frequently\r\n  });\r\n\r\n  // Adapt to existing state shape that components expect\r\n  const loading = isLoading || isFetching;\r\n  const error = queryError ? queryError.message : null;\r\n\r\n  return { \r\n    people: data || [], \r\n    loading, \r\n    error \r\n  };\r\n}\r\n\r\n// Single person query hook\r\nexport function usePerson(id: number) {\r\n  const { data, isLoading, error: queryError } = useQuery({\r\n    queryKey: ['people', id],\r\n    queryFn: () => peopleApi.get(id),\r\n    enabled: !!id, // Only run query if id is provided\r\n  });\r\n\r\n  return {\r\n    person: data,\r\n    loading: isLoading,\r\n    error: queryError ? queryError.message : null\r\n  };\r\n}\r\n\r\n// Person utilization query hook (optimized N+1 fix)\r\nexport function usePersonUtilization(personId: number, week?: string) {\r\n  const { data, isLoading, error: queryError } = useQuery({\r\n    queryKey: ['person-utilization', personId, week],\r\n    queryFn: () => peopleApi.getPersonUtilization(personId, week),\r\n    enabled: !!personId, // Only run if personId is provided\r\n    staleTime: 10 * 1000, // 10 seconds - utilization changes more frequently\r\n  });\r\n\r\n  return {\r\n    utilization: data,\r\n    loading: isLoading,\r\n    error: queryError ? queryError.message : null\r\n  };\r\n}\r\n\r\n// People for autocomplete - optimized with longer cache time\r\nexport function usePeopleAutocomplete() {\r\n  const { data, isLoading, error: queryError } = useQuery({\r\n    queryKey: ['people-autocomplete'],\r\n    queryFn: () => peopleApi.getForAutocomplete(),\r\n    staleTime: 2 * 60 * 1000, // 2 minutes - autocomplete data can be cached longer\r\n  });\r\n\r\n  return {\r\n    people: data || [],\r\n    loading: isLoading,\r\n    error: queryError ? queryError.message : null\r\n  };\r\n}\r\n\r\n// Person creation mutation\r\nexport function useCreatePerson() {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: (personData: Omit<Person, 'id'>) => peopleApi.create(personData),\r\n    onSuccess: () => {\r\n      // Invalidate all people-related queries\r\n      queryClient.invalidateQueries({ queryKey: ['people'] });\r\n      queryClient.invalidateQueries({ queryKey: ['people-autocomplete'] });\r\n    },\r\n  });\r\n}\r\n\r\n// Person update mutation\r\nexport function useUpdatePerson() {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: ({ id, data }: { id: number; data: Partial<Person> }) => \r\n      peopleApi.update(id, data),\r\n    onSuccess: (updatedPerson, variables) => {\r\n      // Update specific person in cache\r\n      queryClient.setQueryData(['people', variables.id], updatedPerson);\r\n      // Invalidate related queries\r\n      queryClient.invalidateQueries({ queryKey: ['people'] });\r\n      queryClient.invalidateQueries({ queryKey: ['people-autocomplete'] });\r\n      queryClient.invalidateQueries({ queryKey: ['person-utilization', variables.id] });\r\n    },\r\n  });\r\n}\r\n\r\n// Person deletion mutation\r\nexport function useDeletePerson() {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: (id: number) => peopleApi.delete(id),\r\n    onSuccess: () => {\r\n      // Invalidate all people-related queries\r\n      queryClient.invalidateQueries({ queryKey: ['people'] });\r\n      queryClient.invalidateQueries({ queryKey: ['people-autocomplete'] });\r\n    },\r\n  });\r\n}","/**\r\n * Projects List - Split-panel layout with filterable project list and detailed project view\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo, useCallback, Suspense } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Project, Person, Assignment, Deliverable } from '@/types/models';\r\nimport { useDebounce } from '@/hooks/useDebounce';\r\nimport { useProjects, useDeleteProject, useUpdateProject } from '@/hooks/useProjects';\r\nimport { usePeople } from '@/hooks/usePeople';\r\nimport { assignmentsApi, deliverablesApi, peopleApi } from '@/services/api';\r\n\r\ninterface PersonWithAvailability extends Person {\r\n  availableHours?: number;\r\n  utilizationPercent?: number;\r\n  totalHours?: number;\r\n  skillMatchScore?: number;\r\n  hasSkillMatch?: boolean;\r\n}\r\nimport Sidebar from '@/components/layout/Sidebar';\r\n\r\n// Lazy load DeliverablesSection for better initial page performance\r\nconst DeliverablesSection = React.lazy(() => import('@/components/deliverables/DeliverablesSection'));\r\n\r\n// Loading component for DeliverablesSection\r\nconst DeliverablesSectionLoader: React.FC = () => (\r\n  <div className=\"border border-[#3e3e42] rounded-lg p-6 bg-[#2d2d30]\">\r\n    <div className=\"flex items-center justify-center py-8\">\r\n      <div className=\"flex items-center space-x-3\">\r\n        <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-[#007acc]\"></div>\r\n        <div className=\"text-[#969696]\">Loading deliverables...</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// Memoized Assignment Row Component for performance (Phase 4 optimization)\r\ninterface AssignmentRowProps {\r\n  assignment: Assignment;\r\n  isEditing: boolean;\r\n  editData: {\r\n    roleOnProject: string;\r\n    currentWeekHours: number;\r\n    roleSearch: string;\r\n  };\r\n  roleSearchResults: string[];\r\n  onEdit: () => void;\r\n  onDelete: () => void;\r\n  onSave: () => void;\r\n  onCancel: () => void;\r\n  onRoleSearch: (value: string) => void;\r\n  onRoleSelect: (role: string) => void;\r\n  onHoursChange: (hours: number) => void;\r\n  getCurrentWeekHours: (assignment: Assignment) => number;\r\n}\r\n\r\nconst AssignmentRow = React.memo<AssignmentRowProps>(({\r\n  assignment,\r\n  isEditing,\r\n  editData,\r\n  roleSearchResults,\r\n  onEdit,\r\n  onDelete,\r\n  onSave,\r\n  onCancel,\r\n  onRoleSearch,\r\n  onRoleSelect,\r\n  onHoursChange,\r\n  getCurrentWeekHours\r\n}) => {\r\n  if (isEditing) {\r\n    return (\r\n      <div className=\"p-3 bg-[#3e3e42]/50 rounded border border-[#3e3e42]\">\r\n        <div className=\"grid grid-cols-4 gap-4 items-center\">\r\n          {/* Person Name (read-only) */}\r\n          <div className=\"text-[#cccccc]\">{assignment.personName || 'Unknown'}</div>\r\n          \r\n          {/* Role Input with Autocomplete */}\r\n          <div className=\"relative\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Role on project...\"\r\n              value={editData.roleSearch}\r\n              onChange={(e) => onRoleSearch(e.target.value)}\r\n              className=\"w-full px-2 py-1 text-xs bg-[#2d2d30] border border-[#3e3e42] rounded text-[#cccccc] placeholder-[#969696] focus:border-[#007acc] focus:outline-none\"\r\n              autoFocus\r\n            />\r\n            \r\n            {/* Role Search Results Dropdown */}\r\n            {roleSearchResults.length > 0 && (\r\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-[#2d2d30] border border-[#3e3e42] rounded shadow-lg z-50 max-h-32 overflow-y-auto\">\r\n                {roleSearchResults.map((role) => (\r\n                  <button\r\n                    key={role}\r\n                    onClick={() => onRoleSelect(role)}\r\n                    className=\"w-full text-left px-2 py-1 text-xs hover:bg-[#3e3e42] transition-colors text-[#cccccc] border-b border-[#3e3e42] last:border-b-0\"\r\n                  >\r\n                    {role}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Hours Input */}\r\n          <div>\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"80\"\r\n              step=\"0.5\"\r\n              placeholder=\"Hours\"\r\n              value={editData.currentWeekHours}\r\n              onChange={(e) => onHoursChange(parseFloat(e.target.value) || 0)}\r\n              className=\"w-full px-2 py-1 text-xs bg-[#2d2d30] border border-[#3e3e42] rounded text-[#cccccc] placeholder-[#969696] focus:border-[#007acc] focus:outline-none [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none [-moz-appearance:textfield]\"\r\n            />\r\n          </div>\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"flex gap-1\">\r\n            <button\r\n              onClick={onSave}\r\n              className=\"px-2 py-1 text-xs rounded border bg-[#007acc] border-[#007acc] text-white hover:bg-[#005fa3] transition-colors\"\r\n            >\r\n              Save\r\n            </button>\r\n            <button\r\n              onClick={onCancel}\r\n              className=\"px-2 py-1 text-xs rounded border bg-transparent border-[#3e3e42] text-[#969696] hover:text-[#cccccc] hover:bg-[#3e3e42] transition-colors\"\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-between items-center p-2 bg-[#3e3e42]/30 rounded\">\r\n      <div className=\"flex-1\">\r\n        <div className=\"grid grid-cols-3 gap-4\">\r\n          <div>\r\n            <div className=\"text-[#cccccc]\">{assignment.personName || 'Unknown'}</div>\r\n            {/* Person Skills (Read-only) */}\r\n            <div className=\"flex flex-wrap gap-1 mt-1\">\r\n              {assignment.personSkills?.filter(skill => skill.skillType === 'strength').slice(0, 3).map((skill, index) => (\r\n                <span key={index} className=\"px-2 py-0.5 rounded-full text-xs bg-emerald-500/20 text-emerald-400 border border-emerald-500/30\">\r\n                  {skill.skillTagName}\r\n                </span>\r\n              ))}\r\n              {assignment.personSkills?.filter(skill => skill.skillType === 'strength').length === 0 && (\r\n                <span className=\"text-[#969696] text-xs\">No skills listed</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"text-[#969696]\">{assignment.roleOnProject || 'Team Member'}</div>\r\n          <div className=\"text-[#969696]\">{getCurrentWeekHours(assignment)}h</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex gap-1\">\r\n        <button \r\n          onClick={onEdit}\r\n          className=\"text-xs px-1 py-0.5 rounded border bg-transparent border-transparent text-[#cccccc] hover:bg-[#3e3e42] hover:border-[#3e3e42] transition-colors\"\r\n        >\r\n          Edit\r\n        </button>\r\n        <button \r\n          onClick={onDelete}\r\n          className=\"text-xs px-1 py-0.5 rounded border bg-transparent border-transparent text-red-400 hover:bg-red-500/20 hover:border-red-500/30 transition-colors\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nAssignmentRow.displayName = 'AssignmentRow';\r\n\r\n// Memoized Person Search Result Component for performance (Phase 4 optimization)\r\ninterface PersonSearchResultProps {\r\n  person: PersonWithAvailability;\r\n  isSelected: boolean;\r\n  onSelect: () => void;\r\n}\r\n\r\nconst PersonSearchResult = React.memo<PersonSearchResultProps>(({\r\n  person,\r\n  isSelected,\r\n  onSelect\r\n}) => {\r\n  return (\r\n    <button\r\n      key={person.id}\r\n      onClick={onSelect}\r\n      role=\"option\"\r\n      aria-selected={isSelected}\r\n      aria-describedby={`person-${person.id}-details`}\r\n      className={`w-full text-left px-2 py-2 text-xs hover:bg-[#3e3e42] transition-colors border-b border-[#3e3e42] last:border-b-0 ${\r\n        isSelected ? 'bg-[#3e3e42]' : ''\r\n      }`}\r\n    >\r\n      <div className=\"flex justify-between items-start\">\r\n        <div className=\"flex-1\">\r\n          <div className=\"text-[#cccccc] font-medium\">{person.name}</div>\r\n          <div className=\"text-[#969696] text-xs\">{person.role}</div>\r\n          \r\n          {/* Skills Display */}\r\n          <div className=\"flex flex-wrap gap-1 mt-1\">\r\n            {person.hasSkillMatch && (\r\n              <span \r\n                className=\"px-2 py-0.5 rounded-full text-xs bg-emerald-500/20 text-emerald-400 border border-emerald-500/30\"\r\n                aria-label=\"This person has matching skills for your search\"\r\n              >\r\n                ✓ Skill Match\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"text-right ml-2\" id={`person-${person.id}-details`}>\r\n          <div className=\"text-[#cccccc] text-xs font-medium\">\r\n            {person.availableHours?.toFixed(1) || '0'}h available\r\n          </div>\r\n          <div className=\"text-[#969696] text-xs\">\r\n            {person.utilizationPercent?.toFixed(0) || '0'}% utilized\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </button>\r\n  );\r\n});\r\n\r\nPersonSearchResult.displayName = 'PersonSearchResult';\r\n\r\nconst ProjectsList: React.FC = () => {\r\n  // React Query hooks for data management\r\n  const { projects, loading, error: projectsError } = useProjects();\r\n  const { people } = usePeople();\r\n  const deleteProjectMutation = useDeleteProject();\r\n  const updateProjectMutation = useUpdateProject();\r\n  \r\n  // Local UI state\r\n  const [selectedProject, setSelectedProject] = useState<Project | null>(null);\r\n  const [statusFilter, setStatusFilter] = useState('Show All');\r\n  const [sortBy, setSortBy] = useState('name');\r\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [warnings, setWarnings] = useState<string[]>([]);\r\n  const [statusDropdownOpen, setStatusDropdownOpen] = useState(false);\r\n  \r\n  // Deliverables data for all projects\r\n  const [projectDeliverables, setProjectDeliverables] = useState<{ [projectId: number]: Deliverable[] }>({});\r\n  \r\n  // Assignment management\r\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\r\n  const [showAddAssignment, setShowAddAssignment] = useState(false);\r\n  const [newAssignment, setNewAssignment] = useState({\r\n    personSearch: '',\r\n    selectedPerson: null as Person | null,\r\n    roleOnProject: '',\r\n    roleSearch: '',\r\n    weeklyHours: {} as { [key: string]: number }\r\n  });\r\n  const [personSearchResults, setPersonSearchResults] = useState<PersonWithAvailability[]>([]);\r\n  const [selectedPersonIndex, setSelectedPersonIndex] = useState(-1);\r\n  \r\n  // Pre-computed skills mapping for performance (Phase 4 optimization)\r\n  const [personSkillsMap, setPersonSkillsMap] = useState<Map<number, string[]>>(new Map());\r\n  \r\n  // Accessibility - Screen reader announcements (Phase 4 accessibility preservation)\r\n  const [srAnnouncement, setSrAnnouncement] = useState<string>('');\r\n  \r\n  // Debounced person search for better performance\r\n  const debouncedPersonSearch = useDebounce(newAssignment.personSearch, 300);\r\n  \r\n  // Inline editing\r\n  const [editingAssignment, setEditingAssignment] = useState<number | null>(null);\r\n  const [editData, setEditData] = useState({\r\n    roleOnProject: '',\r\n    currentWeekHours: 0,\r\n    roleSearch: '',\r\n  });\r\n  const [availableRoles, setAvailableRoles] = useState<string[]>([]);\r\n  const [roleSearchResults, setRoleSearchResults] = useState<string[]>([]);\r\n\r\n  const statusOptions = ['active', 'active_ca', 'on_hold', 'completed', 'cancelled', 'active_no_deliverables', 'Show All'];\r\n  const editableStatusOptions = ['active', 'active_ca', 'on_hold', 'completed', 'cancelled'];\r\n\r\n  // Set error from React Query if needed\r\n  useEffect(() => {\r\n    if (projectsError) {\r\n      setError(projectsError);\r\n    } else {\r\n      setError(null);\r\n    }\r\n  }, [projectsError]);\r\n\r\n  // Pre-compute person skills map for performance (Phase 4 optimization)\r\n  const precomputePersonSkills = useCallback(() => {\r\n    const newSkillsMap = new Map<number, string[]>();\r\n    \r\n    assignments.forEach(assignment => {\r\n      if (assignment.person && assignment.personSkills) {\r\n        const personId = assignment.person;\r\n        const existingSkills = newSkillsMap.get(personId) || [];\r\n        \r\n        // Extract strength skills and convert to lowercase for matching\r\n        const assignmentSkills = assignment.personSkills\r\n          .filter(skill => skill.skillType === 'strength')\r\n          .map(skill => skill.skillTagName?.toLowerCase() || '')\r\n          .filter(skill => skill.length > 0);\r\n        \r\n        // Combine and deduplicate skills for this person\r\n        const combinedSkills = [...new Set([...existingSkills, ...assignmentSkills])];\r\n        newSkillsMap.set(personId, combinedSkills);\r\n      }\r\n    });\r\n    \r\n    setPersonSkillsMap(newSkillsMap);\r\n  }, [assignments]);\r\n\r\n  // Recompute skills when assignments change\r\n  useEffect(() => {\r\n    if (assignments.length > 0) {\r\n      precomputePersonSkills();\r\n    }\r\n  }, [assignments, precomputePersonSkills]);\r\n\r\n  useEffect(() => {\r\n    if (selectedProject?.id) {\r\n      loadProjectAssignments(selectedProject.id);\r\n    }\r\n  }, [selectedProject]);\r\n\r\n  // Load deliverables for all projects when projects data changes\r\n  useEffect(() => {\r\n    if (projects.length > 0) {\r\n      loadAllProjectDeliverables(projects);\r\n    }\r\n  }, [projects]);\r\n\r\n  const loadAllProjectDeliverables = async (projectsList: Project[]) => {\r\n    try {\r\n      const startTime = performance.now();\r\n      \r\n      // Extract project IDs for bulk API call\r\n      const projectIds = projectsList.map(p => p.id).filter(id => id !== undefined) as number[];\r\n      \r\n      if (projectIds.length === 0) {\r\n        setProjectDeliverables({});\r\n        return;\r\n      }\r\n      \r\n      // Single bulk API call replaces N individual calls\r\n      const bulkDeliverablesResponse = await deliverablesApi.bulkList(projectIds);\r\n      \r\n      // Convert string keys to numbers for compatibility\r\n      const deliverablesMap: { [projectId: number]: Deliverable[] } = {};\r\n      Object.entries(bulkDeliverablesResponse).forEach(([projectId, deliverables]) => {\r\n        deliverablesMap[parseInt(projectId)] = deliverables;\r\n      });\r\n      \r\n      setProjectDeliverables(deliverablesMap);\r\n      \r\n      const endTime = performance.now();\r\n      console.log(`Bulk deliverables loaded in ${Math.round(endTime - startTime)}ms for ${projectIds.length} projects`);\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to load bulk deliverables:', error);\r\n      // Set empty deliverables for all projects on error\r\n      const emptyMap: { [projectId: number]: Deliverable[] } = {};\r\n      projectsList.forEach(project => {\r\n        if (project.id) {\r\n          emptyMap[project.id] = [];\r\n        }\r\n      });\r\n      setProjectDeliverables(emptyMap);\r\n    }\r\n  };\r\n\r\n  const getNextDeliverable = (projectId: number): Deliverable | null => {\r\n    const deliverables = projectDeliverables[projectId] || [];\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0); // Reset time for accurate date comparison\r\n    \r\n    // Filter deliverables that:\r\n    // 1. Have a date set\r\n    // 2. Are not completed\r\n    // 3. Are today or in the future\r\n    const upcomingDeliverables = deliverables\r\n      .filter(d => d.date && !d.isCompleted)\r\n      .filter(d => {\r\n        // Parse date string manually to avoid timezone issues\r\n        const [year, month, day] = d.date!.split('-').map(Number);\r\n        const deliverableDate = new Date(year, month - 1, day);\r\n        deliverableDate.setHours(0, 0, 0, 0);\r\n        return deliverableDate >= today;\r\n      })\r\n      .sort((a, b) => {\r\n        // Sort by date, then by percentage (lower percentage = earlier milestone)\r\n        // Parse dates manually to avoid timezone issues\r\n        const [aYear, aMonth, aDay] = a.date!.split('-').map(Number);\r\n        const [bYear, bMonth, bDay] = b.date!.split('-').map(Number);\r\n        const aDate = new Date(aYear, aMonth - 1, aDay);\r\n        const bDate = new Date(bYear, bMonth - 1, bDay);\r\n        const dateCompare = aDate.getTime() - bDate.getTime();\r\n        if (dateCompare !== 0) return dateCompare;\r\n        return (a.percentage || 0) - (b.percentage || 0);\r\n      });\r\n\r\n    return upcomingDeliverables.length > 0 ? upcomingDeliverables[0] : null;\r\n  };\r\n\r\n  const formatNextDeliverable = (deliverable: Deliverable): string => {\r\n    const parts = [];\r\n    \r\n    if (deliverable.date) {\r\n      // Parse date string manually to avoid timezone issues\r\n      const [year, month, day] = deliverable.date.split('-').map(Number);\r\n      const date = new Date(year, month - 1, day); // month is 0-indexed\r\n      parts.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));\r\n    }\r\n    \r\n    if (deliverable.percentage !== null) {\r\n      parts.push(`${deliverable.percentage}%`);\r\n    }\r\n    \r\n    if (deliverable.description) {\r\n      parts.push(deliverable.description);\r\n    }\r\n    \r\n    return parts.length > 0 ? parts.join(' • ') : '-';\r\n  };\r\n\r\n  const hasUpcomingDeliverableDates = (projectId: number): boolean => {\r\n    const deliverables = projectDeliverables[projectId] || [];\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    return deliverables.some(d => {\r\n      if (!d.date || d.isCompleted) return false;\r\n      \r\n      // Parse date string manually to avoid timezone issues\r\n      const [year, month, day] = d.date.split('-').map(Number);\r\n      const deliverableDate = new Date(year, month - 1, day);\r\n      deliverableDate.setHours(0, 0, 0, 0);\r\n      return deliverableDate >= today;\r\n    });\r\n  };\r\n\r\n  const formatFilterStatus = (status: string): string => {\r\n    if (status === 'Show All') return 'Show All';\r\n    if (status === 'active_no_deliverables') return 'Active - No Dates';\r\n    if (status === 'active_ca') return 'Active CA';\r\n    return formatStatus(status);\r\n  };\r\n\r\n  const handleDelete = async (projectId: number) => {\r\n    if (!confirm('Are you sure you want to delete this project? This action cannot be undone.')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await deleteProjectMutation.mutateAsync(projectId);\r\n      \r\n      // Clear selection if deleted project was selected\r\n      if (selectedProject?.id === projectId) {\r\n        const remainingProjects = projects.filter(p => p.id !== projectId);\r\n        if (remainingProjects.length > 0) {\r\n          setSelectedProject(remainingProjects[0]);\r\n          setSelectedIndex(0);\r\n        } else {\r\n          setSelectedProject(null);\r\n          setSelectedIndex(-1);\r\n        }\r\n      }\r\n    } catch (err: any) {\r\n      setError('Failed to delete project');\r\n    }\r\n  };\r\n\r\n  // People data is now managed by React Query hook\r\n\r\n  const loadProjectAssignments = async (projectId: number) => {\r\n    try {\r\n      // Get all assignments and filter by project\r\n      const allAssignments = await assignmentsApi.listAll();\r\n      const projectAssignments = allAssignments.filter(assignment => assignment.project === projectId);\r\n      \r\n      setAssignments(projectAssignments);\r\n      \r\n      // Extract unique roles from all assignments for autocomplete\r\n      const roles = new Set<string>();\r\n      projectAssignments.forEach(assignment => {\r\n        if (assignment.roleOnProject) {\r\n          roles.add(assignment.roleOnProject);\r\n        }\r\n      });\r\n      // Also add roles from people\r\n      people.forEach(person => {\r\n        if (person.role) {\r\n          roles.add(person.role);\r\n        }\r\n      });\r\n      const sortedRoles = Array.from(roles).sort();\r\n      setAvailableRoles(sortedRoles);\r\n    } catch (err: any) {\r\n      console.error('Failed to load project assignments:', err);\r\n    }\r\n  };\r\n\r\n\r\n  // Optimized calculatePersonAvailability using backend utilization endpoint\r\n  const calculatePersonAvailability = async (person: Person): Promise<{ availableHours: number; utilizationPercent: number; totalHours: number }> => {\r\n    try {\r\n      // Get current week key\r\n      const now = new Date();\r\n      const dayOfWeek = now.getDay();\r\n      const monday = new Date(now);\r\n      monday.setDate(now.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1));\r\n      const currentWeekKey = monday.toISOString().split('T')[0];\r\n\r\n      // Use optimized API endpoint\r\n      const utilizationData = await peopleApi.getPersonUtilization(person.id!, currentWeekKey);\r\n      \r\n      return {\r\n        availableHours: utilizationData.utilization.available_hours,\r\n        utilizationPercent: Math.round(utilizationData.utilization.total_percentage),\r\n        totalHours: utilizationData.utilization.allocated_hours\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to calculate person availability:', error);\r\n      return { availableHours: 0, utilizationPercent: 0, totalHours: 0 };\r\n    }\r\n  };\r\n\r\n  // Optimized skill match calculation using pre-computed skills map (Phase 4)\r\n  const calculateSkillMatch = useCallback((person: PersonWithAvailability, requiredSkills: string[] = []): number => {\r\n    if (requiredSkills.length === 0) return 0;\r\n    \r\n    // Get person's skills from pre-computed map (much faster than filtering assignments)\r\n    const personSkills = personSkillsMap.get(person.id) || [];\r\n    \r\n    const matches = requiredSkills.filter(reqSkill => \r\n      personSkills.some(personSkill => \r\n        personSkill.includes(reqSkill.toLowerCase()) || \r\n        reqSkill.toLowerCase().includes(personSkill)\r\n      )\r\n    );\r\n    \r\n    return matches.length / requiredSkills.length; // Return match ratio\r\n  }, [personSkillsMap]);\r\n\r\n  // Handle immediate input update (no delay for UI feedback)\r\n  const handlePersonSearch = (searchTerm: string) => {\r\n    setNewAssignment(prev => ({ ...prev, personSearch: searchTerm }));\r\n    setSelectedPersonIndex(-1);\r\n  };\r\n\r\n  // Perform actual search with debounced value\r\n  const performPersonSearch = async (searchTerm: string) => {\r\n    // If no search term, show all people; if search term provided, filter by it\r\n    let filtered = people;\r\n    if (searchTerm.length > 0) {\r\n      filtered = people.filter(person =>\r\n        person.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        person.role?.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    // Detect potential skill requirements from search term\r\n    const commonSkills = ['heat', 'lighting', 'hvac', 'autocad', 'python', 'design', 'mechanical', 'electrical'];\r\n    const detectedSkills = commonSkills.filter(skill => \r\n      searchTerm.toLowerCase().includes(skill)\r\n    );\r\n    \r\n    // Calculate availability and skill matching for each person\r\n    const peopleWithData = await Promise.all(\r\n      filtered.map(async (person) => {\r\n        const availability = await calculatePersonAvailability(person);\r\n        const skillMatchScore = calculateSkillMatch({ ...person, ...availability }, detectedSkills);\r\n        return { \r\n          ...person, \r\n          ...availability,\r\n          skillMatchScore,\r\n          hasSkillMatch: skillMatchScore > 0\r\n        };\r\n      })\r\n    );\r\n    \r\n    // Sort by skill match (if any), then availability, then name\r\n    const sortedResults = peopleWithData\r\n      .sort((a, b) => {\r\n        // First priority: Skill match\r\n        if (a.skillMatchScore !== b.skillMatchScore) {\r\n          return b.skillMatchScore - a.skillMatchScore;\r\n        }\r\n        \r\n        // Second priority: Availability\r\n        if (b.availableHours !== a.availableHours) {\r\n          return b.availableHours - a.availableHours;\r\n        }\r\n        \r\n        // Third priority: Name\r\n        return a.name.localeCompare(b.name);\r\n      })\r\n      .slice(0, 5);\r\n    \r\n    setPersonSearchResults(sortedResults);\r\n    \r\n    // Announce results for screen readers (Phase 4 accessibility)\r\n    setSrAnnouncement(`Found ${sortedResults.length} people matching your search. ${sortedResults.filter(p => p.hasSkillMatch).length} with skill matches.`);\r\n  };\r\n\r\n  // Effect to trigger search when debounced value changes\r\n  useEffect(() => {\r\n    if (people.length > 0) {\r\n      performPersonSearch(debouncedPersonSearch);\r\n    }\r\n  }, [debouncedPersonSearch, people]);\r\n\r\n  const handlePersonSelect = (person: Person) => {\r\n    setNewAssignment(prev => ({\r\n      ...prev,\r\n      selectedPerson: person,\r\n      personSearch: person.name,\r\n    }));\r\n    setPersonSearchResults([]);\r\n    setSelectedPersonIndex(-1);\r\n  };\r\n\r\n  const handlePersonSearchKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'ArrowDown') {\r\n      e.preventDefault();\r\n      if (personSearchResults.length > 0) {\r\n        setSelectedPersonIndex(prev => \r\n          prev < personSearchResults.length - 1 ? prev + 1 : prev\r\n        );\r\n      }\r\n    } else if (e.key === 'ArrowUp') {\r\n      e.preventDefault();\r\n      if (personSearchResults.length > 0) {\r\n        setSelectedPersonIndex(prev => prev > -1 ? prev - 1 : -1);\r\n      }\r\n    } else if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      if (selectedPersonIndex >= 0 && selectedPersonIndex < personSearchResults.length) {\r\n        handlePersonSelect(personSearchResults[selectedPersonIndex]);\r\n      }\r\n    } else if (e.key === 'Escape') {\r\n      setPersonSearchResults([]);\r\n      setSelectedPersonIndex(-1);\r\n    }\r\n  };\r\n\r\n  // Memoized role suggestions based on person skills\r\n  const getSkillBasedRoleSuggestions = useCallback((person: Person | null): string[] => {\r\n    if (!person || !assignments) return [];\r\n    \r\n    // Get person's skills from their existing assignments\r\n    const personAssignments = assignments.filter(a => a.person === person.id);\r\n    const personSkills = personAssignments\r\n      .flatMap(a => a.personSkills || [])\r\n      .filter(skill => skill.skillType === 'strength')\r\n      .map(skill => skill.skillTagName?.toLowerCase() || '');\r\n    \r\n    const skillBasedRoles: string[] = [];\r\n    \r\n    // Map skills to suggested roles\r\n    if (personSkills.some(skill => skill.includes('heat') || skill.includes('hvac'))) {\r\n      skillBasedRoles.push('HVAC Engineer', 'Mechanical Designer', 'Heat Calc Specialist');\r\n    }\r\n    if (personSkills.some(skill => skill.includes('lighting') || skill.includes('electrical'))) {\r\n      skillBasedRoles.push('Lighting Designer', 'Electrical Engineer', 'Photometric Specialist');\r\n    }\r\n    if (personSkills.some(skill => skill.includes('autocad') || skill.includes('cad'))) {\r\n      skillBasedRoles.push('CAD Designer', 'Technical Drafter', 'Design Engineer');\r\n    }\r\n    if (personSkills.some(skill => skill.includes('python') || skill.includes('programming'))) {\r\n      skillBasedRoles.push('Automation Engineer', 'Technical Developer', 'Data Analyst');\r\n    }\r\n    if (personSkills.some(skill => skill.includes('project') || skill.includes('management'))) {\r\n      skillBasedRoles.push('Project Manager', 'Team Lead', 'Coordinator');\r\n    }\r\n    \r\n    return skillBasedRoles;\r\n  }, [assignments]);\r\n\r\n  const handleNewAssignmentRoleSearch = (searchTerm: string) => {\r\n    setNewAssignment(prev => ({ \r\n      ...prev, \r\n      roleSearch: searchTerm, \r\n      roleOnProject: searchTerm \r\n    }));\r\n    \r\n    if (searchTerm.length < 1) {\r\n      setRoleSearchResults([]);\r\n      return;\r\n    }\r\n    \r\n    // Get existing roles that match the search\r\n    const filteredExistingRoles = availableRoles.filter(role =>\r\n      role.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    \r\n    // Get skill-based suggestions for the selected person\r\n    const skillSuggestions = newAssignment.selectedPerson \r\n      ? getSkillBasedRoleSuggestions(newAssignment.selectedPerson)\r\n      : [];\r\n    \r\n    const filteredSkillRoles = skillSuggestions.filter(role =>\r\n      role.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    \r\n    // Combine and deduplicate, prioritizing skill-based suggestions\r\n    const allRoles = [...filteredSkillRoles, ...filteredExistingRoles];\r\n    const uniqueRoles = Array.from(new Set(allRoles)).slice(0, 5);\r\n    \r\n    setRoleSearchResults(uniqueRoles);\r\n  };\r\n\r\n  const handleNewAssignmentRoleSelect = (role: string) => {\r\n    setNewAssignment(prev => ({ \r\n      ...prev, \r\n      roleOnProject: role, \r\n      roleSearch: role \r\n    }));\r\n    setRoleSearchResults([]);\r\n  };\r\n\r\n  const handleAddAssignment = () => {\r\n    setShowAddAssignment(true);\r\n    setNewAssignment({\r\n      personSearch: '',\r\n      selectedPerson: null,\r\n      roleOnProject: '',\r\n      roleSearch: '',\r\n      weeklyHours: {}\r\n    });\r\n  };\r\n\r\n  const handleSaveAssignment = async () => {\r\n    if (!selectedProject?.id || !newAssignment.selectedPerson?.id) return;\r\n\r\n    try {\r\n      // Check for overallocation warnings before creating\r\n      const weeklyHours = newAssignment.weeklyHours || {};\r\n      const totalNewHours = Object.values(weeklyHours).reduce((sum, hours) => sum + (hours || 0), 0);\r\n      \r\n      if (totalNewHours > 0) {\r\n        // Get current week key for warning calculation\r\n        const now = new Date();\r\n        const dayOfWeek = now.getDay();\r\n        const monday = new Date(now);\r\n        monday.setDate(now.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1));\r\n        const currentWeekKey = monday.toISOString().split('T')[0];\r\n        \r\n        const currentWeekHours = weeklyHours[currentWeekKey] || 0;\r\n        if (currentWeekHours > 0 && selectedProject?.id) {\r\n          const conflictWarnings = await checkAssignmentConflicts(newAssignment.selectedPerson.id, selectedProject.id, currentWeekKey, currentWeekHours);\r\n          setWarnings(conflictWarnings);\r\n        }\r\n      }\r\n\r\n      const assignmentData = {\r\n        person: newAssignment.selectedPerson.id,\r\n        project: selectedProject.id,\r\n        roleOnProject: newAssignment.roleOnProject || 'Team Member',\r\n        weeklyHours: newAssignment.weeklyHours,\r\n        startDate: new Date().toISOString().split('T')[0], // Today\r\n      };\r\n\r\n      await assignmentsApi.create(assignmentData);\r\n      await loadProjectAssignments(selectedProject.id);\r\n      setShowAddAssignment(false);\r\n    } catch (err: any) {\r\n      setError('Failed to create assignment');\r\n    }\r\n  };\r\n\r\n  const handleCancelAddAssignment = () => {\r\n    setShowAddAssignment(false);\r\n    setWarnings([]); // Clear warnings on cancel\r\n    setNewAssignment({\r\n      personSearch: '',\r\n      selectedPerson: null,\r\n      roleOnProject: '',\r\n      roleSearch: '',\r\n      weeklyHours: {}\r\n    });\r\n    setPersonSearchResults([]);\r\n    setRoleSearchResults([]);\r\n  };\r\n\r\n  // Helper function to get current week hours for an assignment\r\n  const getCurrentWeekHours = (assignment: Assignment): number => {\r\n    // Get current week in YYYY-MM-DD format for the Monday of this week\r\n    const now = new Date();\r\n    const dayOfWeek = now.getDay();\r\n    const monday = new Date(now);\r\n    monday.setDate(now.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1));\r\n    const currentWeekKey = monday.toISOString().split('T')[0];\r\n    \r\n    return assignment.weeklyHours?.[currentWeekKey] || 0;\r\n  };\r\n\r\n  const handleDeleteAssignment = useCallback(async (assignmentId: number) => {\r\n    if (!confirm('Are you sure you want to remove this assignment?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await assignmentsApi.delete(assignmentId);\r\n      if (selectedProject?.id) {\r\n        await loadProjectAssignments(selectedProject.id);\r\n      }\r\n    } catch (err: any) {\r\n      setError('Failed to delete assignment');\r\n    }\r\n  }, [selectedProject?.id, loadProjectAssignments]);\r\n\r\n  const handleEditAssignment = useCallback((assignment: Assignment) => {\r\n    setEditingAssignment(assignment.id!);\r\n    const currentWeekHours = getCurrentWeekHours(assignment);\r\n    const existingRole = assignment.roleOnProject || '';\r\n    setEditData({\r\n      roleOnProject: existingRole,\r\n      currentWeekHours,\r\n      roleSearch: existingRole, // Keep the existing role in the search field\r\n    });\r\n    // Clear any previous search results\r\n    setRoleSearchResults([]);\r\n  }, [getCurrentWeekHours]);\r\n\r\n  const handleRoleSearch = useCallback((searchTerm: string) => {\r\n    setEditData(prev => {\r\n      const newData = { ...prev, roleSearch: searchTerm, roleOnProject: searchTerm };\r\n      return newData;\r\n    });\r\n    \r\n    if (searchTerm.length < 1) {\r\n      setRoleSearchResults([]);\r\n      return;\r\n    }\r\n    \r\n    // Get existing roles that match the search\r\n    const filteredExistingRoles = availableRoles.filter(role =>\r\n      role.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    \r\n    // Get skill-based suggestions for the person being edited\r\n    const editingAssignmentData = assignments.find(a => a.id === editingAssignment);\r\n    const editingPerson = editingAssignmentData ? people.find(p => p.id === editingAssignmentData.person) : null;\r\n    \r\n    const skillSuggestions = editingPerson \r\n      ? getSkillBasedRoleSuggestions(editingPerson)\r\n      : [];\r\n    \r\n    const filteredSkillRoles = skillSuggestions.filter(role =>\r\n      role.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    \r\n    // Combine and deduplicate, prioritizing skill-based suggestions\r\n    const allRoles = [...filteredSkillRoles, ...filteredExistingRoles];\r\n    const uniqueRoles = Array.from(new Set(allRoles)).slice(0, 5);\r\n    \r\n    setRoleSearchResults(uniqueRoles);\r\n  }, [availableRoles, assignments, people, editingAssignment, getSkillBasedRoleSuggestions]);\r\n\r\n  const handleRoleSelect = (role: string) => {\r\n    setEditData(prev => ({ ...prev, roleOnProject: role, roleSearch: role }));\r\n    setRoleSearchResults([]);\r\n  };\r\n\r\n\r\n  // Optimized checkAssignmentConflicts using backend conflict checking endpoint\r\n  const checkAssignmentConflicts = async (personId: number, projectId: number, weekKey: string, newHours: number): Promise<string[]> => {\r\n    try {\r\n      // Use optimized API endpoint\r\n      const conflictResponse = await assignmentsApi.checkConflicts(personId, projectId, weekKey, newHours);\r\n      \r\n      return conflictResponse.warnings;\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to check assignment conflicts:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const handleSaveEdit = async (assignmentId: number) => {\r\n    try {\r\n      const assignment = assignments.find(a => a.id === assignmentId);\r\n      if (!assignment) return;\r\n\r\n      // Get current week key\r\n      const now = new Date();\r\n      const dayOfWeek = now.getDay();\r\n      const monday = new Date(now);\r\n      monday.setDate(now.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1));\r\n      const currentWeekKey = monday.toISOString().split('T')[0];\r\n\r\n      // Check for assignment conflicts and overallocation warnings before saving\r\n      const currentWeekHours = assignment.weeklyHours?.[currentWeekKey] || 0;\r\n      const hoursChange = editData.currentWeekHours - currentWeekHours;\r\n      \r\n      if (hoursChange > 0 && selectedProject?.id) { // Only check if we're increasing hours\r\n        const conflictWarnings = await checkAssignmentConflicts(assignment.person, selectedProject.id, currentWeekKey, hoursChange);\r\n        setWarnings(conflictWarnings);\r\n      } else {\r\n        setWarnings([]); // Clear warnings if reducing hours\r\n      }\r\n\r\n      // Update weekly hours with current week\r\n      const updatedWeeklyHours = {\r\n        ...assignment.weeklyHours,\r\n        [currentWeekKey]: editData.currentWeekHours\r\n      };\r\n\r\n      // Use the role from editData, fallback to 'Team Member' if truly empty\r\n      const roleToSave = editData.roleOnProject?.trim() || 'Team Member';\r\n      \r\n      const updateData = {\r\n        roleOnProject: roleToSave,\r\n        weeklyHours: updatedWeeklyHours\r\n      };\r\n      \r\n\r\n      await assignmentsApi.update(assignmentId, updateData);\r\n\r\n      if (selectedProject?.id) {\r\n        await loadProjectAssignments(selectedProject.id);\r\n      }\r\n      \r\n      setEditingAssignment(null);\r\n      setRoleSearchResults([]);\r\n    } catch (err: any) {\r\n      console.error('Failed to update assignment:', err);\r\n      setError('Failed to update assignment');\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingAssignment(null);\r\n    setRoleSearchResults([]);\r\n    setWarnings([]); // Clear warnings on cancel\r\n    setEditData({\r\n      roleOnProject: '',\r\n      currentWeekHours: 0,\r\n      roleSearch: '',\r\n    });\r\n  };\r\n\r\n\r\n  const handleStatusChange = async (newStatus: string) => {\r\n    if (!selectedProject?.id) return;\r\n\r\n    try {\r\n      // Optimistic update - update local state immediately\r\n      const optimisticProject = { ...selectedProject, status: newStatus };\r\n      setSelectedProject(optimisticProject);\r\n      setStatusDropdownOpen(false);\r\n      \r\n      // Perform actual update\r\n      await updateProjectMutation.mutateAsync({\r\n        id: selectedProject.id,\r\n        data: { status: newStatus }\r\n      });\r\n    } catch (err: any) {\r\n      // Revert optimistic update on error\r\n      setSelectedProject(selectedProject);\r\n      setError('Failed to update project status');\r\n    }\r\n  };\r\n\r\n  const handleProjectClick = (project: Project, index: number) => {\r\n    setSelectedProject(project);\r\n    setSelectedIndex(index);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status?.toLowerCase()) {\r\n      case 'active': return 'text-emerald-400';\r\n      case 'active_ca': return 'text-blue-400';\r\n      case 'planning': return 'text-blue-400';\r\n      case 'on_hold': return 'text-amber-400';\r\n      case 'completed': return 'text-slate-400';\r\n      case 'cancelled': return 'text-red-400';\r\n      default: return 'text-slate-400';\r\n    }\r\n  };\r\n\r\n  const formatStatus = (status: string) => {\r\n    if (status === 'active_ca') return 'Active CA';\r\n    return status?.split('_').map(word => \r\n      word.charAt(0).toUpperCase() + word.slice(1)\r\n    ).join(' ') || 'Unknown';\r\n  };\r\n\r\n  const handleSort = (column: string) => {\r\n    if (sortBy === column) {\r\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortBy(column);\r\n      setSortDirection('asc');\r\n    }\r\n  };\r\n\r\n  // Memoized filtered and sorted projects for better performance\r\n  const filteredProjects = useMemo(() => projects.filter(project => {\r\n    let matchesStatus = false;\r\n    \r\n    if (statusFilter === 'Show All') {\r\n      matchesStatus = true;\r\n    } else if (statusFilter === 'active_no_deliverables') {\r\n      // Filter to active projects with no upcoming deliverable dates\r\n      matchesStatus = project.status === 'active' && project.id !== undefined && !hasUpcomingDeliverableDates(project.id);\r\n    } else {\r\n      matchesStatus = project.status === statusFilter;\r\n    }\r\n    \r\n    const matchesSearch = !searchTerm || \r\n      project.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      project.client?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      project.projectNumber?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    return matchesStatus && matchesSearch;\r\n  }), [projects, statusFilter, searchTerm, projectDeliverables]);\r\n\r\n  // Memoized sorted projects\r\n  const sortedProjects = useMemo(() => [...filteredProjects].sort((a, b) => {\r\n    let aValue: any, bValue: any;\r\n    \r\n    switch (sortBy) {\r\n      case 'client':\r\n        aValue = a.client || '';\r\n        bValue = b.client || '';\r\n        break;\r\n      case 'name':\r\n        aValue = a.name || '';\r\n        bValue = b.name || '';\r\n        break;\r\n      case 'type':\r\n        // We don't have type field in backend, using status as fallback\r\n        aValue = a.status || '';\r\n        bValue = b.status || '';\r\n        break;\r\n      case 'status':\r\n        aValue = a.status || '';\r\n        bValue = b.status || '';\r\n        break;\r\n      case 'nextDeliverable':\r\n        const aNext = a.id ? getNextDeliverable(a.id) : null;\r\n        const bNext = b.id ? getNextDeliverable(b.id) : null;\r\n        \r\n        // Sort by date first, then by percentage\r\n        if (!aNext && !bNext) {\r\n          aValue = '';\r\n          bValue = '';\r\n        } else if (!aNext) {\r\n          aValue = 'zzz'; // Sort projects without deliverables to the end\r\n          bValue = bNext!.date || 'zzz';\r\n        } else if (!bNext) {\r\n          aValue = aNext.date || 'zzz';\r\n          bValue = 'zzz';\r\n        } else {\r\n          aValue = aNext.date || 'zzz';\r\n          bValue = bNext.date || 'zzz';\r\n          \r\n          // If dates are the same, sort by percentage\r\n          if (aValue === bValue) {\r\n            aValue = aNext.percentage || 0;\r\n            bValue = bNext.percentage || 0;\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        aValue = a.name || '';\r\n        bValue = b.name || '';\r\n    }\r\n\r\n    // For date comparison\r\n    if (sortBy === 'nextDeliverable') {\r\n      return sortDirection === 'asc' ? aValue.getTime() - bValue.getTime() : bValue.getTime() - aValue.getTime();\r\n    }\r\n\r\n    // For string comparison\r\n    const result = aValue.toString().localeCompare(bValue.toString());\r\n    return sortDirection === 'asc' ? result : -result;\r\n  }), [filteredProjects, sortBy, sortDirection, projectDeliverables]);\r\n\r\n  // Auto-select first project from sorted/filtered list\r\n  useEffect(() => {\r\n    if (sortedProjects.length > 0 && !selectedProject) {\r\n      setSelectedProject(sortedProjects[0]);\r\n      setSelectedIndex(0);\r\n    }\r\n  }, [sortedProjects, selectedProject]);\r\n\r\n  // Keyboard navigation\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n        e.preventDefault();\r\n        \r\n        let newIndex = selectedIndex;\r\n        if (e.key === 'ArrowUp' && selectedIndex > 0) {\r\n          newIndex = selectedIndex - 1;\r\n        } else if (e.key === 'ArrowDown' && selectedIndex < sortedProjects.length - 1) {\r\n          newIndex = selectedIndex + 1;\r\n        }\r\n        \r\n        if (newIndex !== selectedIndex) {\r\n          setSelectedIndex(newIndex);\r\n          setSelectedProject(sortedProjects[newIndex]);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [selectedIndex, sortedProjects]);\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (statusDropdownOpen) {\r\n        const target = event.target as Element;\r\n        // Check if the click was outside the dropdown by looking for the dropdown container\r\n        const dropdownContainer = target.closest('.status-dropdown-container');\r\n        if (!dropdownContainer) {\r\n          setStatusDropdownOpen(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, [statusDropdownOpen]);\r\n\r\n  const SortIcon = ({ column }: { column: string }) => {\r\n    if (sortBy !== column) return null;\r\n    \r\n    return (\r\n      <span className=\"ml-1 text-[#007acc]\">\r\n        {sortDirection === 'asc' ? '▲' : '▼'}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-[#1e1e1e] flex items-center justify-center\">\r\n        <div className=\"text-[#969696]\">Loading projects...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-[#1e1e1e] flex\">\r\n      <Sidebar />\r\n      <div className=\"flex-1 flex h-screen bg-[#1e1e1e]\">\r\n        \r\n        {/* Left Panel - Projects List */}\r\n        <div className=\"w-1/2 border-r border-[#3e3e42] flex flex-col min-w-0\">\r\n          \r\n          {/* Header */}\r\n          <div className=\"p-3 border-b border-[#3e3e42]\">\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n              <h1 className=\"text-lg font-semibold text-[#cccccc]\">Projects</h1>\r\n              <Link to=\"/projects/new\">\r\n                <button className=\"px-2 py-0.5 text-xs rounded border bg-[#3e3e42] border-[#3e3e42] text-[#cccccc] hover:bg-[#4e4e52] hover:text-[#cccccc] transition-colors\">\r\n                  + New\r\n                </button>\r\n              </Link>\r\n            </div>\r\n\r\n            {/* Filters */}\r\n            <div className=\"space-y-2\">\r\n              {/* Status Filter */}\r\n              <div>\r\n                <label className=\"text-xs text-[#969696] mb-1 block\">Filter by Status:</label>\r\n                <div className=\"flex flex-wrap gap-1\">\r\n                  {statusOptions.map((status) => (\r\n                    <button\r\n                      key={status}\r\n                      onClick={() => setStatusFilter(status)}\r\n                      className={`px-2 py-0.5 text-xs rounded border transition-colors ${\r\n                        statusFilter === status\r\n                          ? 'bg-[#007acc] border-[#007acc] text-white'\r\n                          : 'bg-[#3e3e42] border-[#3e3e42] text-[#969696] hover:text-[#cccccc]'\r\n                      }`}\r\n                    >\r\n                      {formatFilterStatus(status)}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Search */}\r\n              <div>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search projects\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"w-full px-3 py-1.5 text-sm bg-[#3e3e42] border border-[#3e3e42] rounded text-[#cccccc] placeholder-[#969696] focus:border-[#007acc] focus:outline-none\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error Message */}\r\n          {error && (\r\n            <div className=\"p-3 bg-red-500/20 border-b border-red-500/50\">\r\n              <div className=\"text-red-400 text-sm\">{error}</div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Warnings Message */}\r\n          {warnings.length > 0 && (\r\n            <div className=\"p-3 bg-amber-500/20 border-b border-amber-500/50\">\r\n              {warnings.map((warning, index) => (\r\n                <div key={index} className=\"text-amber-400 text-sm flex items-center gap-2\">\r\n                  <span>{warning}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {/* Projects Table */}\r\n          <div className=\"flex-1 overflow-hidden\">\r\n            {/* Table Header */}\r\n            <div className=\"grid grid-cols-12 gap-2 px-2 py-1.5 text-xs text-[#969696] font-medium border-b border-[#3e3e42] bg-[#2d2d30]\">\r\n              <div className=\"col-span-2 cursor-pointer hover:text-[#cccccc] transition-colors flex items-center\" onClick={() => handleSort('client')}>\r\n                CLIENT<SortIcon column=\"client\" />\r\n              </div>\r\n              <div className=\"col-span-3 cursor-pointer hover:text-[#cccccc] transition-colors flex items-center\" onClick={() => handleSort('name')}>\r\n                PROJECT<SortIcon column=\"name\" />\r\n              </div>\r\n              <div className=\"col-span-1 cursor-pointer hover:text-[#cccccc] transition-colors flex items-center\" onClick={() => handleSort('type')}>\r\n                TYPE<SortIcon column=\"type\" />\r\n              </div>\r\n              <div className=\"col-span-2 cursor-pointer hover:text-[#cccccc] transition-colors flex items-center\" onClick={() => handleSort('status')}>\r\n                STATUS<SortIcon column=\"status\" />\r\n              </div>\r\n              <div className=\"col-span-4 cursor-pointer hover:text-[#cccccc] transition-colors flex items-center\" onClick={() => handleSort('nextDeliverable')}>\r\n                NEXT DELIVERABLE<SortIcon column=\"nextDeliverable\" />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Table Body */}\r\n            <div className=\"overflow-y-auto h-full\">\r\n              {sortedProjects.length === 0 ? (\r\n                <div className=\"flex items-center justify-center py-12\">\r\n                  <div className=\"text-center text-[#969696]\">\r\n                    <div className=\"text-lg mb-2\">No projects found</div>\r\n                    <div className=\"text-sm\">Try adjusting your filters or create a new project</div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                sortedProjects.map((project, index) => (\r\n                  <div\r\n                    key={project.id}\r\n                    onClick={() => handleProjectClick(project, index)}\r\n                    className={`grid grid-cols-12 gap-2 px-2 py-1.5 text-sm border-b border-[#3e3e42] cursor-pointer hover:bg-[#3e3e42]/50 transition-colors focus:outline-none ${\r\n                      selectedProject?.id === project.id ? 'bg-[#007acc]/20 border-[#007acc]' : ''\r\n                    }`}\r\n                    tabIndex={0}\r\n                  >\r\n                    {/* Client */}\r\n                    <div className=\"col-span-2 text-[#969696] text-xs\">\r\n                      {project.client || 'No Client'}\r\n                    </div>\r\n                    \r\n                    {/* Project Name & Number */}\r\n                    <div className=\"col-span-3\">\r\n                      <div className=\"text-[#cccccc] font-medium leading-tight\">{project.name}</div>\r\n                      <div className=\"text-[#969696] text-xs leading-tight\">{project.projectNumber || 'No Number'}</div>\r\n                    </div>\r\n                    \r\n                    {/* Type (using status for now) */}\r\n                    <div className=\"col-span-1 text-[#969696] text-xs\">\r\n                      {formatStatus(project.status || '')}\r\n                    </div>\r\n                    \r\n                    {/* Status */}\r\n                    <div className=\"col-span-2\">\r\n                      <span className={`${getStatusColor(project.status || '')} px-2 py-0.5 rounded text-xs`}>\r\n                        {formatStatus(project.status || '')}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    {/* Next Deliverable */}\r\n                    <div className=\"col-span-4\">\r\n                      {(() => {\r\n                        const nextDeliverable = project.id ? getNextDeliverable(project.id) : null;\r\n                        return nextDeliverable ? (\r\n                          <div className=\"text-[#cccccc] text-xs leading-tight\">\r\n                            {formatNextDeliverable(nextDeliverable)}\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"text-[#969696] text-xs\">-</div>\r\n                        );\r\n                      })()}\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Right Panel - Project Details */}\r\n        <div className=\"w-1/2 flex flex-col bg-[#2d2d30] min-w-0\">\r\n          {selectedProject ? (\r\n            <>\r\n              {/* Project Header */}\r\n              <div className=\"p-4 border-b border-[#3e3e42]\">\r\n                <div className=\"flex justify-between items-start mb-3\">\r\n                  <div>\r\n                    <h2 className=\"text-xl font-bold text-[#cccccc] mb-2\">\r\n                      {selectedProject.name}\r\n                    </h2>\r\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                      <div>\r\n                        <div className=\"text-[#969696] text-xs\">Client:</div>\r\n                        <div className=\"text-[#cccccc]\">{selectedProject.client || 'No Client'}</div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"text-[#969696] text-xs\">Status:</div>\r\n                        <div className=\"relative status-dropdown-container\">\r\n                          <button\r\n                            onClick={() => setStatusDropdownOpen(!statusDropdownOpen)}\r\n                            className={`${getStatusColor(selectedProject.status || '')} hover:bg-[#3e3e42]/50 px-2 py-1 rounded text-sm transition-colors cursor-pointer flex items-center gap-1`}\r\n                          >\r\n                            {formatStatus(selectedProject.status || '')}\r\n                            <svg className=\"w-3 h-3\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                              <polyline points=\"6,9 12,15 18,9\"/>\r\n                            </svg>\r\n                          </button>\r\n                          \r\n                          {statusDropdownOpen && (\r\n                            <div className=\"absolute top-full left-0 mt-1 bg-[#2d2d30] border border-[#3e3e42] rounded shadow-lg z-50 min-w-[120px]\">\r\n                              {editableStatusOptions.map((status) => (\r\n                                <button\r\n                                  key={status}\r\n                                  onClick={() => handleStatusChange(status)}\r\n                                  className={`w-full text-left px-3 py-2 text-sm hover:bg-[#3e3e42] transition-colors first:rounded-t last:rounded-b ${\r\n                                    selectedProject.status === status ? 'bg-[#007acc]/20' : ''\r\n                                  } ${getStatusColor(status)}`}\r\n                                >\r\n                                  {formatStatus(status)}\r\n                                </button>\r\n                              ))}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"text-[#969696] text-xs\">Project Number:</div>\r\n                        <div className=\"text-[#cccccc]\">{selectedProject.projectNumber || 'No Number'}</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex gap-2\">\r\n                    <Link to={`/projects/${selectedProject.id}/edit`}>\r\n                      <button className=\"px-2 py-0.5 text-xs rounded border bg-[#3e3e42] border-[#3e3e42] text-[#cccccc] hover:bg-[#4e4e52] hover:text-[#cccccc] transition-colors\">\r\n                        Edit Project\r\n                      </button>\r\n                    </Link>\r\n                    <button \r\n                      onClick={() => selectedProject.id && handleDelete(selectedProject.id)}\r\n                      className=\"px-2 py-0.5 text-xs rounded border bg-transparent border-[#3e3e42] text-red-400 hover:bg-red-500/20 hover:border-red-500/50 transition-colors\"\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                {selectedProject.description && (\r\n                  <div className=\"mt-3 pt-3 border-t border-[#3e3e42]\">\r\n                    <div className=\"text-[#969696] text-xs mb-1\">Description:</div>\r\n                    <div className=\"text-[#cccccc] text-sm\">{selectedProject.description}</div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\r\n                {/* Assignments Section */}\r\n                <div className=\"pb-4 border-b border-[#3e3e42]\">\r\n                  <div className=\"flex justify-between items-center mb-2\">\r\n                    <h3 className=\"text-base font-semibold text-[#cccccc]\">\r\n                      Assignments\r\n                    </h3>\r\n                    <button \r\n                      onClick={handleAddAssignment}\r\n                      className=\"px-2 py-0.5 text-xs rounded border bg-[#3e3e42] border-[#3e3e42] text-[#cccccc] hover:bg-[#4e4e52] hover:text-[#cccccc] transition-colors\"\r\n                    >\r\n                      + Add Assignment\r\n                    </button>\r\n                  </div>\r\n\r\n                  {/* Assignments List */}\r\n                  <div className=\"space-y-2\">\r\n                    {assignments.length > 0 ? (\r\n                      assignments.map((assignment) => (\r\n                        <div key={assignment.id}>\r\n                          {editingAssignment === assignment.id ? (\r\n                            // Editing mode\r\n                            <div className=\"p-3 bg-[#3e3e42]/50 rounded border border-[#3e3e42]\">\r\n                              <div className=\"grid grid-cols-4 gap-4 items-center\">\r\n                                {/* Person Name (read-only) */}\r\n                                <div className=\"text-[#cccccc]\">{assignment.personName || 'Unknown'}</div>\r\n                                \r\n                                {/* Role Input with Autocomplete */}\r\n                                <div className=\"relative\">\r\n                                  <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Role on project...\"\r\n                                    value={editData.roleSearch}\r\n                                    onChange={(e) => handleRoleSearch(e.target.value)}\r\n                                    className=\"w-full px-2 py-1 text-xs bg-[#2d2d30] border border-[#3e3e42] rounded text-[#cccccc] placeholder-[#969696] focus:border-[#007acc] focus:outline-none\"\r\n                                    autoFocus\r\n                                  />\r\n                                  \r\n                                  {/* Role Search Results Dropdown */}\r\n                                  {roleSearchResults.length > 0 && (\r\n                                    <div className=\"absolute top-full left-0 right-0 mt-1 bg-[#2d2d30] border border-[#3e3e42] rounded shadow-lg z-50 max-h-32 overflow-y-auto\">\r\n                                      {roleSearchResults.map((role) => (\r\n                                        <button\r\n                                          key={role}\r\n                                          onClick={() => handleRoleSelect(role)}\r\n                                          className=\"w-full text-left px-2 py-1 text-xs hover:bg-[#3e3e42] transition-colors text-[#cccccc] border-b border-[#3e3e42] last:border-b-0\"\r\n                                        >\r\n                                          {role}\r\n                                        </button>\r\n                                      ))}\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n\r\n                                {/* Hours Input */}\r\n                                <div>\r\n                                  <input\r\n                                    type=\"number\"\r\n                                    min=\"0\"\r\n                                    max=\"80\"\r\n                                    step=\"0.5\"\r\n                                    placeholder=\"Hours\"\r\n                                    value={editData.currentWeekHours}\r\n                                    onChange={(e) => setEditData(prev => ({ ...prev, currentWeekHours: parseFloat(e.target.value) || 0 }))}\r\n                                    className=\"w-full px-2 py-1 text-xs bg-[#2d2d30] border border-[#3e3e42] rounded text-[#cccccc] placeholder-[#969696] focus:border-[#007acc] focus:outline-none [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none [-moz-appearance:textfield]\"\r\n                                  />\r\n                                </div>\r\n\r\n                                {/* Action Buttons */}\r\n                                <div className=\"flex gap-1\">\r\n                                  <button\r\n                                    onClick={() => assignment.id && handleSaveEdit(assignment.id)}\r\n                                    className=\"px-2 py-1 text-xs rounded border bg-[#007acc] border-[#007acc] text-white hover:bg-[#005fa3] transition-colors\"\r\n                                  >\r\n                                    Save\r\n                                  </button>\r\n                                  <button\r\n                                    onClick={handleCancelEdit}\r\n                                    className=\"px-2 py-1 text-xs rounded border bg-transparent border-[#3e3e42] text-[#969696] hover:text-[#cccccc] hover:bg-[#3e3e42] transition-colors\"\r\n                                  >\r\n                                    Cancel\r\n                                  </button>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          ) : (\r\n                            // Display mode\r\n                            <div className=\"flex justify-between items-center p-2 bg-[#3e3e42]/30 rounded\">\r\n                              <div className=\"flex-1\">\r\n                                <div className=\"grid grid-cols-3 gap-4\">\r\n                                  <div>\r\n                                    <div className=\"text-[#cccccc]\">{assignment.personName || 'Unknown'}</div>\r\n                                    {/* Person Skills (Read-only) */}\r\n                                    <div className=\"flex flex-wrap gap-1 mt-1\">\r\n                                      {assignment.personSkills?.filter(skill => skill.skillType === 'strength').slice(0, 3).map((skill, index) => (\r\n                                        <span key={index} className=\"px-2 py-0.5 rounded-full text-xs bg-emerald-500/20 text-emerald-400 border border-emerald-500/30\">\r\n                                          {skill.skillTagName}\r\n                                        </span>\r\n                                      ))}\r\n                                      {assignment.personSkills?.filter(skill => skill.skillType === 'strength').length === 0 && (\r\n                                        <span className=\"text-[#969696] text-xs\">No skills listed</span>\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"text-[#969696]\">{assignment.roleOnProject || 'Team Member'}</div>\r\n                                  <div className=\"text-[#969696]\">{getCurrentWeekHours(assignment)}h</div>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"flex gap-1\">\r\n                                <button \r\n                                  onClick={() => handleEditAssignment(assignment)}\r\n                                  className=\"text-xs px-1 py-0.5 rounded border bg-transparent border-transparent text-[#cccccc] hover:bg-[#3e3e42] hover:border-[#3e3e42] transition-colors\"\r\n                                >\r\n                                  Edit\r\n                                </button>\r\n                                <button \r\n                                  onClick={() => assignment.id && handleDeleteAssignment(assignment.id)}\r\n                                  className=\"text-xs px-1 py-0.5 rounded border bg-transparent border-transparent text-red-400 hover:bg-red-500/20 hover:border-red-500/30 transition-colors\"\r\n                                >\r\n                                  Delete\r\n                                </button>\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      ))\r\n                    ) : !showAddAssignment ? (\r\n                      <div className=\"text-center py-8\">\r\n                        <div className=\"text-[#969696] text-sm\">No assignments yet</div>\r\n                        <div className=\"text-[#969696] text-xs mt-1\">Click \"Add Assignment\" to get started</div>\r\n                      </div>\r\n                    ) : null}\r\n\r\n                    {/* Add Assignment Form */}\r\n                    {showAddAssignment && (\r\n                      <div className=\"p-3 bg-[#3e3e42]/50 rounded border border-[#3e3e42]\">\r\n                        <div className=\"grid grid-cols-3 gap-4 mb-3\">\r\n                          <div className=\"text-[#969696] text-xs uppercase font-medium\">PERSON</div>\r\n                          <div className=\"text-[#969696] text-xs uppercase font-medium\">ROLE</div>\r\n                          <div className=\"text-[#969696] text-xs uppercase font-medium\">ACTIONS</div>\r\n                        </div>\r\n                        \r\n                        <div className=\"grid grid-cols-3 gap-4 items-center\">\r\n                          {/* Person Search */}\r\n                          <div className=\"relative\">\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Start typing name or click to see all...\"\r\n                              value={newAssignment.personSearch}\r\n                              onChange={(e) => handlePersonSearch(e.target.value)}\r\n                              onFocus={() => performPersonSearch(newAssignment.personSearch)}\r\n                              onKeyDown={handlePersonSearchKeyDown}\r\n                              role=\"combobox\"\r\n                              aria-expanded={personSearchResults.length > 0}\r\n                              aria-haspopup=\"listbox\"\r\n                              aria-owns=\"person-search-results\"\r\n                              aria-describedby=\"person-search-help\"\r\n                              className=\"w-full px-2 py-1 text-xs bg-[#2d2d30] border border-[#3e3e42] rounded text-[#cccccc] placeholder-[#969696] focus:border-[#007acc] focus:outline-none\"\r\n                              autoFocus\r\n                            />\r\n                            \r\n                            {/* Screen reader help text */}\r\n                            <div id=\"person-search-help\" className=\"sr-only\">\r\n                              Search for people to assign to this project. Use arrow keys to navigate results.\r\n                            </div>\r\n                            \r\n                            {/* ARIA live region for search results announcement */}\r\n                            <div aria-live=\"polite\" aria-atomic=\"true\" className=\"sr-only\">\r\n                              {srAnnouncement}\r\n                            </div>\r\n                            \r\n                            {/* Search Results Dropdown */}\r\n                            {personSearchResults.length > 0 && (\r\n                              <div \r\n                                id=\"person-search-results\"\r\n                                role=\"listbox\"\r\n                                className=\"absolute top-full left-0 right-0 mt-1 bg-[#2d2d30] border border-[#3e3e42] rounded shadow-lg z-50 max-h-32 overflow-y-auto\"\r\n                              >\r\n                                {personSearchResults.map((person, index) => (\r\n                                  <button\r\n                                    key={person.id}\r\n                                    onClick={() => handlePersonSelect(person)}\r\n                                    className={`w-full text-left px-2 py-1 text-xs hover:bg-[#3e3e42] transition-colors text-[#cccccc] border-b border-[#3e3e42] last:border-b-0 ${\r\n                                      selectedPersonIndex === index ? 'bg-[#007acc]/30 border-[#007acc]' : ''\r\n                                    }`}\r\n                                  >\r\n                                    <div className=\"flex items-center justify-between\">\r\n                                      <div className=\"font-medium\">{person.name}</div>\r\n                                      {person.hasSkillMatch && (\r\n                                        <span className=\"text-xs px-1 py-0.5 rounded bg-blue-500/20 text-blue-400 border border-blue-500/30\">\r\n                                          🎯 Skill Match\r\n                                        </span>\r\n                                      )}\r\n                                    </div>\r\n                                    <div className=\"flex justify-between items-center\">\r\n                                      <div className=\"text-[#969696]\">{person.role}</div>\r\n                                      {person.availableHours !== undefined && (\r\n                                        <div className=\"flex items-center gap-2\">\r\n                                          <span className={`text-xs px-1 py-0.5 rounded ${\r\n                                            person.utilizationPercent! > 100 ? 'text-red-400 bg-red-500/20' :\r\n                                            person.utilizationPercent! > 85 ? 'text-amber-400 bg-amber-500/20' :\r\n                                            person.availableHours > 0 ? 'text-emerald-400 bg-emerald-500/20' :\r\n                                            'text-blue-400 bg-blue-500/20'\r\n                                          }`}>\r\n                                            {person.availableHours}h available\r\n                                          </span>\r\n                                          <span className=\"text-[#969696] text-xs\">\r\n                                            ({person.utilizationPercent}% used)\r\n                                          </span>\r\n                                        </div>\r\n                                      )}\r\n                                    </div>\r\n                                  </button>\r\n                                ))}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n\r\n                          {/* Role Input */}\r\n                          <div className=\"relative\">\r\n                            <input\r\n                              type=\"text\"\r\n                              placeholder=\"Role on project...\"\r\n                              value={newAssignment.roleSearch}\r\n                              onChange={(e) => handleNewAssignmentRoleSearch(e.target.value)}\r\n                              className=\"w-full px-2 py-1 text-xs bg-[#2d2d30] border border-[#3e3e42] rounded text-[#cccccc] placeholder-[#969696] focus:border-[#007acc] focus:outline-none\"\r\n                            />\r\n                            \r\n                            {/* Role Search Results Dropdown */}\r\n                            {roleSearchResults.length > 0 && (\r\n                              <div className=\"absolute top-full left-0 right-0 mt-1 bg-[#2d2d30] border border-[#3e3e42] rounded shadow-lg z-50 max-h-32 overflow-y-auto\">\r\n                                {roleSearchResults.map((role) => (\r\n                                  <button\r\n                                    key={role}\r\n                                    onClick={() => handleNewAssignmentRoleSelect(role)}\r\n                                    className=\"w-full text-left px-2 py-1 text-xs hover:bg-[#3e3e42] transition-colors text-[#cccccc] border-b border-[#3e3e42] last:border-b-0\"\r\n                                  >\r\n                                    {role}\r\n                                  </button>\r\n                                ))}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n\r\n                          {/* Action Buttons */}\r\n                          <div className=\"flex gap-1\">\r\n                            <button\r\n                              onClick={handleSaveAssignment}\r\n                              disabled={!newAssignment.selectedPerson}\r\n                              className=\"px-2 py-1 text-xs rounded border bg-[#007acc] border-[#007acc] text-white hover:bg-[#005fa3] disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                            >\r\n                              Save\r\n                            </button>\r\n                            <button\r\n                              onClick={handleCancelAddAssignment}\r\n                              className=\"px-2 py-1 text-xs rounded border bg-transparent border-[#3e3e42] text-[#969696] hover:text-[#cccccc] hover:bg-[#3e3e42] transition-colors\"\r\n                            >\r\n                              Cancel\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Deliverables Section - Lazy Loaded */}\r\n                <Suspense fallback={<DeliverablesSectionLoader />}>\r\n                  <DeliverablesSection project={selectedProject} />\r\n                </Suspense>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"flex-1 flex items-center justify-center\">\r\n              <div className=\"text-center text-[#969696]\">\r\n                <div className=\"text-lg mb-2\">Select a project</div>\r\n                <div className=\"text-sm\">Choose a project from the list to view details</div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectsList;","/**\r\n * Projects Page - List and manage projects (Chunk 5)\r\n */\r\n\r\nimport React from 'react';\r\nimport ProjectsList from './ProjectsList';\r\n\r\nconst Projects: React.FC = () => {\r\n  return <ProjectsList />;\r\n};\r\n\r\nexport default Projects;"],"file":"assets/index.zuY0xTfW.js"}