{"version":3,"file":"useDebounce.lmyEQsFZ.js","sources":["../../src/hooks/useDebounce.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\n/**\r\n * useDebounce Hook\r\n * \r\n * Delays the execution of a value update until after the specified delay period\r\n * has elapsed since the last time the debounced function was invoked.\r\n * \r\n * @template T - The type of the value to be debounced\r\n * @param {T} value - The value to debounce\r\n * @param {number} delay - The delay in milliseconds (default: 300ms)\r\n * @returns {T} The debounced value\r\n * \r\n * @example\r\n * const [searchTerm, setSearchTerm] = useState('');\r\n * const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n * \r\n * useEffect(() => {\r\n *   if (debouncedSearchTerm) {\r\n *     // Perform search operation\r\n *   }\r\n * }, [debouncedSearchTerm]);\r\n */\r\nexport function useDebounce<T>(value: T, delay: number = 300): T {\r\n  // State to hold the debounced value\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Set up a timer to update the debounced value after the delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Clean up the timer on value change or unmount\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]); // Re-run effect when value or delay changes\r\n\r\n  return debouncedValue;\r\n}"],"names":["useDebounce","value","delay","debouncedValue","setDebouncedValue","useState","useEffect","handler"],"mappings":"+CAuBO,SAASA,EAAeC,EAAUC,EAAgB,IAAQ,CAE/D,KAAM,CAACC,EAAgBC,CAAiB,EAAIC,EAAAA,SAAYJ,CAAK,EAE7DK,OAAAA,EAAAA,UAAU,IAAM,CAEd,MAAMC,EAAU,WAAW,IAAM,CAC/BH,EAAkBH,CAAK,CACzB,EAAGC,CAAK,EAGR,MAAO,IAAM,CACX,aAAaK,CAAO,CACtB,CACF,EAAG,CAACN,EAAOC,CAAK,CAAC,EAEVC,CACT"}