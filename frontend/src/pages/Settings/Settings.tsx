/** * Settings Page - Role management interface * Phase 2.2: Settings page with role management section */import React, { useState, useEffect } from 'react';import { useAuthenticatedEffect } from '@/hooks/useAuthenticatedEffect';import Button from '@/components/ui/Button';import Input from '@/components/ui/Input';import Loader from '@/components/ui/Loader';import { Role } from '@/types/models';import { rolesApi, peopleApi, authApi } from '@/services/api';import { resolveApiBase } from '@/utils/apiBase';import { getAccessToken } from '@/utils/auth';import Layout from '@/components/layout/Layout';import RoleList from './components/RoleList';import RoleForm from './components/RoleForm';import RoleDeleteConfirm from './components/RoleDeleteConfirm';import { useAuth } from '@/hooks/useAuth';import BackupManagement from '@/components/settings/BackupManagement';import RestoreManagement from '@/components/settings/RestoreManagement';import BackupOverview from '@/components/settings/BackupOverview';const Settings: React.FC = () => {  const auth = useAuth();  const [roles, setRoles] = useState<Role[]>([]);  const [loading, setLoading] = useState(true);  const [error, setError] = useState<string | null>(null);  // People options (for admin create-user linking)  const [peopleOptions, setPeopleOptions] = useState<Array<{ id: number; name: string }>>([]);  // Create user (admin)  const [newUsername, setNewUsername] = useState('');  const [newEmail, setNewEmail] = useState('');  const [newUserPassword, setNewUserPassword] = useState('');  const [newUserPersonId, setNewUserPersonId] = useState<number | ''>('');  const [createBusy, setCreateBusy] = useState(false);  const [createMsg, setCreateMsg] = useState<string | null>(null);  const [newUserRole, setNewUserRole] = useState<'admin' | 'manager' | 'user'>('user');  // Users list (admin)  const [users, setUsers] = useState<Array<{ id: number; username: string; email: string; role: 'admin'|'manager'|'user'; person: { id: number; name: string } | null }>>([]);  const [usersLoading, setUsersLoading] = useState(false);  const [usersMsg, setUsersMsg] = useState<string | null>(null);  // Pre-deliverable defaults (admin)  const [preDefaults, setPreDefaults] = useState<Array<{ typeId: number; typeName: string; defaultDaysBefore: number; isEnabledByDefault: boolean }>>([]);  const [preDefaultsLoading, setPreDefaultsLoading] = useState(false);  const [preDefaultsDirty, setPreDefaultsDirty] = useState(false);    // Role management state  const [editingRole, setEditingRole] = useState<Role | null>(null);  const [deletingRole, setDeletingRole] = useState<Role | null>(null);  const [showRoleForm, setShowRoleForm] = useState(false);  useAuthenticatedEffect(() => {    if (!auth.accessToken) return;    loadRoles();    // Load people options (for admin create-user linking)    (async () => {      try {        const list = await peopleApi.autocomplete('', 50);        setPeopleOptions(list.map(p => ({ id: p.id, name: p.name })));      } catch (e) {        // non-fatal      }    })();    // Load users for admin    (async () => {      if (!auth.user?.is_staff) return;      try {        setUsersLoading(true);        const data = await authApi.listUsers();        setUsers(data);      } catch (e) {        // ignore; shown only for admins      } finally {        setUsersLoading(false);      }    })();    // Load pre-deliverable defaults (admin)    (async () => {      if (!auth.user?.is_staff) return;      try {        setPreDefaultsLoading(true);        const base = resolveApiBase((import.meta as any)?.env?.VITE_API_URL as string | undefined);        const resp = await fetch(`${base}/core/pre-deliverable-global-settings/`, {          headers: { 'Authorization': `Bearer ${getAccessToken()}` }        });        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);        const data = await resp.json();        setPreDefaults(data || []);        setPreDefaultsDirty(false);      } catch (e) {        // non-fatal      } finally {        setPreDefaultsLoading(false);      }    })();  }, [auth.accessToken, auth.user?.is_staff]);  const loadRoles = async () => {    try {      setLoading(true);      setError(null);      const rolesList = await rolesApi.list();      setRoles(rolesList.results || []);    } catch (err: any) {      setError(`Failed to load roles: ${err.message}`);      console.error('Error loading roles:', err);    } finally {      setLoading(false);    }  };  const handleCreateRole = () => {    setEditingRole(null);    setShowRoleForm(true);  };  const handleEditRole = (role: Role) => {    setEditingRole(role);    setShowRoleForm(true);  };  const handleDeleteRole = (role: Role) => {    setDeletingRole(role);  };  const handleRoleFormClose = () => {    setShowRoleForm(false);    setEditingRole(null);  };  const handleRoleFormSave = () => {    setShowRoleForm(false);    setEditingRole(null);    loadRoles(); // Refresh the list  };  const handleDeleteConfirm = () => {    setDeletingRole(null);    loadRoles(); // Refresh the list  };  const handleDeleteCancel = () => {    setDeletingRole(null);  };  if (loading) {    return (      <Layout>        <div className="h-full min-h-0 p-6">          <div className="bg-[#2d2d30] border border-[#3e3e42] rounded-lg p-6">            <div className="py-10">              <div className="max-w-md mx-auto">                <Loader inline message="Loading settings..." />              </div>            </div>          </div>        </div>      </Layout>    );  }  return (    <Layout>      <div className="h-full min-h-0 p-6 overflow-y-auto">        <div className="max-w-6xl mx-auto">          <h1 className="text-2xl font-bold text-[#cccccc] mb-6">Settings</h1>          {/* (User Account section removed per feedback) */}                    {error && (            <div className="bg-red-500/20 border border-red-500/30 text-red-400 px-4 py-3 rounded mb-6">              {error}            </div>          )}          {/* Quick section navigation */}          <div className="mb-4 text-sm text-[#969696]">            Sections:            <a href="#role-management" className="ml-2 text-[#cccccc] hover:text-white">Role Management</a>            <span className="mx-2 text-[#3e3e42]">|</span>            <a href="#backup-restore" className="text-[#cccccc] hover:text-white">Backup &amp; Restore</a>            {auth.user?.is_staff && (<>              <span className="mx-2 text-[#3e3e42]">|</span>              <a href="#pre-deliverable-defaults" className="text-[#cccccc] hover:text-white">Pre-Deliverable Defaults</a>            </>)}          </div>          {/* Role Management Section */}          <div id="role-management" className="bg-[#2d2d30] border border-[#3e3e42] rounded-lg p-6">            <div className="flex items-center justify-between mb-6">              <div>                <h2 className="text-xl font-semibold text-[#cccccc] mb-1">Role Management</h2>                <p className="text-[#969696] text-sm">                  Manage job roles used throughout the system. Roles can be assigned to people and used for reporting.                </p>              </div>              <Button onClick={handleCreateRole}>                Add Role              </Button>            </div>            <RoleList              roles={roles}              onEditRole={handleEditRole}              onDeleteRole={handleDeleteRole}              loading={loading}            />          </div>          {/* Admin: Create New User */}          {auth.user?.is_staff && (            <div className="bg-[#2d2d30] border border-[#3e3e42] rounded-lg p-6 mt-6">              <h2 className="text-xl font-semibold text-[#cccccc] mb-4">Create User (Admin)</h2>              {createMsg && <div className="text-sm text-[#cccccc] mb-2">{createMsg}</div>}              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">                <div>                  <Input label="Username" autoComplete="username" value={newUsername} onChange={e => setNewUsername((e.target as HTMLInputElement).value)} />                </div>                <div>                  <Input label="Email (optional)" type="email" autoComplete="email" value={newEmail} onChange={e => setNewEmail((e.target as HTMLInputElement).value)} />                </div>                <div>                  <Input label="Initial Password" type="password" autoComplete="new-password" value={newUserPassword} onChange={e => setNewUserPassword((e.target as HTMLInputElement).value)} />                </div>                <div>                  <label className="block text-sm text-[#969696] mb-1">Role</label>                  <select className="w-full bg-[#1f1f1f] border border-[#3e3e42] text-[#cccccc] rounded px-3 py-2 min-h-[44px]" value={newUserRole} onChange={e => setNewUserRole(e.target.value as any)}>                    <option value="user">User</option>                    <option value="manager">Manager</option>                    <option value="admin">Admin</option>                  </select>                </div>                <div>                  <label className="block text-sm text-[#969696] mb-1">Link to Person (optional)</label>                  <select                    className="w-full bg-[#1f1f1f] border border-[#3e3e42] text-[#cccccc] rounded px-3 py-2 min-h-[44px]"                    value={newUserPersonId}                    onChange={(e) => setNewUserPersonId(e.target.value === '' ? '' : Number(e.target.value))}                  >                    <option value="">— None —</option>                    {peopleOptions.map(p => (                      <option key={p.id} value={p.id}>{p.name}</option>                    ))}                  </select>                </div>              </div>              <div className="mt-3">                <Button                  disabled={createBusy}                  onClick={async () => {                    setCreateMsg(null);                    if (!newUsername || !newUserPassword) {                      setCreateMsg('Username and initial password are required.');                      return;                    }                    setCreateBusy(true);                    try {                      await authApi.createUser({ username: newUsername.trim(), email: newEmail.trim(), password: newUserPassword, personId: newUserPersonId === '' ? null : Number(newUserPersonId), role: newUserRole });                      setCreateMsg('User created successfully.');                      setNewUsername(''); setNewEmail(''); setNewUserPassword(''); setNewUserPersonId('');                      setNewUserRole('user');                    } catch (err: any) {                      setCreateMsg(err?.data?.detail || err?.message || 'Failed to create user');                    } finally {                      setCreateBusy(false);                    }                  }}                >                  {createBusy ? 'Creating…' : 'Create User'}                </Button>              </div>            </div>          )}          {auth.user?.is_staff && (            <div className="bg-[#2d2d30] border border-[#3e3e42] rounded-lg p-6 mt-6">              <h2 className="text-xl font-semibold text-[#cccccc] mb-4">Users</h2>              {usersLoading ? (                <div className="text-[#cccccc]">Loading users…</div>              ) : (                <div>                  {usersMsg && <div className="text-sm text-[#cccccc] mb-2">{usersMsg}</div>}                  {/* Card list on small screens */}                  <div className="block sm:hidden space-y-3">                    {users.map(u => (                      <div                        key={u.id}                        className="rounded-lg border border-[#3e3e42] bg-[#252526] p-4"                      >                        <div className="flex items-start justify-between gap-3">                          <div>                            <div className="text-[#cccccc] font-medium text-base">{u.username}</div>                            <div className="text-[#969696] text-sm">{u.email || 'No email'}</div>                          </div>                          <span className="text-xs px-2 py-1 rounded bg-[#3e3e42] text-[#cccccc] capitalize">{u.role}</span>                        </div>                        <div className="mt-2 text-sm text-[#969696]">                          Linked Person: <span className="text-[#cccccc]">{u.person ? u.person.name : 'None'}</span>                        </div>                        <div className="mt-3">                          <button                            className="inline-flex items-center justify-center min-h-[44px] px-4 py-2 rounded-md text-sm text-red-400 hover:text-red-300 hover:bg-[#3e3e42] disabled:opacity-50"                            disabled={u.id === auth.user?.id}                            onClick={async () => {                              setUsersMsg(null);                              if (!confirm(`Delete user ${u.username}? This cannot be undone.`)) return;                              try {                                await authApi.deleteUser(u.id);                                setUsers(prev => prev.filter(x => x.id !== u.id));                                setUsersMsg('User deleted.');                              } catch (err: any) {                                setUsersMsg(err?.data?.detail || err?.message || 'Failed to delete user');                              }                            }}                            aria-disabled={u.id === auth.user?.id}                            aria-label={`Delete user ${u.username}`}                          >                            Delete                          </button>                        </div>                      </div>                    ))}                  </div>                  {/* Table on sm and up */}                  <div className="hidden sm:block overflow-auto">                    <table className="min-w-full text-sm text-left">                      <thead className="text-[#969696]">                        <tr>                          <th className="py-2 pr-4">Username</th>                          <th className="py-2 pr-4">Email</th>                          <th className="py-2 pr-4">Role</th>                          <th className="py-2 pr-4">Linked Person</th>                          <th className="py-2 pr-4">Actions</th>                        </tr>                      </thead>                      <tbody className="text-[#cccccc]">                        {users.map(u => (                          <tr key={u.id} className="border-t border-[#3e3e42]">                            <td className="py-2 pr-4">{u.username}</td>                            <td className="py-2 pr-4">{u.email}</td>                            <td className="py-2 pr-4 capitalize">{u.role}</td>                            <td className="py-2 pr-4">{u.person ? u.person.name : '—'}</td>                            <td className="py-2 pr-4">                              <button                                className="text-red-400 hover:text-red-300 disabled:opacity-50"                                disabled={u.id === auth.user?.id}                                onClick={async () => {                                  setUsersMsg(null);                                  if (!confirm(`Delete user ${u.username}? This cannot be undone.`)) return;                                  try {                                    await authApi.deleteUser(u.id);                                    setUsers(prev => prev.filter(x => x.id !== u.id));                                    setUsersMsg('User deleted.');                                  } catch (err: any) {                                    setUsersMsg(err?.data?.detail || err?.message || 'Failed to delete user');                                  }                                }}                              >                                Delete                              </button>                            </td>                          </tr>                        ))}                      </tbody>                    </table>                  </div>                </div>              )}            </div>          )}          {/* Admin: Pre-Deliverable Defaults */}          {auth.user?.is_staff && (            <div id="pre-deliverable-defaults" className="bg-[#2d2d30] border border-[#3e3e42] rounded-lg p-6 mt-6">              <div className="flex items-center justify-between mb-4">                <div>                  <h2 className="text-xl font-semibold text-[#cccccc] mb-1">Pre-Deliverable Defaults</h2>                  <p className="text-sm text-[#969696]">Configure default timing for auto-generated pre-deliverable items.</p>                </div>                <Button                  disabled={!preDefaultsDirty || preDefaultsLoading}                  onClick={async () => {                    const base = resolveApiBase((import.meta as any)?.env?.VITE_API_URL as string | undefined);                    const resp = await fetch(`${base}/core/pre-deliverable-global-settings/`, {                      method: 'PUT',                      headers: {                        'Authorization': `Bearer ${getAccessToken()}`,                        'Content-Type': 'application/json',                      },                      body: JSON.stringify({ settings: preDefaults.map(d => ({ typeId: d.typeId, defaultDaysBefore: d.defaultDaysBefore, isEnabledByDefault: d.isEnabledByDefault })) })                    });                    if (!resp.ok) {                      alert(`Failed to save (HTTP ${resp.status})`);                      return;                    }                    const data = await resp.json();                    setPreDefaults(data || []);                    setPreDefaultsDirty(false);                  }}                >Save</Button>              </div>              {preDefaultsLoading ? (                <div className="text-[#cccccc]">Loading defaults…</div>              ) : (                <div className="overflow-x-auto">                  <table className="min-w-full text-sm">                    <thead className="text-[#cbd5e1]">                      <tr>                        <th className="py-2 pr-4 text-left">Type</th>                        <th className="py-2 pr-4 text-left">Days Before</th>                        <th className="py-2 pr-4 text-left">Enabled</th>                      </tr>                    </thead>                    <tbody className="text-[#e5e7eb]">                      {preDefaults.map((row, idx) => (                        <tr className="border-t border-[#3e3e42]" key={row.typeId}>                          <td className="py-2 pr-4">{row.typeName}</td>                          <td className="py-2 pr-4">                            <input                              type="number"                              min={0}                              max={30}                              className="w-24 bg-[#1f1f1f] border border-[#3e3e42] text-[#cccccc] rounded px-2 py-1"                              value={row.defaultDaysBefore}                              onChange={e => {                                const v = Math.max(0, Math.min(30, Number((e.target as HTMLInputElement).value)));                                const next = [...preDefaults];                                next[idx] = { ...row, defaultDaysBefore: v };                                setPreDefaults(next);                                setPreDefaultsDirty(true);                              }}                            />                          </td>                          <td className="py-2 pr-4">                            <input                              type="checkbox"                              checked={!!row.isEnabledByDefault}                              onChange={e => {                                const next = [...preDefaults];                                next[idx] = { ...row, isEnabledByDefault: (e.target as HTMLInputElement).checked };                                setPreDefaults(next);                                setPreDefaultsDirty(true);                              }}                            />                          </td>                        </tr>                      ))}                    </tbody>                  </table>                </div>              )}            </div>          )}          {/* Admin-only: Backup & Restore Section */}          {auth.user?.is_staff && (            <div id="backup-restore" className="bg-[#2d2d30] border border-[#3e3e42] rounded-lg p-6 mt-6">              <div className="mb-6">                <h2 className="text-xl font-semibold text-[#cccccc] mb-1">Backup &amp; Restore</h2>                <p className="text-[#969696] text-sm">                  Create and download database backups, and restore from existing or uploaded backups. Restoring will overwrite all current data.                </p>              </div>              <div className="grid grid-cols-1 gap-6">                <BackupOverview />                <BackupManagement />                <RestoreManagement />              </div>            </div>          )}        </div>        {/* Role Form Modal */}        {showRoleForm && (          <RoleForm            role={editingRole}            onSave={handleRoleFormSave}            onCancel={handleRoleFormClose}          />        )}        {/* Delete Confirmation Modal */}        {deletingRole && (          <RoleDeleteConfirm            role={deletingRole}            onConfirm={handleDeleteConfirm}            onCancel={handleDeleteCancel}          />        )}      </div>    </Layout>  );};export default Settings;