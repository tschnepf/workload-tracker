/**
 * Assignment Grid - Real implementation of the spreadsheet-like assignment interface
 * Replaces the form-based AssignmentForm with a modern grid view
 */

import React, { useState, useEffect } from 'react';
import { Assignment, Person } from '@/types/models';
import { assignmentsApi, peopleApi } from '@/services/api';
import Navigation from '@/components/layout/Navigation';

interface WeeklyHours {
  [weekKey: string]: number;
}

// Get next 12 Monday dates
const getNext12Mondays = (): { date: string, display: string, fullDisplay: string }[] => {
  const today = new Date();
  const currentMonday = new Date(today);
  // Get this Monday (or today if it's Monday)
  const daysFromMonday = (today.getDay() + 6) % 7; // Convert Sunday=0 to Sunday=6
  currentMonday.setDate(today.getDate() - daysFromMonday);
  
  const mondays: { date: string, display: string, fullDisplay: string }[] = [];
  for (let i = 0; i < 12; i++) {
    const monday = new Date(currentMonday);
    monday.setDate(currentMonday.getDate() + (i * 7));
    
    const sunday = new Date(monday);
    sunday.setDate(monday.getDate() + 6);
    
    mondays.push({
      date: monday.toISOString().split('T')[0],
      display: `${monday.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`,
      fullDisplay: `${monday.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${sunday.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`
    });
  }
  return mondays;
};

// Helper function to format week display
const formatWeekDisplay = (weekKey: string): string => {
  const date = new Date(weekKey + 'T00:00:00');
  const endDate = new Date(date);
  endDate.setDate(date.getDate() + 6);
  
  const options: Intl.DateTimeFormatOptions = { month: 'short', day: 'numeric' };
  return `${date.toLocaleDateString('en-US', options)} - ${endDate.toLocaleDateString('en-US', options)}`;
};

interface PersonWithAssignments extends Person {
  assignments: Assignment[];
  isExpanded: boolean;
}

const AssignmentGrid: React.FC = () => {
  const [people, setPeople] = useState<PersonWithAssignments[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [editingCell, setEditingCell] = useState<{ personId: number, assignmentId: number, week: string } | null>(null);
  const [selectedCell, setSelectedCell] = useState<{ personId: number, assignmentId: number, week: string } | null>(null);
  const [selectedCells, setSelectedCells] = useState<{ personId: number, assignmentId: number, week: string }[]>([]);
  const [selectionStart, setSelectionStart] = useState<{ personId: number, assignmentId: number, week: string } | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [editingValue, setEditingValue] = useState<string>('');
  const [isAddingAssignment, setIsAddingAssignment] = useState<number | null>(null);
  const [newProjectName, setNewProjectName] = useState<string>('');
  const weeks = getNext12Mondays();

  // Load data on mount
  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Load people and assignments in parallel
      const [peopleResponse, assignmentsResponse] = await Promise.all([
        peopleApi.list(),
        assignmentsApi.list()
      ]);
      
      const peopleData = peopleResponse.results || [];
      const assignmentsData = assignmentsResponse.results || [];
      
      // Group assignments by person
      const peopleWithAssignments: PersonWithAssignments[] = peopleData.map(person => ({
        ...person,
        assignments: assignmentsData.filter(assignment => assignment.person === person.id),
        isExpanded: true // Start with all people expanded
      }));
      
      setPeople(peopleWithAssignments);
      
      // Auto-select first cell if available
      const firstPersonWithAssignments = peopleWithAssignments.find(p => p.assignments.length > 0);
      if (firstPersonWithAssignments && firstPersonWithAssignments.assignments.length > 0) {
        setSelectedCell({
          personId: firstPersonWithAssignments.id!,
          assignmentId: firstPersonWithAssignments.assignments[0].id!,
          week: weeks[0].date
        });
      }
      
    } catch (err: any) {
      setError('Failed to load assignment data: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  // Toggle person expansion
  const togglePersonExpanded = (personId: number) => {
    setPeople(prev => prev.map(person => 
      person.id === personId 
        ? { ...person, isExpanded: !person.isExpanded }
        : person
    ));
  };

  // Get person's total hours for a specific week
  const getPersonTotalHours = (person: PersonWithAssignments, week: string) => {
    return person.assignments.reduce((total, assignment) => 
      total + (assignment.weeklyHours[week] || 0), 0
    );
  };

  // Add new assignment
  const addAssignment = async (personId: number, projectName: string) => {
    try {
      const newAssignment = await assignmentsApi.create({
        person: personId,
        projectName: projectName.trim(),
        weeklyHours: {} // Start with empty hours
      });
      
      // Update local state
      setPeople(prev => prev.map(person => 
        person.id === personId 
          ? { ...person, assignments: [...person.assignments, newAssignment] }
          : person
      ));
      
      setIsAddingAssignment(null);
      setNewProjectName('');
      
    } catch (err: any) {
      console.error('Failed to create assignment:', err);
      alert('Failed to create assignment: ' + err.message);
    }
  };

  // Remove assignment
  const removeAssignment = async (assignmentId: number, personId: number) => {
    if (!confirm('Are you sure you want to remove this assignment?')) return;
    
    try {
      await assignmentsApi.delete(assignmentId);
      
      // Update local state
      setPeople(prev => prev.map(person => 
        person.id === personId 
          ? { ...person, assignments: person.assignments.filter(a => a.id !== assignmentId) }
          : person
      ));
      
      // Clear any selections for this assignment
      setSelectedCell(prev => prev?.assignmentId === assignmentId ? null : prev);
      setSelectedCells(prev => prev.filter(cell => cell.assignmentId !== assignmentId));
      
    } catch (err: any) {
      console.error('Failed to delete assignment:', err);
      alert('Failed to delete assignment: ' + err.message);
    }
  };

  // Get utilization badge styling
  const getUtilizationBadgeStyle = (hours: number, capacity: number) => {
    if (hours === 0) return 'bg-slate-600 text-slate-400';
    const percentage = (hours / capacity) * 100;
    if (percentage <= 70) return 'bg-emerald-500/20 text-emerald-300 border border-emerald-500/30';
    if (percentage <= 85) return 'bg-blue-500/20 text-blue-300 border border-blue-500/30';
    if (percentage <= 100) return 'bg-amber-500/20 text-amber-300 border border-amber-500/30';
    return 'bg-red-500/20 text-red-300 border border-red-500/30';
  };

  // Get hour cell styling
  const getHourCellStyle = (hours: number, capacity: number, isSelected: boolean = false, isMultiSelected: boolean = false) => {
    let baseStyle = '';
    if (hours === 0) baseStyle = 'text-slate-500 hover:text-slate-300';
    else {
      const percentage = (hours / capacity) * 100;
      baseStyle = percentage <= 100 ? 'text-slate-200 font-medium' : 'text-red-400 font-medium';
    }
    
    if (isMultiSelected) {
      baseStyle += ' ring-2 ring-purple-400 bg-purple-500/30';
    } else if (isSelected) {
      baseStyle += ' ring-2 ring-blue-400 bg-blue-500/20';
    }
    
    return baseStyle;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-slate-900">
        <Navigation />
        <div className="flex items-center justify-center h-64">
          <div className="text-slate-400">Loading assignments...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-slate-900">
        <Navigation />
        <div className="flex items-center justify-center h-64">
          <div className="text-red-400">{error}</div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-900">
      <Navigation />
      <div className="px-4 sm:px-6 lg:px-8 py-8 space-y-4">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-slate-50">Assignment Grid</h1>
            <p className="text-slate-400 text-sm">Manage team workload allocation across 12 weeks</p>
          </div>
          <div className="text-xs text-slate-400">
            {people.length} people â€¢ {people.reduce((total, p) => total + p.assignments.length, 0)} assignments
          </div>
        </div>

        {/* Grid Container */}
        <div className="bg-slate-900 border border-slate-700 rounded-lg overflow-x-auto">
          <div className="min-w-[1400px]">
              
              {/* Sticky Header */}
              <div className="sticky top-0 bg-slate-800 border-b border-slate-600 z-10">
                <div className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-2">
                  <div className="font-medium text-slate-200 text-sm px-2 py-1">Team Member</div>
                  {weeks.map((week, index) => (
                    <div key={week.date} className="text-center px-1">
                      <div className="text-xs font-medium text-slate-200">{week.display}</div>
                      <div className="text-[10px] text-slate-500">W{index + 1}</div>
                    </div>
                  ))}
                  <div className="text-center text-xs text-slate-400 px-2">Actions</div>
                </div>
              </div>

              {/* Data Rows */}
              <div>
                {people.map((person) => (
                  <div key={person.id} className="border-b border-slate-700 last:border-b-0">
                    
                    {/* Person Row */}
                    <div className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-2 hover:bg-slate-800/50 transition-colors">
                      
                      {/* Person Info */}
                      <div className="flex items-center gap-2 pl-3 pr-2 py-1">
                        <button
                          onClick={() => togglePersonExpanded(person.id!)}
                          className="flex-shrink-0 w-5 h-5 flex items-center justify-center hover:bg-slate-600 rounded text-slate-400 hover:text-slate-200 transition-all duration-200"
                        >
                          <svg 
                            width="12" 
                            height="12" 
                            viewBox="0 0 12 12" 
                            className={`transition-transform duration-200 ${person.isExpanded ? 'rotate-90' : 'rotate-0'}`}
                          >
                            <path 
                              d="M4 2 L8 6 L4 10" 
                              fill="none" 
                              stroke="currentColor" 
                              strokeWidth="1.5" 
                              strokeLinecap="round" 
                              strokeLinejoin="round"
                            />
                          </svg>
                        </button>
                        <div className="min-w-0 flex-1">
                          <div className="font-medium text-slate-50 text-sm truncate">{person.name}</div>
                          <div className="text-xs text-slate-400">{person.role} â€¢ {person.weeklyCapacity}h/wk</div>
                        </div>
                      </div>

                      {/* Person's Weekly Totals */}
                      {weeks.map((week) => {
                        const totalHours = getPersonTotalHours(person, week.date);
                        
                        return (
                          <div key={week.date} className="flex items-center justify-center px-1">
                            <div className={`px-2 py-1 rounded-full text-xs font-medium min-w-[40px] text-center ${getUtilizationBadgeStyle(totalHours, person.weeklyCapacity!)}`}>
                              {totalHours > 0 ? `${totalHours}h` : 'â€”'}
                            </div>
                          </div>
                        );
                      })}

                      {/* Add Assignment Button */}
                      <div className="flex items-center justify-center">
                        <button 
                          className="w-7 h-7 rounded bg-blue-600 hover:bg-blue-500 text-white text-xs font-medium transition-colors flex items-center justify-center"
                          title="Add new assignment"
                          onClick={() => {
                            setIsAddingAssignment(person.id!);
                            setNewProjectName('');
                          }}
                        >
                          +
                        </button>
                      </div>
                    </div>

                    {/* Assignment Rows */}
                    {person.isExpanded && person.assignments.map((assignment) => (
                      <div key={assignment.id} className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-1 bg-slate-850 hover:bg-slate-800 transition-colors">
                        
                        {/* Assignment Name */}
                        <div className="flex items-center py-1 pl-[60px] pr-2">
                          <div className="min-w-0 flex-1">
                            <div className="text-slate-300 text-xs truncate">{assignment.projectName}</div>
                          </div>
                        </div>

                        {/* Hour Cells - Coming Soon */}
                        {weeks.map((week) => (
                          <div key={week.date} className="flex items-center justify-center px-1">
                            <div className="w-12 h-6 text-xs rounded flex items-center justify-center text-slate-500">
                              {assignment.weeklyHours?.[week.date] || 'â€”'}
                            </div>
                          </div>
                        ))}

                        {/* Remove Assignment Button */}
                        <div className="flex items-center justify-center">
                          <button 
                            className="w-6 h-6 rounded text-slate-500 hover:text-red-400 hover:bg-red-500/10 transition-colors flex items-center justify-center text-xs"
                            title="Remove assignment"
                            onClick={() => removeAssignment(assignment.id!, person.id!)}
                          >
                            Ã—
                          </button>
                        </div>
                      </div>
                    ))}

                    {/* Add Assignment Form */}
                    {person.isExpanded && isAddingAssignment === person.id && (
                      <div className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-1 bg-slate-800 border border-blue-500/30">
                        <div className="flex items-center py-1 pl-[60px] pr-2">
                          <input
                            type="text"
                            value={newProjectName}
                            onChange={(e) => setNewProjectName(e.target.value)}
                            onKeyDown={(e) => {
                              if (e.key === 'Enter' && newProjectName.trim()) {
                                addAssignment(person.id!, newProjectName);
                              } else if (e.key === 'Escape') {
                                setIsAddingAssignment(null);
                                setNewProjectName('');
                              }
                            }}
                            placeholder="Project name..."
                            className="w-full px-2 py-1 text-xs bg-slate-700 border border-slate-600 rounded text-slate-200 placeholder-slate-400 focus:border-blue-500 focus:outline-none"
                            autoFocus
                          />
                        </div>
                        {weeks.map((week) => (
                          <div key={week.date} className="flex items-center justify-center">
                            <div className="w-12 h-6 flex items-center justify-center text-slate-600 text-xs">â€”</div>
                          </div>
                        ))}
                        <div className="flex items-center justify-center gap-1">
                          <button 
                            className="w-5 h-5 rounded bg-green-600 hover:bg-green-500 text-white text-xs font-medium transition-colors flex items-center justify-center"
                            title="Save assignment"
                            onClick={() => newProjectName.trim() && addAssignment(person.id!, newProjectName)}
                            disabled={!newProjectName.trim()}
                          >
                            âœ“
                          </button>
                          <button 
                            className="w-5 h-5 rounded bg-slate-600 hover:bg-slate-500 text-white text-xs font-medium transition-colors flex items-center justify-center"
                            title="Cancel"
                            onClick={() => {
                              setIsAddingAssignment(null);
                              setNewProjectName('');
                            }}
                          >
                            âœ•
                          </button>
                        </div>
                      </div>
                    )}

                    {/* Empty State */}
                    {person.isExpanded && person.assignments.length === 0 && (
                      <div className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-1 bg-slate-850">
                        <div className="flex items-center py-1 pl-[60px] pr-2">
                          <div className="text-slate-500 text-xs italic">
                            No assignments
                          </div>
                        </div>
                        {weeks.map((week) => (
                          <div key={week.date} className="flex items-center justify-center">
                            <div className="w-12 h-6 flex items-center justify-center text-slate-600 text-xs">â€”</div>
                          </div>
                        ))}
                        <div></div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Status Bar */}
        <div className="flex justify-between items-center text-xs text-slate-400 px-1">
          <div className="flex gap-6">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 rounded-full bg-emerald-500"></div>
              <span>Available (â‰¤70%)</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 rounded-full bg-blue-500"></div>
              <span>Busy (71-85%)</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 rounded-full bg-amber-500"></div>
              <span>Full (86-100%)</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 rounded-full bg-red-500"></div>
              <span>Overallocated (&gt;100%)</span>
            </div>
          </div>
          <div>Real assignment grid - Full functionality coming next</div>
        </div>
      </div>
    </div>
  );
};

export default AssignmentGrid;