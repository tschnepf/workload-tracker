  return (
    <div className="min-h-screen bg-slate-900">
      <Navigation />
      <div className="px-4 sm:px-6 lg:px-8 py-8 space-y-4">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-slate-50">Assignment Grid</h1>
            <p className="text-slate-400 text-sm">Manage team workload allocation across 12 weeks</p>
          </div>
          <div className="text-xs text-slate-400">
            {people.length} people • {people.reduce((total, p) => total + p.assignments.length, 0)} assignments
          </div>
        </div>

        {/* Grid Container */}
        <div className="bg-slate-900 border border-slate-700 rounded-lg overflow-x-auto">
          <div className="min-w-[1400px]">
              
              {/* Sticky Header */}
              <div className="sticky top-0 bg-slate-800 border-b border-slate-600 z-10">
                <div className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-2">
                  <div className="font-medium text-slate-200 text-sm px-2 py-1">Team Member</div>
                  {weeks.map((week, index) => (
                    <div key={week.date} className="text-center px-1">
                      <div className="text-xs font-medium text-slate-200">{week.display}</div>
                      <div className="text-[10px] text-slate-500">W{index + 1}</div>
                    </div>
                  ))}
                  <div className="text-center text-xs text-slate-400 px-2">Actions</div>
                </div>
              </div>

              {/* Data Rows */}
              <div>
                {people.map((person) => (
                  <div key={person.id} className="border-b border-slate-700 last:border-b-0">
                    
                    {/* Person Row */}
                    <div className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-2 hover:bg-slate-800/50 transition-colors">
                      
                      {/* Person Info */}
                      <div className="flex items-center gap-2 pl-3 pr-2 py-1">
                        <button
                          onClick={() => togglePersonExpanded(person.id!)}
                          className="flex-shrink-0 w-5 h-5 flex items-center justify-center hover:bg-slate-600 rounded text-slate-400 hover:text-slate-200 transition-all duration-200"
                        >
                          <svg 
                            width="12" 
                            height="12" 
                            viewBox="0 0 12 12" 
                            className={`transition-transform duration-200 ${person.isExpanded ? 'rotate-90' : 'rotate-0'}`}
                          >
                            <path 
                              d="M4 2 L8 6 L4 10" 
                              fill="none" 
                              stroke="currentColor" 
                              strokeWidth="1.5" 
                              strokeLinecap="round" 
                              strokeLinejoin="round"
                            />
                          </svg>
                        </button>
                        <div className="min-w-0 flex-1">
                          <div className="font-medium text-slate-50 text-sm truncate">{person.name}</div>
                          <div className="text-xs text-slate-400">{person.role} • {person.weeklyCapacity}h/wk</div>
                        </div>
                      </div>

                      {/* Person's Weekly Totals */}
                      {weeks.map((week) => {
                        const totalHours = getPersonTotalHours(person, week.date);
                        
                        return (
                          <div key={week.date} className="flex items-center justify-center px-1">
                            <div className={`px-2 py-1 rounded-full text-xs font-medium min-w-[40px] text-center ${getUtilizationBadgeStyle(totalHours, person.weeklyCapacity!)}`}>
                              {totalHours > 0 ? `${totalHours}h` : '—'}
                            </div>
                          </div>
                        );
                      })}

                      {/* Add Assignment Button */}
                      <div className="flex items-center justify-center">
                        <button 
                          className="w-7 h-7 rounded bg-blue-600 hover:bg-blue-500 text-white text-xs font-medium transition-colors flex items-center justify-center"
                          title="Add new assignment"
                          onClick={() => {
                            setIsAddingAssignment(person.id!);
                            setNewProjectName('');
                          }}
                        >
                          +
                        </button>
                      </div>
                    </div>

                    {/* Assignment Rows */}
                    {person.isExpanded && person.assignments.map((assignment) => (
                      <div key={assignment.id} className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-1 bg-slate-850 hover:bg-slate-800 transition-colors">
                        
                        {/* Assignment Name */}
                        <div className="flex items-center py-1 pl-[60px] pr-2">
                          <div className="min-w-0 flex-1">
                            <div className="text-slate-300 text-xs truncate">{assignment.projectName}</div>
                          </div>
                        </div>

                        {/* Hour Cells - Coming Soon */}
                        {weeks.map((week) => (
                          <div key={week.date} className="flex items-center justify-center px-1">
                            <div className="w-12 h-6 text-xs rounded flex items-center justify-center text-slate-500">
                              {assignment.weeklyHours?.[week.date] || '—'}
                            </div>
                          </div>
                        ))}

                        {/* Remove Assignment Button */}
                        <div className="flex items-center justify-center">
                          <button 
                            className="w-6 h-6 rounded text-slate-500 hover:text-red-400 hover:bg-red-500/10 transition-colors flex items-center justify-center text-xs"
                            title="Remove assignment"
                            onClick={() => removeAssignment(assignment.id!, person.id!)}
                          >
                            ×
                          </button>
                        </div>
                      </div>
                    ))}

                    {/* Add Assignment Form */}
                    {person.isExpanded && isAddingAssignment === person.id && (
                      <div className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-1 bg-slate-800 border border-blue-500/30">
                        <div className="flex items-center py-1 pl-[60px] pr-2">
                          <input
                            type="text"
                            value={newProjectName}
                            onChange={(e) => setNewProjectName(e.target.value)}
                            onKeyDown={(e) => {
                              if (e.key === 'Enter' && newProjectName.trim()) {
                                addAssignment(person.id!, newProjectName);
                              } else if (e.key === 'Escape') {
                                setIsAddingAssignment(null);
                                setNewProjectName('');
                              }
                            }}
                            placeholder="Project name..."
                            className="w-full px-2 py-1 text-xs bg-slate-700 border border-slate-600 rounded text-slate-200 placeholder-slate-400 focus:border-blue-500 focus:outline-none"
                            autoFocus
                          />
                        </div>
                        {weeks.map((week) => (
                          <div key={week.date} className="flex items-center justify-center">
                            <div className="w-12 h-6 flex items-center justify-center text-slate-600 text-xs">—</div>
                          </div>
                        ))}
                        <div className="flex items-center justify-center gap-1">
                          <button 
                            className="w-5 h-5 rounded bg-green-600 hover:bg-green-500 text-white text-xs font-medium transition-colors flex items-center justify-center"
                            title="Save assignment"
                            onClick={() => newProjectName.trim() && addAssignment(person.id!, newProjectName)}
                            disabled={!newProjectName.trim()}
                          >
                            ✓
                          </button>
                          <button 
                            className="w-5 h-5 rounded bg-slate-600 hover:bg-slate-500 text-white text-xs font-medium transition-colors flex items-center justify-center"
                            title="Cancel"
                            onClick={() => {
                              setIsAddingAssignment(null);
                              setNewProjectName('');
                            }}
                          >
                            ✕
                          </button>
                        </div>
                      </div>
                    )}

                    {/* Empty State */}
                    {person.isExpanded && person.assignments.length === 0 && (
                      <div className="grid grid-cols-[280px_repeat(12,70px)_80px] gap-px p-1 bg-slate-850">
                        <div className="flex items-center py-1 pl-[60px] pr-2">
                          <div className="text-slate-500 text-xs italic">
                            No assignments
                          </div>
                        </div>
                        {weeks.map((week) => (
                          <div key={week.date} className="flex items-center justify-center">
                            <div className="w-12 h-6 flex items-center justify-center text-slate-600 text-xs">—</div>
                          </div>
                        ))}
                        <div></div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Status Bar */}
        <div className="flex justify-between items-center text-xs text-slate-400 px-1">
          <div className="flex gap-6">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 rounded-full bg-emerald-500"></div>
              <span>Available (≤70%)</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 rounded-full bg-blue-500"></div>
              <span>Busy (71-85%)</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 rounded-full bg-amber-500"></div>
              <span>Full (86-100%)</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 rounded-full bg-red-500"></div>
              <span>Overallocated (&gt;100%)</span>
            </div>
          </div>
          <div>Real assignment grid - Full functionality coming next</div>
        </div>
      </div>
    </div>
  );
};

export default AssignmentGrid;