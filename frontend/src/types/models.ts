// Auto-generated TypeScript interfaces from Django models
// DO NOT EDIT MANUALLY - Generated by naming prevention system

export interface Person {
  id?: number;
  name: string;
  weeklyCapacity?: number;
  role?: string;
  email?: string;
  phone?: string;
  location?: string;
  hireDate?: string;
  notes?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Project {
  id?: number;
  name: string;
  status?: string;
  client?: string;
  description?: string;
  startDate?: string;
  endDate?: string;
  estimatedHours?: number;
  projectNumber?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Assignment {
  id?: number;
  person: number; // Person ID
  personName?: string; // Read-only person name
  personWeeklyCapacity?: number; // Read-only person capacity
  personSkills?: PersonSkill[]; // Read-only person skills for matching
  projectName?: string; // Legacy field - keep for migration compatibility
  project?: number; // Project ID (FK)
  projectDisplayName?: string; // Read-only project display name
  weeklyHours: { [weekKey: string]: number }; // Weekly hours allocation
  totalHours?: number; // Read-only calculated total
  averageWeeklyHours?: number; // Read-only calculated average
  allocationPercentage?: number; // Legacy field
  availableWeeks?: string[]; // Read-only list of available weeks
  roleOnProject?: string;
  requiredSkills?: string[]; // Required skills for this assignment (skill tag names)
  startDate?: string;
  endDate?: string;
  notes?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Department {
  id?: number;
  name: string;
  description?: string;
  manager?: number; // Person ID
  parentDepartment?: number; // Department ID
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Deliverable {
  id?: number;
  project: number; // Project ID (FK)
  percentage?: number | null; // 0-100, truly optional
  description?: string; // Brief description (SD, DD, IFP, IFC)
  date?: string | null; // YYYY-MM-DD format, can be removed for projects on hold
  notes?: string; // Additional details
  sortOrder?: number; // Manual ordering control
  isCompleted?: boolean; // Completion tracking
  completedDate?: string | null; // When actually completed (YYYY-MM-DD)
  createdAt?: string; // System timestamps
  updatedAt?: string;
}

export interface SkillTag {
  id?: number;
  name: string;
  category?: string;
  description?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface PersonSkill {
  id?: number;
  person: number; // Person ID
  skillTagId?: number; // For write operations
  skillTagName?: string; // Read-only skill tag name
  skillType: 'strength' | 'development' | 'learning';
  proficiencyLevel: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  notes?: string;
  lastUsed?: string | null;
  createdAt?: string;
  updatedAt?: string;
}

export interface PersonUtilization {
  person: string;
  weeklyCapacity: number;
  utilization: {
    total_percentage: number;
    allocated_hours: number;
    available_hours: number;
    is_overallocated: boolean;
    current_week: string;
    assignments: Array<{
      project_name: string;
      weekly_hours: number;
      allocation_percentage: number;
    }>;
  };
}

// API Response types
export interface ApiResponse<T> {
  data: T;
  message?: string;
  status: 'success' | 'error';
}

export interface PaginatedResponse<T> {
  results: T[];
  count: number;
  next?: string;
  previous?: string;
}

// Dashboard types
export interface DashboardData {
  summary: {
    total_people: number;
    avg_utilization: number;
    total_assignments: number;
    overallocated_count: number;
  };
  utilization_distribution: {
    underutilized: number;
    optimal: number;
    high: number;
    overallocated: number;
  };
  team_overview: Array<{
    id: number;
    name: string;
    role: string;
    utilization_percent: number;
    allocated_hours: number;
    capacity: number;
    is_overallocated: boolean;
  }>;
  available_people: Array<{
    id: number;
    name: string;
    available_hours: number;
    utilization_percent: number;
  }>;
  recent_assignments: Array<{
    person: string;
    project: string;
    created: string;
  }>;
}