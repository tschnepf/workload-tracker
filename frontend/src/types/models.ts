// Auto-generated TypeScript interfaces from Django models
// DO NOT EDIT MANUALLY - Generated by naming prevention system

export interface Person {
  id?: number;
  name: string;
  weeklyCapacity?: number;
  role?: string;
  email?: string;
  phone?: string;
  location?: string;
  hireDate?: string;
  notes?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Project {
  id?: number;
  name: string;
  status?: string;
  client?: string;
  description?: string;
  startDate?: string;
  endDate?: string;
  estimatedHours?: number;
  projectNumber?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Assignment {
  id?: number;
  person: number; // Person ID
  personName?: string; // Read-only person name
  personWeeklyCapacity?: number; // Read-only person capacity
  projectName: string;
  weeklyHours: { [weekKey: string]: number }; // Weekly hours allocation
  totalHours?: number; // Read-only calculated total
  averageWeeklyHours?: number; // Read-only calculated average
  allocationPercentage?: number; // Legacy field
  availableWeeks?: string[]; // Read-only list of available weeks
  roleOnProject?: string;
  startDate?: string;
  endDate?: string;
  notes?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Department {
  id?: number;
  name: string;
  description?: string;
  manager?: number; // Person ID
  parentDepartment?: number; // Department ID
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface PersonUtilization {
  person: string;
  weeklyCapacity: number;
  utilization: {
    total_percentage: number;
    allocated_hours: number;
    available_hours: number;
    is_overallocated: boolean;
    current_week: string;
    assignments: Array<{
      project_name: string;
      weekly_hours: number;
      allocation_percentage: number;
    }>;
  };
}

// API Response types
export interface ApiResponse<T> {
  data: T;
  message?: string;
  status: 'success' | 'error';
}

export interface PaginatedResponse<T> {
  results: T[];
  count: number;
  next?: string;
  previous?: string;
}