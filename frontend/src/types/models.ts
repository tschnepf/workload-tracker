// Auto-generated TypeScript interfaces from Django models
// DO NOT EDIT MANUALLY - Generated by naming prevention system

export interface Person {
  id?: number;
  name: string;
  weeklyCapacity?: number;
  department?: number | null; // Department ID (Phase 2)
  departmentName?: string; // Read-only department name (Phase 2)
  role?: number | null; // Role ID (ForeignKey)
  roleName?: string; // Read-only role name for display
  email?: string;
  phone?: string;
  location?: string;
  hireDate?: string;
  notes?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Role {
  id: number;
  name: string;
  description?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Project {
  id?: number;
  name: string;
  status?: string;
  client?: string;
  description?: string;
  startDate?: string;
  endDate?: string;
  estimatedHours?: number;
  projectNumber?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Assignment {
  id?: number;
  person: number; // Person ID
  personName?: string; // Read-only person name
  personWeeklyCapacity?: number; // Read-only person capacity
  personSkills?: PersonSkill[]; // Read-only person skills for display
  projectName?: string; // Legacy field - keep for migration compatibility
  project?: number; // Project ID (FK)
  projectDisplayName?: string; // Read-only project display name
  weeklyHours: { [weekKey: string]: number }; // Weekly hours allocation
  allocationPercentage?: number; // Legacy field
  availableWeeks?: string[]; // Read-only list of available weeks
  roleOnProject?: string;
  startDate?: string;
  endDate?: string;
  notes?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

/**
 * Lightweight assignment data for counting purposes only
 * Reduces memory footprint for assignment count tracking
 */
export interface AssignmentCountData {
  readonly id: number;
  readonly project: number | null;
  readonly isActive: boolean;
}

/**
 * Project assignment count tracking interface
 * Provides efficient lookup and statistics for assignment filtering
 */
export interface ProjectAssignmentCounts {
  readonly projectCounts: Map<number, number>;  // projectId -> assignment count
  readonly totalAssignments: number;
  readonly projectsWithNoAssignments: number;
  readonly lastUpdated: Date;
}

export interface Department {
  id?: number;
  name: string;
  parentDepartment?: number | null; // Department ID
  manager?: number | null; // Person ID
  managerName?: string; // Read-only manager name
  description?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Deliverable {
  id?: number;
  project: number; // Project ID (FK)
  percentage?: number | null; // 0-100, truly optional
  description?: string; // Brief description (SD, DD, IFP, IFC)
  date?: string | null; // YYYY-MM-DD format, can be removed for projects on hold
  notes?: string; // Additional details
  sortOrder?: number; // Manual ordering control
  isCompleted?: boolean; // Completion tracking
  completedDate?: string | null; // When actually completed (YYYY-MM-DD)
  createdAt?: string; // System timestamps
  updatedAt?: string;
}

export interface SkillTag {
  id?: number;
  name: string;
  category?: string;
  description?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface PersonSkill {
  id?: number;
  person: number; // Person ID
  skillTagId?: number; // For write operations
  skillTagName?: string; // Read-only skill tag name
  skillType: 'strength' | 'development' | 'learning';
  proficiencyLevel: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  notes?: string;
  lastUsed?: string | null;
  createdAt?: string;
  updatedAt?: string;
}

export interface PersonUtilization {
  person: string;
  weeklyCapacity: number;
  utilization: {
    total_percentage: number;
    allocated_hours: number;
    available_hours: number;
    is_overallocated: boolean;
    current_week: string;
    assignments: Array<{
      project_name: string;
      weekly_hours: number;
      allocation_percentage: number;
    }>;
  };
}

// Optimized assignment conflict check response interface
export interface AssignmentConflictResponse {
  hasConflict: boolean;
  warnings: string[];
  totalHours: number;
  totalWithProposed: number;
  personCapacity: number;
  availableHours: number;
  currentAssignments: Array<{
    projectName: string;
    hours: number;
    assignmentId: number;
  }>;
  projectBreakdown: Record<string, number>;
}

// API Response types
export interface ApiResponse<T> {
  data: T;
  message?: string;
  status: 'success' | 'error';
}

export interface PaginatedResponse<T> {
  results: T[];
  count: number;
  next?: string;
  previous?: string;
}

// Dashboard types
export interface DashboardData {
  summary: {
    total_people: number;
    avg_utilization: number;
    peak_utilization: number;
    peak_person: string;
    total_assignments: number;
    overallocated_count: number;
  };
  utilization_distribution: {
    underutilized: number;
    optimal: number;
    high: number;
    overallocated: number;
  };
  team_overview: Array<{
    id: number;
    name: string;
    role: string;
    utilization_percent: number;
    allocated_hours: number;
    capacity: number;
    is_overallocated: boolean;
    peak_utilization_percent: number;
    peak_week: string;
    is_peak_overallocated: boolean;
  }>;
  available_people: Array<{
    id: number;
    name: string;
    available_hours: number;
    utilization_percent: number;
  }>;
  recent_assignments: Array<{
    person: string;
    project: string;
    created: string;
  }>;
}

// DeliverableAssignment (link person to deliverable with weekly hours)
export interface DeliverableAssignment {
  id?: number;
  deliverable: number; // Deliverable ID
  person: number; // Person ID
  weeklyHours: { [weekKey: string]: number };
  roleOnMilestone?: string | null;
  isActive?: boolean;
  personName?: string; // Read-only
  projectId?: number; // Read-only (deliverable.project_id)
  createdAt?: string;
  updatedAt?: string;
}

// Milestone calendar item
export interface DeliverableCalendarItem {
  id: number;
  project: number;
  projectName: string | null;
  title: string;
  date: string | null; // YYYY-MM-DD
  isCompleted: boolean;
  assignmentCount: number;
}

// Deliverable staffing summary (derived from Assignment.weekly_hours)
export interface DeliverableStaffingSummaryItem {
  linkId: number | null;
  personId: number;
  personName: string;
  roleOnMilestone: string | null;
  totalHours: number;
  weekBreakdown: { [weekKey: string]: number };
}

// Capacity heatmap item
export interface PersonCapacityHeatmapItem {
  id: number;
  name: string;
  weeklyCapacity: number;
  department: string | null;
  weekKeys: string[];
  weekTotals: { [weekKey: string]: number };
  peak: { weekKey: string | null; percentage: number };
  averagePercentage: number;
}

// Team workload forecast item
export interface WorkloadForecastItem {
  weekStart: string; // YYYY-MM-DD (Monday)
  totalCapacity: number;
  totalAllocated: number;
  teamUtilization: number;
  peopleOverallocated: Array<{ id: number; name: string }>;
}

// Optimized Projects page filter metadata response
export interface ProjectFilterMetadataResponse {
  projectFilters: {
    [projectId: string]: {
      assignmentCount: number;
      hasFutureDeliverables: boolean;
      status: string;
    };
  };
}
