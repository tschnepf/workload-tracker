/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/assignments/": {
    /**
     * @description Get all assignments with person details and optional project
     * filtering.
     */
    get: operations["assignments_list"];
    /** @description Create assignment with validation */
    post: operations["assignments_create"];
  };
  "/api/assignments/{id}/": {
    /**
     * @description Assignment CRUD API with utilization tracking
     * Uses AutoMapped serializer for automatic snake_case -> camelCase conversion
     */
    get: operations["assignments_retrieve"];
    /**
     * @description Assignment CRUD API with utilization tracking
     * Uses AutoMapped serializer for automatic snake_case -> camelCase conversion
     */
    put: operations["assignments_update"];
    /**
     * @description Assignment CRUD API with utilization tracking
     * Uses AutoMapped serializer for automatic snake_case -> camelCase conversion
     */
    delete: operations["assignments_destroy"];
    /**
     * @description Assignment CRUD API with utilization tracking
     * Uses AutoMapped serializer for automatic snake_case -> camelCase conversion
     */
    patch: operations["assignments_partial_update"];
  };
  "/api/assignments/analytics_by_client/": {
    /**
     * @description Assigned hours aggregated by client for N weeks ahead.
     *
     * Response: { clients: [{ label: string, hours: number }] }
     */
    get: operations["assignments_analytics_by_client_retrieve"];
  };
  "/api/assignments/analytics_client_projects/": {
    /**
     * @description Assigned hours aggregated by project for a given client over N weeks ahead.
     *
     * Response: { projects: [{ id: number, name: string, hours: number }] }
     */
    get: operations["assignments_analytics_client_projects_retrieve"];
  };
  "/api/assignments/analytics_deliverable_timeline/": {
    /**
     * @description Assigned hours weekly timeline aggregated by deliverable phase for N weeks ahead.
     *
     * Uses shared classification (forward-select next deliverable, Monday exception, 'active_ca' override to 'ca' when no next deliverable). Controlled vocabulary: sd, dd, ifp, masterplan, bulletins, ca, other. 'extras' retained for compatibility and is typically empty.
     * Classification rules: explicit phase in description (SD/DD/IFP) wins; otherwise map by percentage: 0-39%→SD, 40-80%→DD, 81-100%→IFP; unknown→other.
     * Also groups any description containing 'Bulletin' or 'Addendum' into Bulletins/Addendums. Non-matching items are returned in 'extras' by label (desc or percent). No generic 'other' bucket is included in the series.
     * Response: { weekKeys: [..], series: { sd, dd, ifp, bulletins }, extras: [{label, values[]}], totalByWeek }
     */
    get: operations["assignments_analytics_deliverable_timeline_retrieve"];
  };
  "/api/assignments/analytics_status_timeline/": {
    /**
     * @description Assigned hours weekly timeline aggregated by project status for N weeks ahead.
     *
     * Categories reflect Project.status controlled vocabulary: 'active', 'active_ca', and 'other'.
     * Response: { weekKeys: [..], series: { active: number[], active_ca: number[], other: number[] }, totalByWeek: number[] }
     */
    get: operations["assignments_analytics_status_timeline_retrieve"];
  };
  "/api/assignments/bulk_update_hours/": {
    /** @description Bulk update weekly hours for multiple assignments in a single transaction. */
    patch: operations["assignments_bulk_update_hours_partial_update"];
  };
  "/api/assignments/by_person/": {
    /** @description Get assignments grouped by person */
    get: operations["assignments_by_person_retrieve"];
  };
  "/api/assignments/check_conflicts/": {
    /**
     * @description Check assignment conflicts for a person in a specific week.
     * Optimized to prevent N+1 queries by fetching all person assignments
     * in a single query.
     */
    post: operations["assignments_check_conflicts_create"];
  };
  "/api/assignments/experience_by_client/": {
    /**
     * @description Experience by Client: list people with totals and role aggregates in a date window.
     *
     * Params: client?, department?, include_children? (0|1), start?, end?, min_weeks?
     */
    get: operations["assignments_experience_by_client_retrieve"];
  };
  "/api/assignments/grid_snapshot/": {
    /**
     * @description Return compact pre-aggregated grid data for N weeks ahead (default 12).
     *
     * Response shape: { weekKeys: [YYYY-MM-DD], people: [{id, name, weeklyCapacity, department}], hoursByPerson: { <personId>: { <weekKey>: hours } } }
     */
    get: operations["assignments_grid_snapshot_retrieve"];
  };
  "/api/assignments/grid_snapshot_async/": {
    /** @description Start async grid snapshot job and return task ID for polling. */
    get: operations["assignments_grid_snapshot_async_retrieve"];
  };
  "/api/assignments/person_experience_profile/": {
    /** @description Person Experience Profile: breakdown by client and project with role/phase aggregates, plus eventsCount. */
    get: operations["assignments_person_experience_profile_retrieve"];
  };
  "/api/assignments/person_project_timeline/": {
    /** @description Person-Project timeline with coverage blocks, events, and derived role changes. */
    get: operations["assignments_person_project_timeline_retrieve"];
  };
  "/api/assignments/project_grid_snapshot/": {
    /**
     * @description Project-centric aggregate snapshot for N weeks ahead (default 12).
     *
     * Response shape: { weekKeys: [YYYY-MM-DD], projects: [{id,name,client,status}],
     * hoursByProject: { <projectId>: { <weekKey>: hours } },
     * deliverablesByProjectWeek: { <projectId>: { <weekKey>: count } },
     * hasFutureDeliverablesByProject: { <projectId>: boolean },
     * metrics: { projectsCount, peopleAssignedCount, totalHours } }
     */
    get: operations["assignments_project_grid_snapshot_retrieve"];
  };
  "/api/assignments/project_staffing_timeline/": {
    /** @description Project Staffing Timeline: aggregates per role and people lists with events. */
    get: operations["assignments_project_staffing_timeline_retrieve"];
  };
  "/api/assignments/project_totals/": {
    /** @description Return authoritative totals for specific projects over current horizon. */
    get: operations["assignments_project_totals_retrieve"];
  };
  "/api/assignments/rebalance_suggestions/": {
    /**
     * @description Suggest non-destructive rebalancing ideas across the next N weeks
     * (default 12).
     *
     *     Heuristic:
     *     - Overallocated: utilization > 100% (based on 1-week snapshot)
     *     - Underutilized: utilization < 70%
     *     - Pair over with under and propose shifting 4–8 hours
     *     Returns at most 20 suggestions.
     */
    get: operations["assignments_rebalance_suggestions_retrieve"];
  };
  "/api/assignments/run_weekly_snapshot/": {
    /**
     * @description Run weekly assignment snapshot writer or backfill for a given Sunday week.
     *
     * If 'week' is omitted, uses the current week's Sunday. Add 'backfill=1' to use the backfill service (optional 'emit_events' and 'force' flags). Returns summary.
     */
    post: operations["assignments_run_weekly_snapshot_create"];
  };
  "/api/auth/admin_audit/": {
    /** @description Read-only endpoint for recent admin audit logs (admin only). */
    get: operations["auth_admin_audit_list"];
  };
  "/api/auth/change_password/": {
    /** @description Change password for the authenticated user. */
    post: operations["auth_change_password_create"];
  };
  "/api/auth/create_user/": {
    /** @description Create a new user (staff only) and optionally link to a Person. */
    post: operations["auth_create_user_create"];
  };
  "/api/auth/invite/": {
    /**
     * @description Invite a user by email.
     *
     * - If the user exists, sends a password set/reset link.
     * - If not, creates an account with an unusable password and sends the link.
     * - Optionally assigns role and links to a Person.
     */
    post: operations["auth_invite_create"];
  };
  "/api/auth/link_person/": {
    /** @description Link or unlink the current user's profile to a Person. */
    post: operations["auth_link_person_create"];
  };
  "/api/auth/me/": {
    /** @description Return the current user's profile with settings and optional person link. */
    get: operations["auth_me_retrieve"];
  };
  "/api/auth/notification-preferences/": {
    get: operations["auth_notification_preferences_retrieve"];
    put: operations["auth_notification_preferences_update"];
  };
  "/api/auth/password_reset/": {
    /**
     * @description Request a password reset by email. Always returns 204.
     *
     * If a user with the email exists, sends a reset link with uid/token.
     */
    post: operations["auth_password_reset_create"];
  };
  "/api/auth/password_reset_confirm/": {
    /** @description Confirm password reset with uid/token and set a new password. */
    post: operations["auth_password_reset_confirm_create"];
  };
  "/api/auth/set_password/": {
    /** @description Set password for a target user (staff only). */
    post: operations["auth_set_password_create"];
  };
  "/api/auth/settings/": {
    /** @description Update settings for the current user's profile (partial). */
    patch: operations["auth_settings_partial_update"];
  };
  "/api/auth/users/": {
    /** @description List all users with role and linked person (admin only). */
    get: operations["auth_users_list"];
  };
  "/api/auth/users/{user_id}/": {
    /** @description Delete a user account (admin only). */
    delete: operations["auth_users_destroy"];
  };
  "/api/auth/users/{user_id}/link_person/": {
    /** @description Link or unlink a target user to a Person (admin only). */
    post: operations["auth_users_link_person_create"];
  };
  "/api/auth/users/{user_id}/role/": {
    /**
     * @description Set role for a target user (admin only).
     *
     * Accepts one of: {'role': 'admin' | 'manager' | 'user'}
     */
    post: operations["auth_users_role_create"];
  };
  "/api/backups/": {
    get: operations["backups_retrieve"];
    post: operations["backups_create"];
  };
  "/api/backups/{id}/": {
    delete: operations["backups_destroy"];
  };
  "/api/backups/{id}/download/": {
    get: operations["backups_download_retrieve"];
  };
  "/api/backups/{id}/restore/": {
    post: operations["backups_restore_create"];
  };
  "/api/backups/status/": {
    get: operations["backups_status_retrieve"];
  };
  "/api/backups/upload-restore/": {
    post: operations["backups_upload_restore_create"];
  };
  "/api/capabilities/": {
    /**
     * @description Advertise backend feature capabilities (requires authentication).
     *
     * Returns booleans and simple settings for aggregate endpoints, async jobs, and cache TTL hints.
     */
    get: operations["capabilities_retrieve"];
  };
  "/api/core/department_project_roles/": {
    get: operations["core_department_project_roles_retrieve"];
    post: operations["core_department_project_roles_create"];
  };
  "/api/core/department_project_roles/{department}/{role_id}/": {
    delete: operations["core_department_project_roles_destroy"];
  };
  "/api/core/department_project_roles/map/": {
    get: operations["core_department_project_roles_map_retrieve"];
  };
  "/api/core/pre-deliverable-global-settings/": {
    get: operations["core_pre_deliverable_global_settings_list"];
    put: operations["core_pre_deliverable_global_settings_update"];
  };
  "/api/core/project_roles/": {
    /**
     * @description List/add project roles for suggestions/settings.
     *
     * - GET: returns union of catalog roles and distinct existing assignment roles.
     * - POST: admin-only; adds a role to the catalog.
     */
    get: operations["core_project_roles_retrieve"];
    /**
     * @description List/add project roles for suggestions/settings.
     *
     * - GET: returns union of catalog roles and distinct existing assignment roles.
     * - POST: admin-only; adds a role to the catalog.
     */
    post: operations["core_project_roles_create"];
    /**
     * @description Remove a project role from the catalog and clear assignments using it.
     *
     * Behavior:
     * - Admin only.
     * - Accepts role name via query param (?name=...) or JSON body { name }.
     * - Clears `Assignment.role_on_project` wherever it matches (case-insensitive).
     * - If a catalog ProjectRole exists for that normalized name, it is deleted.
     * - DepartmentProjectRole mappings cascade-delete via FK on ProjectRole.
     */
    delete: operations["core_project_roles_destroy"];
  };
  "/api/core/utilization_scheme/": {
    /**
     * @description Singleton endpoint for utilization scheme.
     *
     * - GET: returns the current scheme with ETag/Last-Modified. Requires auth.
     * - PUT: admin-only, requires If-Match ETag; increments version on success.
     * - When feature flag is disabled: GET returns defaults; PUT returns 403.
     */
    get: operations["core_utilization_scheme_retrieve"];
    /**
     * @description Singleton endpoint for utilization scheme.
     *
     * - GET: returns the current scheme with ETag/Last-Modified. Requires auth.
     * - PUT: admin-only, requires If-Match ETag; increments version on success.
     * - When feature flag is disabled: GET returns defaults; PUT returns 403.
     */
    put: operations["core_utilization_scheme_update"];
  };
  "/api/dashboard/": {
    /** @description Team dashboard with utilization metrics and overview */
    get: operations["dashboard_retrieve"];
  };
  "/api/deliverables/": {
    /** @description Get deliverables with bulk loading support (Phase 2 optimization) */
    get: operations["deliverables_list"];
    /**
     * @description CRUD operations for deliverables
     * Supports filtering by project and manual reordering
     */
    post: operations["deliverables_create"];
  };
  "/api/deliverables/{id}/": {
    /**
     * @description CRUD operations for deliverables
     * Supports filtering by project and manual reordering
     */
    get: operations["deliverables_retrieve"];
    /**
     * @description CRUD operations for deliverables
     * Supports filtering by project and manual reordering
     */
    put: operations["deliverables_update"];
    /**
     * @description CRUD operations for deliverables
     * Supports filtering by project and manual reordering
     */
    delete: operations["deliverables_destroy"];
    /**
     * @description PATCH deliverable. If date changes and feature flag enabled, reallocate hours.
     *
     * Response includes optional 'reallocation' summary with keys:
     * { deltaWeeks, assignmentsChanged, touchedWeekKeys }
     */
    patch: operations["deliverables_partial_update"];
  };
  "/api/deliverables/{id}/staffing_summary/": {
    /**
     * @description Return derived staffing for a deliverable from Assignment.weekly_hours.
     *
     * Default window: 6 weeks prior OR between previous and current deliverable (exclusive→inclusive).
     * Optional override: ?weeks=6 to force a fixed lookback window.
     *
     * Returns array items per person with >0 hours in window on the deliverable's project:
     * { linkId|null, personId, personName, roleOnMilestone|null, totalHours, weekBreakdown }
     */
    get: operations["deliverables_staffing_summary_retrieve"];
  };
  "/api/deliverables/assignments/": {
    /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
    get: operations["deliverables_assignments_list"];
    /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
    post: operations["deliverables_assignments_create"];
  };
  "/api/deliverables/assignments/{id}/": {
    /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
    get: operations["deliverables_assignments_retrieve"];
    /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
    put: operations["deliverables_assignments_update"];
    /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
    delete: operations["deliverables_assignments_destroy"];
    /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
    patch: operations["deliverables_assignments_partial_update"];
  };
  "/api/deliverables/assignments/by_deliverable/": {
    /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
    get: operations["deliverables_assignments_by_deliverable_list"];
  };
  "/api/deliverables/assignments/by_person/": {
    /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
    get: operations["deliverables_assignments_by_person_list"];
  };
  "/api/deliverables/bulk/": {
    /**
     * @description Bulk fetch deliverables for multiple projects
     * GET /api/deliverables/bulk/?project_ids=1,2,3,4
     *
     * Returns: { "1": [...], "2": [...], "3": [...], "4": [...] }
     */
    get: operations["deliverables_bulk_retrieve"];
  };
  "/api/deliverables/calendar/": {
    /**
     * @description Read-only calendar endpoint returning deliverables within a date range
     * with assignmentCount. Missing params tolerated (returns all dated items).
     *
     * GET /api/deliverables/calendar?start=YYYY-MM-DD&end=YYYY-MM-DD
     */
    get: operations["deliverables_calendar_list"];
  };
  "/api/deliverables/calendar_with_pre_items/": {
    /**
     * @description Calendar view returning deliverables and pre-deliverable items.
     *
     * Semantics:
     * - When mine_only=true, scope results to the union of:
     *   (a) deliverables directly linked to the current user via DeliverableAssignment,
     *   (b) deliverables on projects where the current user has an active project-level Assignment.
     * - Duplicates are eliminated via a distinct ID subquery strategy; counts use distinct=True.
     * - Optional filters: start, end (dates) and type_id (pre-deliverable type).
     */
    get: operations["deliverables_calendar_with_pre_items_retrieve"];
  };
  "/api/deliverables/personal_pre_deliverables/": {
    /** @description Upcoming pre-deliverable items for the authenticated user (default 14 days). */
    get: operations["deliverables_personal_pre_deliverables_retrieve"];
  };
  "/api/deliverables/pre_deliverable_items/": {
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    get: operations["deliverables_pre_deliverable_items_list"];
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    post: operations["deliverables_pre_deliverable_items_create"];
  };
  "/api/deliverables/pre_deliverable_items/{id}/": {
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    get: operations["deliverables_pre_deliverable_items_retrieve"];
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    put: operations["deliverables_pre_deliverable_items_update"];
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    delete: operations["deliverables_pre_deliverable_items_destroy"];
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    patch: operations["deliverables_pre_deliverable_items_partial_update"];
  };
  "/api/deliverables/pre_deliverable_items/{id}/complete/": {
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    post: operations["deliverables_pre_deliverable_items_complete_create"];
  };
  "/api/deliverables/pre_deliverable_items/{id}/uncomplete/": {
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    post: operations["deliverables_pre_deliverable_items_uncomplete_create"];
  };
  "/api/deliverables/pre_deliverable_items/backfill/": {
    /**
     * @description Staff-only: backfill or regenerate pre-items for a project/date window.
     *
     * If ASYNC_JOBS is enabled and Celery task is available, enqueues background job and
     * returns 202 with job metadata. Otherwise, runs synchronously and returns a summary.
     */
    post: operations["deliverables_pre_deliverable_items_backfill_create"];
  };
  "/api/deliverables/pre_deliverable_items/bulk_complete/": {
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    post: operations["deliverables_pre_deliverable_items_bulk_complete_create"];
  };
  "/api/deliverables/reorder/": {
    /**
     * @description Manually reorder deliverables for a project
     * Expected payload: {
     *     "project": project_id,
     *     "deliverable_ids": [id1, id2, id3, ...]
     * }
     */
    post: operations["deliverables_reorder_create"];
  };
  "/api/departments/": {
    /** @description Get all departments with bulk loading support */
    get: operations["departments_list"];
    post: operations["departments_create"];
  };
  "/api/departments/{id}/": {
    get: operations["departments_retrieve"];
    put: operations["departments_update"];
    delete: operations["departments_destroy"];
    patch: operations["departments_partial_update"];
  };
  "/api/jobs/{job_id}/": {
    /**
     * @description Return status and metadata for a Celery job.
     *
     * Response fields:
     * - id: task id
     * - state: PENDING|STARTED|PROGRESS|SUCCESS|FAILURE
     * - progress: 0-100 if available
     * - message: optional status message
     * - downloadReady: bool
     * - downloadUrl: present when a file is available to download
     * - result: task result when not file-based (e.g., import summary)
     * - error: error message if failed
     */
    get: operations["jobs_retrieve"];
  };
  "/api/jobs/{job_id}/download/": {
    /** @description Stream the file produced by a completed job (if any). */
    get: operations["jobs_download_retrieve"];
  };
  "/api/people/": {
    /** @description Get all people with conditional request support (ETag/Last-Modified) and bulk loading */
    get: operations["people_list"];
    /**
     * @description Person CRUD API with utilization calculations
     * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
     */
    post: operations["people_create"];
  };
  "/api/people/{id}/": {
    /**
     * @description Person CRUD API with utilization calculations
     * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
     */
    get: operations["people_retrieve"];
    /**
     * @description Person CRUD API with utilization calculations
     * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
     */
    put: operations["people_update"];
    /**
     * @description Delete a person by primary key.
     *
     * Note: bypass get_queryset() filtering so deletes work even if the record
     * is inactive or excluded from the default list queryset.
     * Still enforces object-level permissions before deletion.
     */
    delete: operations["people_destroy"];
    /**
     * @description Person CRUD API with utilization calculations
     * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
     */
    patch: operations["people_partial_update"];
  };
  "/api/people/{id}/utilization/": {
    /** @description Get detailed utilization breakdown for a person - Chunk 3 */
    get: operations["people_utilization_retrieve"];
  };
  "/api/people/autocomplete/": {
    /**
     * @description Lightweight autocomplete for active people.
     *
     * Query params:
     * - search or q: optional substring of name
     * - limit: max results (default 20)
     */
    get: operations["people_autocomplete_retrieve"];
  };
  "/api/people/capacity_heatmap/": {
    /** @description Return per-person week summaries for the next N weeks (default 12). */
    get: operations["people_capacity_heatmap_list"];
  };
  "/api/people/export_excel/": {
    /** @description Export people to Excel with streaming response for large datasets */
    get: operations["people_export_excel_retrieve"];
  };
  "/api/people/find_available/": {
    /**
     * @description Person CRUD API with utilization calculations
     * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
     */
    get: operations["people_find_available_list"];
  };
  "/api/people/import_excel/": {
    /** @description Import people from Excel with progress tracking */
    post: operations["people_import_excel_create"];
  };
  "/api/people/search/": {
    /**
     * @description Server-side typeahead for People.
     *
     * Params:
     * - q: required search query (min length 2)
     * - limit: optional, default 20, max 50
     * Returns minimal projection: id, name, department
     */
    get: operations["people_search_retrieve"];
  };
  "/api/people/skill_match/": {
    /**
     * @description Rank people by skills (and optionally availability for a given week).
     *
     * Returns an array of items: { personId, name, score, matchedSkills[], missingSkills[], departmentId, roleName }.
     * Score is based on percent of required skills matched (case-insensitive contains) and optionally blended with availability when `week` is provided.
     */
    get: operations["people_skill_match_list"];
  };
  "/api/people/skill_match_async/": {
    /** @description Start async skill match job and return task ID for polling. */
    get: operations["people_skill_match_async_retrieve"];
  };
  "/api/people/workload_forecast/": {
    /**
     * @description Aggregate team capacity vs allocated for N weeks ahead (default 8).
     *
     * Response array items:
     * { weekStart, totalCapacity, totalAllocated, teamUtilization, peopleOverallocated[] }
     */
    get: operations["people_workload_forecast_list"];
  };
  "/api/personal/work/": {
    get: operations["personal_work_retrieve"];
  };
  "/api/projects/": {
    /** @description Get all projects with conditional request support (ETag/Last-Modified) and bulk loading */
    get: operations["projects_list"];
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    post: operations["projects_create"];
  };
  "/api/projects/{id}/": {
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    get: operations["projects_retrieve"];
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    put: operations["projects_update"];
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    delete: operations["projects_destroy"];
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    patch: operations["projects_partial_update"];
  };
  "/api/projects/{id}/availability/": {
    /**
     * @description Return availability snapshot for people relevant to the project context.
     *
     * Response items: { personId, personName, totalHours, capacity, availableHours, utilizationPercent }
     * Uses Sunday as canonical week key; exact JSON key lookup (no tolerance).
     */
    get: operations["projects_availability_list"];
  };
  "/api/projects/{id}/pre-deliverable-settings/": {
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    get: operations["projects_pre_deliverable_settings_retrieve"];
    /**
     * @description Adds ETag on detail GET and optional If-Match handling on mutations.
     *
     * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
     * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
     *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
     */
    put: operations["projects_pre_deliverable_settings_update"];
  };
  "/api/projects/export_excel/": {
    /** @description Export projects to Excel with streaming response for large datasets */
    get: operations["projects_export_excel_retrieve"];
  };
  "/api/projects/export_template/": {
    /** @description Export Excel import template with examples */
    get: operations["projects_export_template_retrieve"];
  };
  "/api/projects/filter-metadata/": {
    /**
     * @description Get optimized filter metadata for all projects.
     *
     * Returns camelCase keys for direct frontend consumption:
     * {
     *   "projectFilters": {
     *     "<projectId>": {
     *       "assignmentCount": number,
     *       "hasFutureDeliverables": boolean,
     *       "status": string
     *     }, ...
     *   }
     * }
     */
    get: operations["projects_filter_metadata_retrieve"];
  };
  "/api/projects/import_excel/": {
    /** @description Import projects from Excel with progress tracking */
    post: operations["projects_import_excel_create"];
  };
  "/api/projects/project-roles/": {
    get: operations["projects_project_roles_list"];
    post: operations["projects_project_roles_create"];
  };
  "/api/projects/project-roles/{id}/": {
    delete: operations["projects_project_roles_destroy"];
    patch: operations["projects_project_roles_partial_update"];
  };
  "/api/reports/pre-deliverable-completion/": {
    get: operations["reports_pre_deliverable_completion_retrieve"];
  };
  "/api/reports/pre-deliverable-team-performance/": {
    get: operations["reports_pre_deliverable_team_performance_retrieve"];
  };
  "/api/roles/": {
    /**
     * @description Role ViewSet providing CRUD operations
     * - List all roles (paginated)
     * - Create new role
     * - Retrieve specific role
     * - Update role
     * - Delete role
     * - Bulk list (for autocomplete)
     */
    get: operations["roles_list"];
    /**
     * @description Role ViewSet providing CRUD operations
     * - List all roles (paginated)
     * - Create new role
     * - Retrieve specific role
     * - Update role
     * - Delete role
     * - Bulk list (for autocomplete)
     */
    post: operations["roles_create"];
  };
  "/api/roles/{id}/": {
    /**
     * @description Role ViewSet providing CRUD operations
     * - List all roles (paginated)
     * - Create new role
     * - Retrieve specific role
     * - Update role
     * - Delete role
     * - Bulk list (for autocomplete)
     */
    get: operations["roles_retrieve"];
    /**
     * @description Role ViewSet providing CRUD operations
     * - List all roles (paginated)
     * - Create new role
     * - Retrieve specific role
     * - Update role
     * - Delete role
     * - Bulk list (for autocomplete)
     */
    put: operations["roles_update"];
    /** @description Override destroy to check for role usage before deletion */
    delete: operations["roles_destroy"];
    /**
     * @description Role ViewSet providing CRUD operations
     * - List all roles (paginated)
     * - Create new role
     * - Retrieve specific role
     * - Update role
     * - Delete role
     * - Bulk list (for autocomplete)
     */
    patch: operations["roles_partial_update"];
  };
  "/api/roles/bulk/": {
    /**
     * @description Return all roles without pagination for autocomplete/dropdowns
     * Access via: GET /api/roles/bulk/
     */
    get: operations["roles_bulk_list"];
  };
  "/api/skills/person-skills/": {
    /** @description CRUD operations for person skills */
    get: operations["skills_person_skills_list"];
    /** @description CRUD operations for person skills */
    post: operations["skills_person_skills_create"];
  };
  "/api/skills/person-skills/{id}/": {
    /** @description CRUD operations for person skills */
    get: operations["skills_person_skills_retrieve"];
    /** @description CRUD operations for person skills */
    put: operations["skills_person_skills_update"];
    /** @description CRUD operations for person skills */
    delete: operations["skills_person_skills_destroy"];
    /** @description CRUD operations for person skills */
    patch: operations["skills_person_skills_partial_update"];
  };
  "/api/skills/person-skills/summary/": {
    /** @description Get skill summary for a person */
    get: operations["skills_person_skills_summary_retrieve"];
  };
  "/api/skills/skill-tags/": {
    /** @description CRUD operations for skill tags */
    get: operations["skills_skill_tags_list"];
    /** @description CRUD operations for skill tags */
    post: operations["skills_skill_tags_create"];
  };
  "/api/skills/skill-tags/{id}/": {
    /** @description CRUD operations for skill tags */
    get: operations["skills_skill_tags_retrieve"];
    /** @description CRUD operations for skill tags */
    put: operations["skills_skill_tags_update"];
    /** @description CRUD operations for skill tags */
    delete: operations["skills_skill_tags_destroy"];
    /** @description CRUD operations for skill tags */
    patch: operations["skills_skill_tags_partial_update"];
  };
  "/api/token/": {
    /**
     * @description Takes a set of user credentials and returns an access and refresh JSON web
     * token pair to prove the authentication of those credentials.
     */
    post: operations["token_create"];
  };
  "/api/token/logout/": {
    /** @description Clears the refresh cookie in cookie mode. Body is ignored. */
    post: operations["token_logout_create"];
  };
  "/api/token/refresh/": {
    /**
     * @description Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    post: operations["token_refresh_create"];
  };
  "/api/token/verify/": {
    /**
     * @description Takes a token and indicates if it is valid.  This view provides no
     * information about a token's fitness for a particular use.
     */
    post: operations["token_verify_create"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AdminAuditLog: {
      id: number;
      action: string;
      detail: unknown;
      /** Format: date-time */
      created_at: string;
      actor: {
        [key: string]: unknown;
      } | null;
      targetUser: {
        [key: string]: unknown;
      } | null;
    };
    AdminLinkUserPersonRequestRequest: {
      personId?: number | null;
    };
    AssignedHoursByClientResponse: {
      clients: components["schemas"]["ClientTotal"][];
    };
    AssignedHoursClientProjectsResponse: {
      projects: components["schemas"]["ProjectTotal"][];
    };
    AssignedHoursDeliverableTimelineResponse: {
      weekKeys: string[];
      series: components["schemas"]["DeliverableSeries"];
      /** @description deprecated: kept for backward compatibility; typically empty */
      extras?: components["schemas"]["ExtraSeries"][] | null;
      totalByWeek: number[];
    };
    AssignedHoursStatusTimelineResponse: {
      weekKeys: string[];
      series: components["schemas"]["StatusSeries"];
      totalByWeek: number[];
    };
    /** @description Assignment serializer with weekly hours support */
    Assignment: {
      id: number;
      person: number;
      personName: string;
      personWeeklyCapacity: number;
      personDepartmentId: number;
      personSkills: readonly components["schemas"]["PersonSkillSummary"][];
      projectName?: string;
      project?: number | null;
      projectDisplayName: string;
      roleOnProjectId?: number | null;
      roleName: string | null;
      weeklyHours: unknown;
      allocationPercentage: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    AssignmentHoursUpdateRequest: {
      assignmentId: number;
      weeklyHours: {
        [key: string]: number;
      };
    };
    /** @description Assignment serializer with weekly hours support */
    AssignmentRequest: {
      person: number;
      projectName?: string;
      project?: number | null;
      roleOnProjectId?: number | null;
      weeklyHours: unknown;
    };
    AvailablePerson: {
      id: number;
      name: string;
      /** Format: double */
      available_hours: number;
      /** Format: double */
      utilization_percent: number;
    };
    BulkCompleteRequestRequest: {
      ids: number[];
    };
    BulkCompleteResponse: {
      success: boolean;
      updatedCount: number;
      failed: number[];
    };
    BulkUpdateHoursResponse: {
      success: boolean;
      results: components["schemas"]["BulkUpdateResultItem"][];
    };
    BulkUpdateResultItem: {
      assignmentId: number;
      status: string;
      etag: string;
    };
    ChangePasswordRequestRequest: {
      currentPassword: string;
      newPassword: string;
    };
    ClientTotal: {
      label: string;
      /** Format: double */
      hours: number;
    };
    CoverageBlock: {
      roleId: number;
      start: string;
      end: string;
      weeks: number;
      /** Format: double */
      hours: number;
    };
    CreateUserRequestRequest: {
      username: string;
      email?: string;
      password: string;
      personId?: number | null;
      role?: components["schemas"]["RoleEnum"];
    };
    DashboardResponse: {
      summary: components["schemas"]["DashboardSummary"];
      utilization_distribution: components["schemas"]["UtilizationDistribution"];
      team_overview: components["schemas"]["TeamOverviewItem"][];
      available_people: components["schemas"]["AvailablePerson"][];
      recent_assignments: components["schemas"]["RecentAssignment"][];
    };
    DashboardSummary: {
      total_people: number;
      /** Format: double */
      avg_utilization: number;
      /** Format: double */
      peak_utilization: number;
      peak_person?: string | null;
      total_assignments: number;
      overallocated_count: number;
    };
    /** @description Deliverable serializer with snake_case -> camelCase field mapping */
    Deliverable: {
      id: number;
      project: number;
      /** @description Completion percentage (0-100) */
      percentage?: number | null;
      /** @description Brief description (e.g., SD, DD, IFP, IFC) */
      description?: string;
      /** Format: date */
      date?: string | null;
      /** @description Additional details, owner info, requirements, etc. */
      notes?: string;
      sortOrder?: number;
      isCompleted?: boolean;
      /** Format: date */
      completedDate?: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      preItems: string;
    };
    /** @description Serializer for linking people to deliverables with weekly hours. */
    DeliverableAssignment: {
      id: number;
      deliverable: number;
      person: number;
      roleOnMilestone?: string | null;
      is_active?: boolean;
      personName: string;
      projectId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @description Serializer for linking people to deliverables with weekly hours. */
    DeliverableAssignmentRequest: {
      deliverable: number;
      person: number;
      roleOnMilestone?: string | null;
      is_active?: boolean;
    };
    /**
     * @description Serializer for calendar items (aggregate), camelCase API fields.
     *
     * Accepts Deliverable instances annotated with assignmentCount.
     */
    DeliverableCalendarItem: {
      id: number;
      project: number;
      projectName: string | null;
      projectClient?: string | null;
      title: string;
      /** Format: date */
      date: string | null;
      isCompleted: boolean;
      assignmentCount: number;
    };
    /**
     * @description * `sd` - SD
     * * `dd` - DD
     * * `ifp` - IFP
     * * `masterplan` - Masterplan
     * * `bulletins` - Bulletins
     * * `ca` - CA
     * * `other` - Other
     * @enum {string}
     */
    DeliverablePhaseEnum: "sd" | "dd" | "ifp" | "masterplan" | "bulletins" | "ca" | "other";
    DeliverableReorderRequestRequest: {
      project: number;
      deliverable_ids: number[];
    };
    DeliverableReorderResponse: {
      success: boolean;
    };
    /** @description Deliverable serializer with snake_case -> camelCase field mapping */
    DeliverableRequest: {
      project: number;
      /** @description Completion percentage (0-100) */
      percentage?: number | null;
      /** @description Brief description (e.g., SD, DD, IFP, IFC) */
      description?: string;
      /** Format: date */
      date?: string | null;
      /** @description Additional details, owner info, requirements, etc. */
      notes?: string;
      sortOrder?: number;
      isCompleted?: boolean;
      /** Format: date */
      completedDate?: string | null;
    };
    DeliverableSeries: {
      sd: number[];
      dd: number[];
      ifp: number[];
      masterplan: number[];
      bulletins: number[];
      ca: number[];
      other: number[];
    };
    DeliverableStaffingSummaryItem: {
      linkId?: number | null;
      personId: number;
      personName: string;
      roleOnMilestone?: string | null;
      /** Format: double */
      totalHours: number;
      weekBreakdown: {
        [key: string]: unknown;
      };
    };
    /** @description Department serializer with explicit camelCase field mapping */
    Department: {
      id: number;
      name: string;
      parentDepartment?: number | null;
      manager?: number | null;
      managerName: string;
      description?: string;
      isActive: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @description Department serializer with explicit camelCase field mapping */
    DepartmentRequest: {
      name: string;
      parentDepartment?: number | null;
      manager?: number | null;
      description?: string;
      isActive: boolean;
    };
    DeptProjectRoleCreateRequest: {
      department: number;
      name: string;
    };
    DeptProjectRoleCreateResponse: {
      id: number;
      name: string;
    };
    EBCPRoleAgg: {
      roleId: number;
      weeks: number;
      /** Format: double */
      hours: number;
    };
    EBCPTotals: {
      weeks: number;
      /** Format: double */
      hours: number;
      projectsCount: number;
    };
    /**
     * @description * `joined` - Joined
     * * `left` - Left
     * @enum {string}
     */
    EventTypeEnum: "joined" | "left";
    ExperienceByClientPerson: {
      personId: number;
      personName: string;
      departmentId?: number | null;
      totals: components["schemas"]["EBCPTotals"];
      roles: {
        [key: string]: components["schemas"]["EBCPRoleAgg"];
      };
    };
    ExperienceByClientResponse: {
      results: components["schemas"]["ExperienceByClientPerson"][];
      count: number;
    };
    ExtraSeries: {
      label: string;
      values: number[];
    };
    GlobalSettingsUpdateRequest: {
      settings: components["schemas"]["PreDeliverableGlobalSettingsUpdateRequest"][];
    };
    GridSnapshotAsyncResponse: {
      jobId: string;
    };
    GridSnapshotPerson: {
      id: number;
      name: string;
      weeklyCapacity: number;
      department: number | null;
    };
    GridSnapshotResponse: {
      weekKeys: string[];
      people: components["schemas"]["GridSnapshotPerson"][];
      hoursByPerson: {
        [key: string]: {
          [key: string]: number;
        };
      };
    };
    InviteUserRequestRequest: {
      /** Format: email */
      email: string;
      username?: string;
      personId?: number | null;
      role?: components["schemas"]["RoleEnum"];
    };
    LinkPersonRequestRequest: {
      person_id?: number | null;
    };
    MembershipEvent: {
      week_start: string;
      event_type: components["schemas"]["EventTypeEnum"];
      deliverable_phase: components["schemas"]["DeliverablePhaseEnum"];
      /** Format: double */
      hours_before: number;
      /** Format: double */
      hours_after: number;
    };
    /**
     * @description * `absolute_hours` - Absolute Hours
     * * `percent` - Percent
     * @enum {string}
     */
    ModeEnum: "absolute_hours" | "percent";
    NotificationPreferences: {
      emailPreDeliverableReminders: boolean;
      reminderDaysBefore: number;
      dailyDigest: boolean;
    };
    NotificationPreferencesRequest: {
      emailPreDeliverableReminders: boolean;
      reminderDaysBefore: number;
      dailyDigest: boolean;
    };
    PEPClient: {
      client: string;
      weeks: number;
      /** Format: double */
      hours: number;
      roles: {
        [key: string]: components["schemas"]["PEPClientRole"];
      };
      phases: {
        [key: string]: components["schemas"]["PEPClientPhase"];
      };
    };
    PEPClientPhase: {
      phase: components["schemas"]["PhaseEnum"];
      weeks: number;
      /** Format: double */
      hours: number;
    };
    PEPClientRole: {
      roleId: number;
      weeks: number;
      /** Format: double */
      hours: number;
    };
    PEPProject: {
      projectId: number;
      projectName: string;
      client: string;
      weeks: number;
      /** Format: double */
      hours: number;
      roles: {
        [key: string]: components["schemas"]["PEPProjectRole"];
      };
      phases: {
        [key: string]: components["schemas"]["PEPProjectPhase"];
      };
    };
    PEPProjectPhase: {
      phase: components["schemas"]["PhaseEnum"];
      weeks: number;
      /** Format: double */
      hours: number;
    };
    PEPProjectRole: {
      roleId: number;
      weeks: number;
      /** Format: double */
      hours: number;
    };
    PSTEvent: {
      week_start: string;
      event_type: components["schemas"]["EventTypeEnum"];
    };
    PSTPerson: {
      personId: number;
      personName: string;
      roles: components["schemas"]["PSTPersonRole"][];
      events: components["schemas"]["PSTEvent"][];
    };
    PSTPersonRole: {
      roleId: number | null;
      weeks: number;
      /** Format: double */
      hours: number;
    };
    PSTRoleAgg: {
      roleId: number | null;
      peopleCount: number;
      weeks: number;
      /** Format: double */
      hours: number;
    };
    PaginatedAssignmentList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Assignment"][];
    };
    PaginatedDeliverableAssignmentList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["DeliverableAssignment"][];
    };
    PaginatedDeliverableCalendarItemList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["DeliverableCalendarItem"][];
    };
    PaginatedDeliverableList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Deliverable"][];
    };
    PaginatedDepartmentList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Department"][];
    };
    PaginatedPersonCapacityHeatmapItemList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["PersonCapacityHeatmapItem"][];
    };
    PaginatedPersonList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Person"][];
    };
    PaginatedPersonSkillList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["PersonSkill"][];
    };
    PaginatedPreDeliverableItemList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["PreDeliverableItem"][];
    };
    PaginatedProjectAvailabilityItemList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["ProjectAvailabilityItem"][];
    };
    PaginatedProjectList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Project"][];
    };
    PaginatedRoleList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Role"][];
    };
    PaginatedSkillMatchResultItemList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["SkillMatchResultItem"][];
    };
    PaginatedSkillTagList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["SkillTag"][];
    };
    PaginatedWorkloadForecastItemList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["WorkloadForecastItem"][];
    };
    PasswordResetConfirmRequest: {
      uid: string;
      token: string;
      newPassword: string;
    };
    PasswordResetRequestRequest: {
      /** Format: email */
      email: string;
    };
    /** @description Assignment serializer with weekly hours support */
    PatchedAssignmentRequest: {
      person?: number;
      projectName?: string;
      project?: number | null;
      roleOnProjectId?: number | null;
      weeklyHours?: unknown;
    };
    PatchedBulkUpdateHoursRequestRequest: {
      updates?: components["schemas"]["AssignmentHoursUpdateRequest"][];
    };
    /** @description Serializer for linking people to deliverables with weekly hours. */
    PatchedDeliverableAssignmentRequest: {
      deliverable?: number;
      person?: number;
      roleOnMilestone?: string | null;
      is_active?: boolean;
    };
    /** @description Deliverable serializer with snake_case -> camelCase field mapping */
    PatchedDeliverableRequest: {
      project?: number;
      /** @description Completion percentage (0-100) */
      percentage?: number | null;
      /** @description Brief description (e.g., SD, DD, IFP, IFC) */
      description?: string;
      /** Format: date */
      date?: string | null;
      /** @description Additional details, owner info, requirements, etc. */
      notes?: string;
      sortOrder?: number;
      isCompleted?: boolean;
      /** Format: date */
      completedDate?: string | null;
    };
    /** @description Department serializer with explicit camelCase field mapping */
    PatchedDepartmentRequest: {
      name?: string;
      parentDepartment?: number | null;
      manager?: number | null;
      description?: string;
      isActive?: boolean;
    };
    /** @description Person serializer with department and role integration */
    PatchedPersonRequest: {
      name?: string;
      /** @default 36 */
      weeklyCapacity?: number;
      /** @description Person's role in the organization */
      role?: number | null;
      department?: number | null;
      location?: string | null;
      /** Format: date */
      hireDate?: string | null;
      isActive?: boolean;
      notes?: string;
    };
    /** @description Person skill serializer with camelCase field names and related data */
    PatchedPersonSkillRequest: {
      person?: number;
      skillTagId?: number;
      skillType?: string;
      proficiencyLevel?: string;
      notes?: string;
      /** Format: date */
      lastUsed?: string | null;
    };
    PatchedPreDeliverableItemRequest: {
      deliverable?: number;
      preDeliverableTypeId?: number;
      /** Format: date */
      generatedDate?: string;
      daysBefore?: number;
      isCompleted?: boolean;
      /** Format: date */
      completedDate?: string | null;
      notes?: string;
      isActive?: boolean;
    };
    PatchedProjectRequest: {
      name?: string;
      status?: components["schemas"]["StatusEnum"];
      client?: string;
      description?: string;
      projectNumber?: string | null;
      /** Format: date */
      startDate?: string | null;
      /** Format: date */
      endDate?: string | null;
      estimatedHours?: number | null;
      /** @default true */
      isActive?: boolean;
    };
    PatchedProjectRoleUpdateRequest: {
      name?: string;
      isActive?: boolean;
      sortOrder?: number;
    };
    /** @description Role serializer with camelCase field transformation */
    PatchedRoleRequest: {
      /** @description Role name (e.g., Senior Engineer, Product Manager) */
      name?: string;
      /** @description Optional description of the role responsibilities */
      description?: string;
      /** @description Whether this role is currently available for assignment */
      isActive?: boolean;
    };
    /** @description Skill tag serializer with camelCase field names */
    PatchedSkillTagRequest: {
      name?: string;
      category?: string;
      description?: string;
    };
    PatchedUserSettingsPatchRequest: {
      settings?: {
        [key: string]: unknown;
      };
    };
    PeopleAutocompleteItem: {
      id: number;
      name: string;
      department?: number | null;
    };
    PeopleSearchItem: {
      id: number;
      name: string;
      department?: number | null;
    };
    /** @description Person serializer with department and role integration */
    Person: {
      id: number;
      name: string;
      /** @default 36 */
      weeklyCapacity?: number;
      /** @description Person's role in the organization */
      role?: number | null;
      roleName: string;
      department?: number | null;
      departmentName: string;
      location?: string | null;
      /** Format: date */
      hireDate?: string | null;
      isActive?: boolean;
      notes?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @description Serializer for capacity heatmap items returned by capacity_heatmap action. */
    PersonCapacityHeatmapItem: {
      id: number;
      name: string;
      weeklyCapacity: number;
      department?: string | null;
      weekKeys: string[];
      weekTotals: {
        [key: string]: number;
      };
      peak: {
        [key: string]: number;
      };
      /** Format: double */
      averagePercentage: number;
      percentByWeek?: {
        [key: string]: number;
      };
      availableByWeek?: {
        [key: string]: number;
      };
    };
    PersonExperienceProfileResponse: {
      byClient: components["schemas"]["PEPClient"][];
      byProject: components["schemas"]["PEPProject"][];
      eventsCount: number;
    };
    PersonProjectTimelineResponse: {
      weeksSummary: components["schemas"]["WeeksSummary"];
      coverageBlocks: components["schemas"]["CoverageBlock"][];
      events: components["schemas"]["MembershipEvent"][];
      roleChanges: components["schemas"]["RoleChange"][];
      weeklyHours: {
        [key: string]: number;
      };
    };
    /** @description Person serializer with department and role integration */
    PersonRequest: {
      name: string;
      /** @default 36 */
      weeklyCapacity?: number;
      /** @description Person's role in the organization */
      role?: number | null;
      department?: number | null;
      location?: string | null;
      /** Format: date */
      hireDate?: string | null;
      isActive?: boolean;
      notes?: string;
    };
    /** @description Person skill serializer with camelCase field names and related data */
    PersonSkill: {
      id: number;
      person: number;
      skillTagId: number;
      skillTagName: string;
      skillType: string;
      proficiencyLevel: string;
      notes?: string;
      /** Format: date */
      lastUsed?: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @description Person skill serializer with camelCase field names and related data */
    PersonSkillRequest: {
      person: number;
      skillTagId: number;
      skillType: string;
      proficiencyLevel: string;
      notes?: string;
      /** Format: date */
      lastUsed?: string | null;
    };
    /** @description Lightweight serializer for person skill summaries */
    PersonSkillSummary: {
      skillTagName: string;
      skillType: string;
      proficiencyLevel: string;
    };
    PersonSkillSummaryGrouped: {
      strengths: components["schemas"]["PersonSkillSummary"][];
      development: components["schemas"]["PersonSkillSummary"][];
      learning: components["schemas"]["PersonSkillSummary"][];
    };
    /**
     * @description * `sd` - SD
     * * `dd` - DD
     * * `ifp` - IFP
     * * `masterplan` - Masterplan
     * * `bulletins` - Bulletins
     * * `ca` - CA
     * * `other` - Other
     * @enum {string}
     */
    PhaseEnum: "sd" | "dd" | "ifp" | "masterplan" | "bulletins" | "ca" | "other";
    PreDeliverableGlobalSettingsItem: {
      typeId: number;
      typeName: string;
      defaultDaysBefore: number;
      isEnabledByDefault: boolean;
      sortOrder?: number;
      isActive?: boolean;
    };
    PreDeliverableGlobalSettingsUpdateRequest: {
      typeId: number;
      defaultDaysBefore: number;
      isEnabledByDefault: boolean;
    };
    PreDeliverableItem: {
      id: number;
      deliverable: number;
      preDeliverableTypeId: number;
      typeName: string;
      /** Format: date */
      generatedDate: string;
      daysBefore: number;
      isCompleted: boolean;
      /** Format: date */
      completedDate?: string | null;
      completedBy: string;
      notes?: string;
      isActive: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      displayName: string;
      isOverdue: string;
      parentDeliverable: string;
      assignedPeople: string;
      itemType: string;
    };
    PreDeliverableItemRequest: {
      deliverable: number;
      preDeliverableTypeId: number;
      /** Format: date */
      generatedDate: string;
      daysBefore: number;
      isCompleted: boolean;
      /** Format: date */
      completedDate?: string | null;
      notes?: string;
      isActive: boolean;
    };
    PreItemsBackfillRequestRequest: {
      projectId?: number;
      /** Format: date */
      start?: string;
      /** Format: date */
      end?: string;
      regenerate?: boolean;
    };
    PreItemsBackfillResponse: {
      enqueued: boolean;
      jobId?: string;
      statusUrl?: string;
      result?: {
        [key: string]: unknown;
      };
    };
    Project: {
      id: number;
      name: string;
      status?: components["schemas"]["StatusEnum"];
      client?: string;
      description?: string;
      projectNumber?: string | null;
      /** Format: date */
      startDate?: string | null;
      /** Format: date */
      endDate?: string | null;
      estimatedHours?: number | null;
      /** @default true */
      isActive?: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @description Availability snapshot item for a person in project context. */
    ProjectAvailabilityItem: {
      personId: number;
      personName: string;
      /** Format: double */
      totalHours: number;
      /** Format: double */
      capacity: number;
      /** Format: double */
      availableHours: number;
      /** Format: double */
      utilizationPercent: number;
    };
    ProjectFilterItem: {
      assignmentCount: number;
      hasFutureDeliverables: boolean;
      status: string;
    };
    ProjectFilterMetadataResponse: {
      projectFilters: {
        [key: string]: components["schemas"]["ProjectFilterItem"];
      };
    };
    ProjectGridSnapshotResponse: {
      weekKeys: string[];
      projects: components["schemas"]["ProjectLite"][];
      hoursByProject: {
        [key: string]: {
          [key: string]: number;
        };
      };
      deliverablesByProjectWeek: {
        [key: string]: {
          [key: string]: number;
        };
      };
      hasFutureDeliverablesByProject: {
        [key: string]: boolean;
      };
      metrics: components["schemas"]["ProjectSnapshotMetrics"];
    };
    ProjectLite: {
      id: number;
      name: string;
      client?: string | null;
      status?: string | null;
    };
    ProjectPreDeliverableSettingsResponse: {
      projectId: number;
      settings: components["schemas"]["ProjectTypeSetting"][];
    };
    ProjectRequest: {
      name: string;
      status?: components["schemas"]["StatusEnum"];
      client?: string;
      description?: string;
      projectNumber?: string | null;
      /** Format: date */
      startDate?: string | null;
      /** Format: date */
      endDate?: string | null;
      estimatedHours?: number | null;
      /** @default true */
      isActive?: boolean;
    };
    ProjectRoleCreateRequest: {
      department: number;
      name: string;
      sortOrder?: number | null;
    };
    ProjectRoleItem: {
      id: number;
      name: string;
      is_active?: boolean;
      sort_order?: number;
      department_id: number;
    };
    ProjectSnapshotMetrics: {
      projectsCount: number;
      peopleAssignedCount: number;
      /** Format: double */
      totalHours: number;
    };
    ProjectStaffingTimelineResponse: {
      people: components["schemas"]["PSTPerson"][];
      roleAggregates: components["schemas"]["PSTRoleAgg"][];
    };
    ProjectTotal: {
      id: number;
      name: string;
      /** Format: double */
      hours: number;
    };
    ProjectTotalsResponse: {
      hoursByProject: {
        [key: string]: {
          [key: string]: number;
        };
      };
    };
    ProjectTypeSetting: {
      typeId: number;
      typeName: string;
      isEnabled: boolean;
      daysBefore: number | null;
      source: components["schemas"]["SourceEnum"];
    };
    RecentAssignment: {
      person: string;
      project: string;
      created: string;
    };
    /** @description Role serializer with camelCase field transformation */
    Role: {
      id: number;
      /** @description Role name (e.g., Senior Engineer, Product Manager) */
      name: string;
      /** @description Optional description of the role responsibilities */
      description?: string;
      /** @description Whether this role is currently available for assignment */
      isActive?: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    RoleChange: {
      week_start: string;
      roleFromId: number;
      roleToId: number;
    };
    /**
     * @description * `admin` - admin
     * * `manager` - manager
     * * `user` - user
     * @enum {string}
     */
    RoleEnum: "admin" | "manager" | "user";
    /** @description Role serializer with camelCase field transformation */
    RoleRequest: {
      /** @description Role name (e.g., Senior Engineer, Product Manager) */
      name: string;
      /** @description Optional description of the role responsibilities */
      description?: string;
      /** @description Whether this role is currently available for assignment */
      isActive?: boolean;
    };
    RunWeeklySnapshotResponse: {
      week_start: string;
      lock_acquired: boolean;
      examined?: number;
      inserted?: number;
      updated?: number;
      skipped?: number;
      events_inserted?: number;
      skipped_due_to_lock?: boolean;
    };
    SetPasswordRequestRequest: {
      userId: number;
      newPassword: string;
    };
    SetUserRoleRequestRequest: {
      role: components["schemas"]["RoleEnum"];
    };
    SkillMatchAsyncResponse: {
      jobId: string;
    };
    /** @description Result item for people skill match scoring. */
    SkillMatchResultItem: {
      personId: number;
      name: string;
      /**
       * Format: double
       * @description 0-100
       */
      score: number;
      matchedSkills: string[];
      missingSkills: string[];
      departmentId: number | null;
      roleName?: string | null;
    };
    /** @description Skill tag serializer with camelCase field names */
    SkillTag: {
      id: number;
      name: string;
      category?: string;
      description?: string;
      isActive: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @description Skill tag serializer with camelCase field names */
    SkillTagRequest: {
      name: string;
      category?: string;
      description?: string;
    };
    /**
     * @description * `project` - project
     * * `global` - global
     * * `default` - default
     * @enum {string}
     */
    SourceEnum: "project" | "global" | "default";
    /**
     * @description * `planning` - Planning
     * * `active` - Active
     * * `active_ca` - Active CA
     * * `on_hold` - On Hold
     * * `completed` - Completed
     * * `cancelled` - Cancelled
     * @enum {string}
     */
    StatusEnum: "planning" | "active" | "active_ca" | "on_hold" | "completed" | "cancelled";
    StatusSeries: {
      active: number[];
      active_ca: number[];
      other: number[];
    };
    TeamOverviewItem: {
      id: number;
      name: string;
      role: string;
      /** Format: double */
      utilization_percent: number;
      /** Format: double */
      allocated_hours: number;
      capacity: number;
      is_overallocated: boolean;
      /** Format: double */
      peak_utilization_percent: number;
      peak_week: string;
      is_peak_overallocated: boolean;
    };
    TokenRefresh: {
      access: string;
      refresh: string;
    };
    TokenRefreshRequest: {
      refresh: string;
    };
    TokenVerifyRequest: {
      token: string;
    };
    UserListItem: {
      id: number;
      username: string;
      email?: string;
      is_staff: boolean;
      is_superuser: boolean;
      groups: string[];
      role: string;
      person?: components["schemas"]["UserListPerson"] | null;
    };
    UserListPerson: {
      id: number;
      name: string;
    };
    UserProfile: {
      id: number;
      user: {
        [key: string]: unknown;
      };
      person: {
        [key: string]: unknown;
      } | null;
      settings?: unknown;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * @description Allow login with either username or email.
     *
     * If the incoming 'username' field looks like an email or uniquely matches a
     * user email (case-insensitive), rewrite it to that user's username before
     * delegating to the base serializer.
     */
    UsernameOrEmailTokenObtainPairRequest: {
      username: string;
      password: string;
    };
    UtilizationDistribution: {
      underutilized: number;
      optimal: number;
      high: number;
      overallocated: number;
    };
    UtilizationScheme: {
      mode?: components["schemas"]["ModeEnum"];
      blue_min?: number;
      blue_max?: number;
      green_min?: number;
      green_max?: number;
      orange_min?: number;
      orange_max?: number;
      red_min?: number;
      zero_is_blank?: boolean;
      version: number;
      /** Format: date-time */
      updated_at: string;
    };
    UtilizationSchemeRequest: {
      mode?: components["schemas"]["ModeEnum"];
      blue_min?: number;
      blue_max?: number;
      green_min?: number;
      green_max?: number;
      orange_min?: number;
      orange_max?: number;
      red_min?: number;
      zero_is_blank?: boolean;
    };
    WeeksSummary: {
      weeks: number;
      /** Format: double */
      hours: number;
    };
    /** @description Serializer for workload forecast items returned by workload_forecast action. */
    WorkloadForecastItem: {
      weekStart: string;
      /** Format: double */
      totalCapacity: number;
      /** Format: double */
      totalAllocated: number;
      /** Format: double */
      teamUtilization: number;
      peopleOverallocated: components["schemas"]["WorkloadForecastOverallocatedItem"][];
    };
    WorkloadForecastOverallocatedItem: {
      id: number;
      name: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * @description Get all assignments with person details and optional project
   * filtering.
   */
  assignments_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAssignmentList"];
        };
      };
    };
  };
  /** @description Create assignment with validation */
  assignments_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AssignmentRequest"];
        "multipart/form-data": components["schemas"]["AssignmentRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Assignment"];
        };
      };
    };
  };
  /**
   * @description Assignment CRUD API with utilization tracking
   * Uses AutoMapped serializer for automatic snake_case -> camelCase conversion
   */
  assignments_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this assignment. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Assignment"];
        };
      };
    };
  };
  /**
   * @description Assignment CRUD API with utilization tracking
   * Uses AutoMapped serializer for automatic snake_case -> camelCase conversion
   */
  assignments_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this assignment. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AssignmentRequest"];
        "multipart/form-data": components["schemas"]["AssignmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Assignment"];
        };
      };
    };
  };
  /**
   * @description Assignment CRUD API with utilization tracking
   * Uses AutoMapped serializer for automatic snake_case -> camelCase conversion
   */
  assignments_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this assignment. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Assignment CRUD API with utilization tracking
   * Uses AutoMapped serializer for automatic snake_case -> camelCase conversion
   */
  assignments_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this assignment. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedAssignmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAssignmentRequest"];
        "multipart/form-data": components["schemas"]["PatchedAssignmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Assignment"];
        };
      };
    };
  };
  /**
   * @description Assigned hours aggregated by client for N weeks ahead.
   *
   * Response: { clients: [{ label: string, hours: number }] }
   */
  assignments_analytics_by_client_retrieve: {
    parameters: {
      query?: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description Number of weeks (1-26), default 12 */
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignedHoursByClientResponse"];
        };
      };
    };
  };
  /**
   * @description Assigned hours aggregated by project for a given client over N weeks ahead.
   *
   * Response: { projects: [{ id: number, name: string, hours: number }] }
   */
  assignments_analytics_client_projects_retrieve: {
    parameters: {
      query: {
        client: string;
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description Number of weeks (1-26), default 12 */
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignedHoursClientProjectsResponse"];
        };
      };
    };
  };
  /**
   * @description Assigned hours weekly timeline aggregated by deliverable phase for N weeks ahead.
   *
   * Uses shared classification (forward-select next deliverable, Monday exception, 'active_ca' override to 'ca' when no next deliverable). Controlled vocabulary: sd, dd, ifp, masterplan, bulletins, ca, other. 'extras' retained for compatibility and is typically empty.
   * Classification rules: explicit phase in description (SD/DD/IFP) wins; otherwise map by percentage: 0-39%→SD, 40-80%→DD, 81-100%→IFP; unknown→other.
   * Also groups any description containing 'Bulletin' or 'Addendum' into Bulletins/Addendums. Non-matching items are returned in 'extras' by label (desc or percent). No generic 'other' bucket is included in the series.
   * Response: { weekKeys: [..], series: { sd, dd, ifp, bulletins }, extras: [{label, values[]}], totalByWeek }
   */
  assignments_analytics_deliverable_timeline_retrieve: {
    parameters: {
      query?: {
        department?: number;
        /** @description 0|1 include active_ca status in addition to active (default 0) */
        include_active_ca?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description Number of weeks (1-26), default 12 */
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignedHoursDeliverableTimelineResponse"];
        };
      };
    };
  };
  /**
   * @description Assigned hours weekly timeline aggregated by project status for N weeks ahead.
   *
   * Categories reflect Project.status controlled vocabulary: 'active', 'active_ca', and 'other'.
   * Response: { weekKeys: [..], series: { active: number[], active_ca: number[], other: number[] }, totalByWeek: number[] }
   */
  assignments_analytics_status_timeline_retrieve: {
    parameters: {
      query?: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description Number of weeks (1-26), default 12 */
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignedHoursStatusTimelineResponse"];
        };
      };
    };
  };
  /** @description Bulk update weekly hours for multiple assignments in a single transaction. */
  assignments_bulk_update_hours_partial_update: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedBulkUpdateHoursRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedBulkUpdateHoursRequestRequest"];
        "multipart/form-data": components["schemas"]["PatchedBulkUpdateHoursRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BulkUpdateHoursResponse"];
        };
      };
    };
  };
  /** @description Get assignments grouped by person */
  assignments_by_person_retrieve: {
    parameters: {
      query?: {
        /** @description Filter by person id */
        person_id?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Assignment"];
        };
      };
    };
  };
  /**
   * @description Check assignment conflicts for a person in a specific week.
   * Optimized to prevent N+1 queries by fetching all person assignments
   * in a single query.
   */
  assignments_check_conflicts_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AssignmentRequest"];
        "multipart/form-data": components["schemas"]["AssignmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Assignment"];
        };
      };
    };
  };
  /**
   * @description Experience by Client: list people with totals and role aggregates in a date window.
   *
   * Params: client?, department?, include_children? (0|1), start?, end?, min_weeks?
   */
  assignments_experience_by_client_retrieve: {
    parameters: {
      query?: {
        client?: string;
        department?: number;
        /** @description YYYY-MM-DD */
        end?: string;
        /** @description 0|1 */
        include_children?: number;
        min_weeks?: number;
        /** @description YYYY-MM-DD */
        start?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExperienceByClientResponse"];
        };
      };
    };
  };
  /**
   * @description Return compact pre-aggregated grid data for N weeks ahead (default 12).
   *
   * Response shape: { weekKeys: [YYYY-MM-DD], people: [{id, name, weeklyCapacity, department}], hoursByPerson: { <personId>: { <weekKey>: hours } } }
   */
  assignments_grid_snapshot_retrieve: {
    parameters: {
      query?: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description Number of weeks (1-26), default 12 */
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GridSnapshotResponse"];
        };
      };
    };
  };
  /** @description Start async grid snapshot job and return task ID for polling. */
  assignments_grid_snapshot_async_retrieve: {
    parameters: {
      query?: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description Number of weeks (1-26), default 12 */
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GridSnapshotAsyncResponse"];
        };
      };
    };
  };
  /** @description Person Experience Profile: breakdown by client and project with role/phase aggregates, plus eventsCount. */
  assignments_person_experience_profile_retrieve: {
    parameters: {
      query: {
        end?: string;
        person: number;
        start?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonExperienceProfileResponse"];
        };
      };
    };
  };
  /** @description Person-Project timeline with coverage blocks, events, and derived role changes. */
  assignments_person_project_timeline_retrieve: {
    parameters: {
      query: {
        end?: string;
        person: number;
        project: number;
        start?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonProjectTimelineResponse"];
        };
      };
    };
  };
  /**
   * @description Project-centric aggregate snapshot for N weeks ahead (default 12).
   *
   * Response shape: { weekKeys: [YYYY-MM-DD], projects: [{id,name,client,status}],
   * hoursByProject: { <projectId>: { <weekKey>: hours } },
   * deliverablesByProjectWeek: { <projectId>: { <weekKey>: count } },
   * hasFutureDeliverablesByProject: { <projectId>: boolean },
   * metrics: { projectsCount, peopleAssignedCount, totalHours } }
   */
  assignments_project_grid_snapshot_retrieve: {
    parameters: {
      query?: {
        department?: number;
        /** @description 0|1 */
        has_future_deliverables?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description CSV of project IDs to scope totals (optional) */
        project_ids?: string;
        /** @description CSV of project status filters */
        status_in?: string;
        /** @description Number of weeks (1-26), default 12 */
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectGridSnapshotResponse"];
        };
      };
    };
  };
  /** @description Project Staffing Timeline: aggregates per role and people lists with events. */
  assignments_project_staffing_timeline_retrieve: {
    parameters: {
      query: {
        end?: string;
        project: number;
        start?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectStaffingTimelineResponse"];
        };
      };
    };
  };
  /** @description Return authoritative totals for specific projects over current horizon. */
  assignments_project_totals_retrieve: {
    parameters: {
      query: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description CSV of project IDs */
        project_ids: string;
        /** @description Number of weeks (1-26), default 12 */
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectTotalsResponse"];
        };
      };
    };
  };
  /**
   * @description Suggest non-destructive rebalancing ideas across the next N weeks
   * (default 12).
   *
   *     Heuristic:
   *     - Overallocated: utilization > 100% (based on 1-week snapshot)
   *     - Underutilized: utilization < 70%
   *     - Pair over with under and propose shifting 4–8 hours
   *     Returns at most 20 suggestions.
   */
  assignments_rebalance_suggestions_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Assignment"];
        };
      };
    };
  };
  /**
   * @description Run weekly assignment snapshot writer or backfill for a given Sunday week.
   *
   * If 'week' is omitted, uses the current week's Sunday. Add 'backfill=1' to use the backfill service (optional 'emit_events' and 'force' flags). Returns summary.
   */
  assignments_run_weekly_snapshot_create: {
    parameters: {
      query?: {
        /** @description Use backfill mode (0|1/true|false) */
        backfill?: boolean;
        /** @description Backfill: emit joined/left events */
        emit_events?: boolean;
        /** @description Backfill: overwrite existing rows */
        force?: boolean;
        /** @description YYYY-MM-DD (Sunday) */
        week?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AssignmentRequest"];
        "multipart/form-data": components["schemas"]["AssignmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RunWeeklySnapshotResponse"];
        };
      };
    };
  };
  /** @description Read-only endpoint for recent admin audit logs (admin only). */
  auth_admin_audit_list: {
    parameters: {
      query?: {
        limit?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AdminAuditLog"][];
        };
      };
    };
  };
  /** @description Change password for the authenticated user. */
  auth_change_password_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ChangePasswordRequestRequest"];
        "multipart/form-data": components["schemas"]["ChangePasswordRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Create a new user (staff only) and optionally link to a Person. */
  auth_create_user_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateUserRequestRequest"];
        "multipart/form-data": components["schemas"]["CreateUserRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  /**
   * @description Invite a user by email.
   *
   * - If the user exists, sends a password set/reset link.
   * - If not, creates an account with an unusable password and sends the link.
   * - Optionally assigns role and links to a Person.
   */
  auth_invite_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InviteUserRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["InviteUserRequestRequest"];
        "multipart/form-data": components["schemas"]["InviteUserRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Link or unlink the current user's profile to a Person. */
  auth_link_person_create: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LinkPersonRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LinkPersonRequestRequest"];
        "multipart/form-data": components["schemas"]["LinkPersonRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  /** @description Return the current user's profile with settings and optional person link. */
  auth_me_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  auth_notification_preferences_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NotificationPreferences"];
        };
      };
    };
  };
  auth_notification_preferences_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationPreferencesRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["NotificationPreferencesRequest"];
        "multipart/form-data": components["schemas"]["NotificationPreferencesRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NotificationPreferences"];
        };
      };
    };
  };
  /**
   * @description Request a password reset by email. Always returns 204.
   *
   * If a user with the email exists, sends a reset link with uid/token.
   */
  auth_password_reset_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordResetRequestRequest"];
        "multipart/form-data": components["schemas"]["PasswordResetRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Confirm password reset with uid/token and set a new password. */
  auth_password_reset_confirm_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetConfirmRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirmRequest"];
        "multipart/form-data": components["schemas"]["PasswordResetConfirmRequest"];
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Set password for a target user (staff only). */
  auth_set_password_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetPasswordRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SetPasswordRequestRequest"];
        "multipart/form-data": components["schemas"]["SetPasswordRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Update settings for the current user's profile (partial). */
  auth_settings_partial_update: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUserSettingsPatchRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUserSettingsPatchRequest"];
        "multipart/form-data": components["schemas"]["PatchedUserSettingsPatchRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  /** @description List all users with role and linked person (admin only). */
  auth_users_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserListItem"][];
        };
      };
    };
  };
  /** @description Delete a user account (admin only). */
  auth_users_destroy: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Link or unlink a target user to a Person (admin only). */
  auth_users_link_person_create: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AdminLinkUserPersonRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AdminLinkUserPersonRequestRequest"];
        "multipart/form-data": components["schemas"]["AdminLinkUserPersonRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserListItem"];
        };
      };
    };
  };
  /**
   * @description Set role for a target user (admin only).
   *
   * Accepts one of: {'role': 'admin' | 'manager' | 'user'}
   */
  auth_users_role_create: {
    parameters: {
      path: {
        user_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetUserRoleRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SetUserRoleRequestRequest"];
        "multipart/form-data": components["schemas"]["SetUserRoleRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserListItem"];
        };
      };
    };
  };
  backups_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  backups_create: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  backups_destroy: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  backups_download_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  backups_restore_create: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  backups_status_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  backups_upload_restore_create: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /**
   * @description Advertise backend feature capabilities (requires authentication).
   *
   * Returns booleans and simple settings for aggregate endpoints, async jobs, and cache TTL hints.
   */
  capabilities_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  core_department_project_roles_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  core_department_project_roles_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeptProjectRoleCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeptProjectRoleCreateRequest"];
        "multipart/form-data": components["schemas"]["DeptProjectRoleCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeptProjectRoleCreateResponse"];
        };
      };
    };
  };
  core_department_project_roles_destroy: {
    parameters: {
      path: {
        department: number;
        role_id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  core_department_project_roles_map_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  core_pre_deliverable_global_settings_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreDeliverableGlobalSettingsItem"][];
        };
      };
    };
  };
  core_pre_deliverable_global_settings_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GlobalSettingsUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["GlobalSettingsUpdateRequest"];
        "multipart/form-data": components["schemas"]["GlobalSettingsUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreDeliverableGlobalSettingsItem"][];
        };
      };
    };
  };
  /**
   * @description List/add project roles for suggestions/settings.
   *
   * - GET: returns union of catalog roles and distinct existing assignment roles.
   * - POST: admin-only; adds a role to the catalog.
   */
  core_project_roles_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /**
   * @description List/add project roles for suggestions/settings.
   *
   * - GET: returns union of catalog roles and distinct existing assignment roles.
   * - POST: admin-only; adds a role to the catalog.
   */
  core_project_roles_create: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /**
   * @description Remove a project role from the catalog and clear assignments using it.
   *
   * Behavior:
   * - Admin only.
   * - Accepts role name via query param (?name=...) or JSON body { name }.
   * - Clears `Assignment.role_on_project` wherever it matches (case-insensitive).
   * - If a catalog ProjectRole exists for that normalized name, it is deleted.
   * - DepartmentProjectRole mappings cascade-delete via FK on ProjectRole.
   */
  core_project_roles_destroy: {
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Singleton endpoint for utilization scheme.
   *
   * - GET: returns the current scheme with ETag/Last-Modified. Requires auth.
   * - PUT: admin-only, requires If-Match ETag; increments version on success.
   * - When feature flag is disabled: GET returns defaults; PUT returns 403.
   */
  core_utilization_scheme_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UtilizationScheme"];
        };
      };
    };
  };
  /**
   * @description Singleton endpoint for utilization scheme.
   *
   * - GET: returns the current scheme with ETag/Last-Modified. Requires auth.
   * - PUT: admin-only, requires If-Match ETag; increments version on success.
   * - When feature flag is disabled: GET returns defaults; PUT returns 403.
   */
  core_utilization_scheme_update: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UtilizationSchemeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["UtilizationSchemeRequest"];
        "multipart/form-data": components["schemas"]["UtilizationSchemeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UtilizationScheme"];
        };
      };
    };
  };
  /** @description Team dashboard with utilization metrics and overview */
  dashboard_retrieve: {
    parameters: {
      query?: {
        /** @description Filter by department id */
        department?: number;
        /** @description Number of weeks to aggregate (1-12) */
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DashboardResponse"];
        };
      };
    };
  };
  /** @description Get deliverables with bulk loading support (Phase 2 optimization) */
  deliverables_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDeliverableList"];
        };
      };
    };
  };
  /**
   * @description CRUD operations for deliverables
   * Supports filtering by project and manual reordering
   */
  deliverables_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeliverableRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeliverableRequest"];
        "multipart/form-data": components["schemas"]["DeliverableRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Deliverable"];
        };
      };
    };
  };
  /**
   * @description CRUD operations for deliverables
   * Supports filtering by project and manual reordering
   */
  deliverables_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this deliverable. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Deliverable"];
        };
      };
    };
  };
  /**
   * @description CRUD operations for deliverables
   * Supports filtering by project and manual reordering
   */
  deliverables_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this deliverable. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeliverableRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeliverableRequest"];
        "multipart/form-data": components["schemas"]["DeliverableRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Deliverable"];
        };
      };
    };
  };
  /**
   * @description CRUD operations for deliverables
   * Supports filtering by project and manual reordering
   */
  deliverables_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this deliverable. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description PATCH deliverable. If date changes and feature flag enabled, reallocate hours.
   *
   * Response includes optional 'reallocation' summary with keys:
   * { deltaWeeks, assignmentsChanged, touchedWeekKeys }
   */
  deliverables_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this deliverable. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDeliverableRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDeliverableRequest"];
        "multipart/form-data": components["schemas"]["PatchedDeliverableRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Deliverable"];
        };
      };
    };
  };
  /**
   * @description Return derived staffing for a deliverable from Assignment.weekly_hours.
   *
   * Default window: 6 weeks prior OR between previous and current deliverable (exclusive→inclusive).
   * Optional override: ?weeks=6 to force a fixed lookback window.
   *
   * Returns array items per person with >0 hours in window on the deliverable's project:
   * { linkId|null, personId, personName, roleOnMilestone|null, totalHours, weekBreakdown }
   */
  deliverables_staffing_summary_retrieve: {
    parameters: {
      query?: {
        /** @description Lookback window in weeks */
        weeks?: number;
      };
      path: {
        /** @description A unique integer value identifying this deliverable. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeliverableStaffingSummaryItem"];
        };
      };
    };
  };
  /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
  deliverables_assignments_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDeliverableAssignmentList"];
        };
      };
    };
  };
  /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
  deliverables_assignments_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeliverableAssignmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeliverableAssignmentRequest"];
        "multipart/form-data": components["schemas"]["DeliverableAssignmentRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DeliverableAssignment"];
        };
      };
    };
  };
  /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
  deliverables_assignments_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this deliverable assignment. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeliverableAssignment"];
        };
      };
    };
  };
  /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
  deliverables_assignments_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this deliverable assignment. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeliverableAssignmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeliverableAssignmentRequest"];
        "multipart/form-data": components["schemas"]["DeliverableAssignmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeliverableAssignment"];
        };
      };
    };
  };
  /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
  deliverables_assignments_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this deliverable assignment. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
  deliverables_assignments_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this deliverable assignment. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDeliverableAssignmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDeliverableAssignmentRequest"];
        "multipart/form-data": components["schemas"]["PatchedDeliverableAssignmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeliverableAssignment"];
        };
      };
    };
  };
  /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
  deliverables_assignments_by_deliverable_list: {
    parameters: {
      query: {
        deliverable: number;
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDeliverableAssignmentList"];
        };
      };
    };
  };
  /** @description CRUD and filter endpoints for deliverable-person weekly hour links. */
  deliverables_assignments_by_person_list: {
    parameters: {
      query: {
        /** @description A page number within the paginated result set. */
        page?: number;
        person: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDeliverableAssignmentList"];
        };
      };
    };
  };
  /**
   * @description Bulk fetch deliverables for multiple projects
   * GET /api/deliverables/bulk/?project_ids=1,2,3,4
   *
   * Returns: { "1": [...], "2": [...], "3": [...], "4": [...] }
   */
  deliverables_bulk_retrieve: {
    parameters: {
      query: {
        /** @description Comma-separated project IDs */
        project_ids: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * @description Read-only calendar endpoint returning deliverables within a date range
   * with assignmentCount. Missing params tolerated (returns all dated items).
   *
   * GET /api/deliverables/calendar?start=YYYY-MM-DD&end=YYYY-MM-DD
   */
  deliverables_calendar_list: {
    parameters: {
      query?: {
        /** @description YYYY-MM-DD */
        end?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description YYYY-MM-DD */
        start?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDeliverableCalendarItemList"];
        };
      };
    };
  };
  /**
   * @description Calendar view returning deliverables and pre-deliverable items.
   *
   * Semantics:
   * - When mine_only=true, scope results to the union of:
   *   (a) deliverables directly linked to the current user via DeliverableAssignment,
   *   (b) deliverables on projects where the current user has an active project-level Assignment.
   * - Duplicates are eliminated via a distinct ID subquery strategy; counts use distinct=True.
   * - Optional filters: start, end (dates) and type_id (pre-deliverable type).
   */
  deliverables_calendar_with_pre_items_retrieve: {
    parameters: {
      query?: {
        /** @description YYYY-MM-DD */
        end?: string;
        mine_only?: boolean;
        /** @description YYYY-MM-DD */
        start?: string;
        type_id?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Deliverable"];
        };
      };
    };
  };
  /** @description Upcoming pre-deliverable items for the authenticated user (default 14 days). */
  deliverables_personal_pre_deliverables_retrieve: {
    parameters: {
      query?: {
        days_ahead?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Deliverable"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  deliverables_pre_deliverable_items_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPreDeliverableItemList"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  deliverables_pre_deliverable_items_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PreDeliverableItemRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PreDeliverableItemRequest"];
        "multipart/form-data": components["schemas"]["PreDeliverableItemRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PreDeliverableItem"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  deliverables_pre_deliverable_items_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Pre-Deliverable Item. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreDeliverableItem"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  deliverables_pre_deliverable_items_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Pre-Deliverable Item. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PreDeliverableItemRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PreDeliverableItemRequest"];
        "multipart/form-data": components["schemas"]["PreDeliverableItemRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreDeliverableItem"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  deliverables_pre_deliverable_items_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Pre-Deliverable Item. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  deliverables_pre_deliverable_items_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Pre-Deliverable Item. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPreDeliverableItemRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPreDeliverableItemRequest"];
        "multipart/form-data": components["schemas"]["PatchedPreDeliverableItemRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreDeliverableItem"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  deliverables_pre_deliverable_items_complete_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Pre-Deliverable Item. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreDeliverableItem"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  deliverables_pre_deliverable_items_uncomplete_create: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Pre-Deliverable Item. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreDeliverableItem"];
        };
      };
    };
  };
  /**
   * @description Staff-only: backfill or regenerate pre-items for a project/date window.
   *
   * If ASYNC_JOBS is enabled and Celery task is available, enqueues background job and
   * returns 202 with job metadata. Otherwise, runs synchronously and returns a summary.
   */
  deliverables_pre_deliverable_items_backfill_create: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PreItemsBackfillRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PreItemsBackfillRequestRequest"];
        "multipart/form-data": components["schemas"]["PreItemsBackfillRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreItemsBackfillResponse"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  deliverables_pre_deliverable_items_bulk_complete_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkCompleteRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["BulkCompleteRequestRequest"];
        "multipart/form-data": components["schemas"]["BulkCompleteRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BulkCompleteResponse"];
        };
      };
    };
  };
  /**
   * @description Manually reorder deliverables for a project
   * Expected payload: {
   *     "project": project_id,
   *     "deliverable_ids": [id1, id2, id3, ...]
   * }
   */
  deliverables_reorder_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeliverableReorderRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeliverableReorderRequestRequest"];
        "multipart/form-data": components["schemas"]["DeliverableReorderRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeliverableReorderResponse"];
        };
      };
    };
  };
  /** @description Get all departments with bulk loading support */
  departments_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDepartmentList"];
        };
      };
    };
  };
  departments_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepartmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DepartmentRequest"];
        "multipart/form-data": components["schemas"]["DepartmentRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Department"];
        };
      };
    };
  };
  departments_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this department. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Department"];
        };
      };
    };
  };
  departments_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this department. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepartmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DepartmentRequest"];
        "multipart/form-data": components["schemas"]["DepartmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Department"];
        };
      };
    };
  };
  departments_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this department. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  departments_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this department. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDepartmentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDepartmentRequest"];
        "multipart/form-data": components["schemas"]["PatchedDepartmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Department"];
        };
      };
    };
  };
  /**
   * @description Return status and metadata for a Celery job.
   *
   * Response fields:
   * - id: task id
   * - state: PENDING|STARTED|PROGRESS|SUCCESS|FAILURE
   * - progress: 0-100 if available
   * - message: optional status message
   * - downloadReady: bool
   * - downloadUrl: present when a file is available to download
   * - result: task result when not file-based (e.g., import summary)
   * - error: error message if failed
   */
  jobs_retrieve: {
    parameters: {
      path: {
        /** @description Background job id */
        job_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            id: string;
            /** @enum {string} */
            state: "PENDING" | "STARTED" | "PROGRESS" | "SUCCESS" | "FAILURE";
            progress: number;
            message?: string | null;
            downloadReady: boolean;
            downloadUrl?: string | null;
            result?: unknown;
            error?: string | null;
          };
        };
      };
      409: {
        content: {
          "application/json": unknown;
        };
      };
      503: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Stream the file produced by a completed job (if any). */
  jobs_download_retrieve: {
    parameters: {
      path: {
        /** @description Background job id */
        job_id: string;
      };
    };
    responses: {
      /** @description File content */
      200: {
        content: {
          "application/json": string;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
      409: {
        content: {
          "application/json": unknown;
        };
      };
      503: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Get all people with conditional request support (ETag/Last-Modified) and bulk loading */
  people_list: {
    parameters: {
      query?: {
        /** @description Return all items without pagination when true */
        all?: string;
        /** @description Filter by department id */
        department?: number;
        /** @description Include child departments (0|1) */
        include_children?: number;
        /** @description Include inactive people (0|1; default 0) */
        include_inactive?: number;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPersonList"];
        };
      };
    };
  };
  /**
   * @description Person CRUD API with utilization calculations
   * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
   */
  people_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PersonRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PersonRequest"];
        "multipart/form-data": components["schemas"]["PersonRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
    };
  };
  /**
   * @description Person CRUD API with utilization calculations
   * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
   */
  people_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
    };
  };
  /**
   * @description Person CRUD API with utilization calculations
   * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
   */
  people_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PersonRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PersonRequest"];
        "multipart/form-data": components["schemas"]["PersonRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
    };
  };
  /**
   * @description Delete a person by primary key.
   *
   * Note: bypass get_queryset() filtering so deletes work even if the record
   * is inactive or excluded from the default list queryset.
   * Still enforces object-level permissions before deletion.
   */
  people_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Person CRUD API with utilization calculations
   * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
   */
  people_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPersonRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPersonRequest"];
        "multipart/form-data": components["schemas"]["PatchedPersonRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description Get detailed utilization breakdown for a person - Chunk 3 */
  people_utilization_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this person. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
    };
  };
  /**
   * @description Lightweight autocomplete for active people.
   *
   * Query params:
   * - search or q: optional substring of name
   * - limit: max results (default 20)
   */
  people_autocomplete_retrieve: {
    parameters: {
      query?: {
        /** @description Max results (1-50) */
        limit?: number;
        /** @description Alias for search */
        q?: string;
        /** @description Substring of name */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PeopleAutocompleteItem"];
        };
      };
    };
  };
  /** @description Return per-person week summaries for the next N weeks (default 12). */
  people_capacity_heatmap_list: {
    parameters: {
      query?: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description A page number within the paginated result set. */
        page?: number;
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPersonCapacityHeatmapItemList"];
        };
      };
    };
  };
  /** @description Export people to Excel with streaming response for large datasets */
  people_export_excel_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
    };
  };
  /**
   * @description Person CRUD API with utilization calculations
   * Uses AutoMapped serializer for automatic snake_case â†” camelCase conversion
   */
  people_find_available_list: {
    parameters: {
      query?: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description Max results (1-200), default 100 */
        limit?: number;
        /** @description Filter to people with at least this many hours free */
        minAvailableHours?: number;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Comma-separated skill names */
        skills?: string;
        /** @description YYYY-MM-DD (Monday) week key */
        week?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSkillMatchResultItemList"];
        };
      };
    };
  };
  /** @description Import people from Excel with progress tracking */
  people_import_excel_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PersonRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PersonRequest"];
        "multipart/form-data": components["schemas"]["PersonRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
    };
  };
  /**
   * @description Server-side typeahead for People.
   *
   * Params:
   * - q: required search query (min length 2)
   * - limit: optional, default 20, max 50
   * Returns minimal projection: id, name, department
   */
  people_search_retrieve: {
    parameters: {
      query: {
        /** @description Max results (1-50) */
        limit?: number;
        /** @description Search query (min length 2) */
        q: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PeopleSearchItem"];
        };
      };
    };
  };
  /**
   * @description Rank people by skills (and optionally availability for a given week).
   *
   * Returns an array of items: { personId, name, score, matchedSkills[], missingSkills[], departmentId, roleName }.
   * Score is based on percent of required skills matched (case-insensitive contains) and optionally blended with availability when `week` is provided.
   */
  people_skill_match_list: {
    parameters: {
      query: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description Max results (1-200), default 50 */
        limit?: number;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Comma-separated skill names */
        skills: string;
        /** @description YYYY-MM-DD (Monday) for availability-aware scoring */
        week?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSkillMatchResultItemList"];
        };
      };
    };
  };
  /** @description Start async skill match job and return task ID for polling. */
  people_skill_match_async_retrieve: {
    parameters: {
      query: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description Max results (1-200), default 50 */
        limit?: number;
        /** @description Comma-separated skill names */
        skills: string;
        /** @description YYYY-MM-DD (Monday) for availability-aware scoring */
        week?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SkillMatchAsyncResponse"];
        };
      };
    };
  };
  /**
   * @description Aggregate team capacity vs allocated for N weeks ahead (default 8).
   *
   * Response array items:
   * { weekStart, totalCapacity, totalAllocated, teamUtilization, peopleOverallocated[] }
   */
  people_workload_forecast_list: {
    parameters: {
      query?: {
        department?: number;
        /** @description 0|1 */
        include_children?: number;
        /** @description A page number within the paginated result set. */
        page?: number;
        weeks?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedWorkloadForecastItemList"];
        };
      };
    };
  };
  personal_work_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description Get all projects with conditional request support (ETag/Last-Modified) and bulk loading */
  projects_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedProjectList"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  projects_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectRequest"];
        "multipart/form-data": components["schemas"]["ProjectRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  projects_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  projects_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectRequest"];
        "multipart/form-data": components["schemas"]["ProjectRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  projects_destroy: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  projects_partial_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedProjectRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectRequest"];
        "multipart/form-data": components["schemas"]["PatchedProjectRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
  };
  /**
   * @description Return availability snapshot for people relevant to the project context.
   *
   * Response items: { personId, personName, totalHours, capacity, availableHours, utilizationPercent }
   * Uses Sunday as canonical week key; exact JSON key lookup (no tolerance).
   */
  projects_availability_list: {
    parameters: {
      query?: {
        /** @description Limit to departments already staffing this project (0|1) */
        candidates_only?: number;
        /** @description Filter people by department id */
        department?: number;
        /** @description Include child departments (0|1) */
        include_children?: number;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description YYYY-MM-DD (Sunday key) */
        week?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedProjectAvailabilityItemList"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  projects_pre_deliverable_settings_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectPreDeliverableSettingsResponse"];
        };
      };
    };
  };
  /**
   * @description Adds ETag on detail GET and optional If-Match handling on mutations.
   *
   * - Detail GET (retrieve): returns ETag (and Last-Modified if available). Honors If-None-Match with 304.
   * - Mutations (update/partial_update/destroy): when If-Match is present and does not match current ETag, returns 412.
   *   When If-Match is absent, proceeds (frontend can adopt conditionals progressively).
   */
  projects_pre_deliverable_settings_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectRequest"];
        "multipart/form-data": components["schemas"]["ProjectRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectPreDeliverableSettingsResponse"];
        };
      };
    };
  };
  /** @description Export projects to Excel with streaming response for large datasets */
  projects_export_excel_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
  };
  /** @description Export Excel import template with examples */
  projects_export_template_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
  };
  /**
   * @description Get optimized filter metadata for all projects.
   *
   * Returns camelCase keys for direct frontend consumption:
   * {
   *   "projectFilters": {
   *     "<projectId>": {
   *       "assignmentCount": number,
   *       "hasFutureDeliverables": boolean,
   *       "status": string
   *     }, ...
   *   }
   * }
   */
  projects_filter_metadata_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectFilterMetadataResponse"];
        };
      };
    };
  };
  /** @description Import projects from Excel with progress tracking */
  projects_import_excel_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectRequest"];
        "multipart/form-data": components["schemas"]["ProjectRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
  };
  projects_project_roles_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRoleItem"][];
        };
      };
    };
  };
  projects_project_roles_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectRoleCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectRoleCreateRequest"];
        "multipart/form-data": components["schemas"]["ProjectRoleCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRoleItem"];
        };
      };
    };
  };
  projects_project_roles_destroy: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  projects_project_roles_partial_update: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedProjectRoleUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectRoleUpdateRequest"];
        "multipart/form-data": components["schemas"]["PatchedProjectRoleUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRoleItem"];
        };
      };
    };
  };
  reports_pre_deliverable_completion_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  reports_pre_deliverable_team_performance_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /**
   * @description Role ViewSet providing CRUD operations
   * - List all roles (paginated)
   * - Create new role
   * - Retrieve specific role
   * - Update role
   * - Delete role
   * - Bulk list (for autocomplete)
   */
  roles_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedRoleList"];
        };
      };
    };
  };
  /**
   * @description Role ViewSet providing CRUD operations
   * - List all roles (paginated)
   * - Create new role
   * - Retrieve specific role
   * - Update role
   * - Delete role
   * - Bulk list (for autocomplete)
   */
  roles_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["RoleRequest"];
        "multipart/form-data": components["schemas"]["RoleRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
    };
  };
  /**
   * @description Role ViewSet providing CRUD operations
   * - List all roles (paginated)
   * - Create new role
   * - Retrieve specific role
   * - Update role
   * - Delete role
   * - Bulk list (for autocomplete)
   */
  roles_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Role. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
    };
  };
  /**
   * @description Role ViewSet providing CRUD operations
   * - List all roles (paginated)
   * - Create new role
   * - Retrieve specific role
   * - Update role
   * - Delete role
   * - Bulk list (for autocomplete)
   */
  roles_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Role. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["RoleRequest"];
        "multipart/form-data": components["schemas"]["RoleRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
    };
  };
  /** @description Override destroy to check for role usage before deletion */
  roles_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Role. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Role ViewSet providing CRUD operations
   * - List all roles (paginated)
   * - Create new role
   * - Retrieve specific role
   * - Update role
   * - Delete role
   * - Bulk list (for autocomplete)
   */
  roles_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Role. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedRoleRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedRoleRequest"];
        "multipart/form-data": components["schemas"]["PatchedRoleRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
    };
  };
  /**
   * @description Return all roles without pagination for autocomplete/dropdowns
   * Access via: GET /api/roles/bulk/
   */
  roles_bulk_list: {
    parameters: {
      query?: {
        /** @description Include inactive roles when present */
        include_inactive?: boolean;
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedRoleList"];
        };
      };
    };
  };
  /** @description CRUD operations for person skills */
  skills_person_skills_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPersonSkillList"];
        };
      };
    };
  };
  /** @description CRUD operations for person skills */
  skills_person_skills_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PersonSkillRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PersonSkillRequest"];
        "multipart/form-data": components["schemas"]["PersonSkillRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PersonSkill"];
        };
      };
    };
  };
  /** @description CRUD operations for person skills */
  skills_person_skills_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Person Skill. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonSkill"];
        };
      };
    };
  };
  /** @description CRUD operations for person skills */
  skills_person_skills_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Person Skill. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PersonSkillRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PersonSkillRequest"];
        "multipart/form-data": components["schemas"]["PersonSkillRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonSkill"];
        };
      };
    };
  };
  /** @description CRUD operations for person skills */
  skills_person_skills_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Person Skill. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description CRUD operations for person skills */
  skills_person_skills_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Person Skill. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPersonSkillRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPersonSkillRequest"];
        "multipart/form-data": components["schemas"]["PatchedPersonSkillRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonSkill"];
        };
      };
    };
  };
  /** @description Get skill summary for a person */
  skills_person_skills_summary_retrieve: {
    parameters: {
      query: {
        /** @description Person id */
        person: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonSkillSummaryGrouped"];
        };
      };
    };
  };
  /** @description CRUD operations for skill tags */
  skills_skill_tags_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSkillTagList"];
        };
      };
    };
  };
  /** @description CRUD operations for skill tags */
  skills_skill_tags_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SkillTagRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SkillTagRequest"];
        "multipart/form-data": components["schemas"]["SkillTagRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SkillTag"];
        };
      };
    };
  };
  /** @description CRUD operations for skill tags */
  skills_skill_tags_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Skill Tag. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SkillTag"];
        };
      };
    };
  };
  /** @description CRUD operations for skill tags */
  skills_skill_tags_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Skill Tag. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SkillTagRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SkillTagRequest"];
        "multipart/form-data": components["schemas"]["SkillTagRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SkillTag"];
        };
      };
    };
  };
  /** @description CRUD operations for skill tags */
  skills_skill_tags_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Skill Tag. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description CRUD operations for skill tags */
  skills_skill_tags_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Skill Tag. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSkillTagRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSkillTagRequest"];
        "multipart/form-data": components["schemas"]["PatchedSkillTagRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SkillTag"];
        };
      };
    };
  };
  /**
   * @description Takes a set of user credentials and returns an access and refresh JSON web
   * token pair to prove the authentication of those credentials.
   */
  token_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UsernameOrEmailTokenObtainPairRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["UsernameOrEmailTokenObtainPairRequest"];
        "multipart/form-data": components["schemas"]["UsernameOrEmailTokenObtainPairRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description Clears the refresh cookie in cookie mode. Body is ignored. */
  token_logout_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRefreshRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
        "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenRefresh"];
        };
      };
    };
  };
  /**
   * @description Takes a refresh type JSON web token and returns an access type JSON web
   * token if the refresh token is valid.
   */
  token_refresh_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRefreshRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
        "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenRefresh"];
        };
      };
    };
  };
  /**
   * @description Takes a token and indicates if it is valid.  This view provides no
   * information about a token's fitness for a particular use.
   */
  token_verify_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenVerifyRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenVerifyRequest"];
        "multipart/form-data": components["schemas"]["TokenVerifyRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
}
