
services:
  redis:
    image: redis:7-alpine
    container_name: workload-tracker-redis
    restart: unless-stopped
    # Expose on host so other machines can reach it via HOST_IP:6379
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - tracker-network

  db:
    image: postgres:17.6
    container_name: workload-tracker-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_v17:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c pg_stat_statements.max=10000
      -c log_min_duration_statement=1000
      -c log_statement_stats=off
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - tracker-network

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: dev
    container_name: workload-tracker-backend
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./backups:/backups:rw
    ports:
      - "${BACKEND_PORT}:8000"
    env_file:
      - .env
    environment:
      # Use internal Docker network for backend->Redis to minimize hiccups
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      - BACKUPS_DIR=/backups
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tracker-network
    command: python manage.py runserver 0.0.0.0:8000

  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
      target: dev
    container_name: workload-tracker-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - VITE_API_URL=/api
      - VITE_OPENAPI_MIGRATION_ENABLED=true
      # Retired flags: all endpoints migrated to typed client
    depends_on:
      - backend
    networks:
      - tracker-network
    command: npm run dev -- --host 0.0.0.0 --port 3000

  worker:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: dev
    container_name: workload-tracker-worker
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./backups:/backups:rw
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      - DJANGO_SETTINGS_MODULE=config.settings
      - BACKUPS_DIR=/backups
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=200
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
      - COLLECT_STATIC=false
    command: celery -A config worker -l info --concurrency=2
    mem_limit: 512m
    cpus: 0.50
    networks:
      - tracker-network

  worker_db:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: dev
    container_name: workload-tracker-worker-db
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./backups:/backups:rw
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      - DJANGO_SETTINGS_MODULE=config.settings
      - BACKUPS_DIR=/backups
      - COLLECT_STATIC=false
    command: celery -A config worker -l info --concurrency=1 -Q db_maintenance
    mem_limit: 256m
    cpus: 0.25
    networks:
      - tracker-network

  # Optional: Celery beat scheduler (for scheduled backups/retention)
  worker_beat:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
      target: dev
    container_name: workload-tracker-beat
    restart: unless-stopped
    command: celery -A config beat -l info -s /var/run/celery/beat-schedule
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      - DJANGO_SETTINGS_MODULE=config.settings
      - BACKUPS_DIR=/backups
      - COLLECT_STATIC=false
      - CELERY_BEAT_SCHEDULE_FILE=/var/run/celery/beat-schedule
    volumes:
      - ./backend:/app:ro
      - ./backups:/backups:rw
      - beat_state:/var/run/celery
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - tracker-network

  nginx:
    image: nginx:alpine
    container_name: workload-tracker-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available-dev:/etc/nginx/sites-available:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
    depends_on:
      - backend
      - frontend
    networks:
      - tracker-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_v17:
  static_volume:
  media_volume:
  beat_state:

networks:
  tracker-network:
    driver: bridge
