version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: workload-tracker-redis
    restart: unless-stopped
    # Expose on host so other machines can reach it via HOST_IP:6379
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - tracker-network

  db:
    image: postgres:15
    container_name: workload-tracker-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c pg_stat_statements.max=10000
      -c log_min_duration_statement=1000
      -c log_statement_stats=off
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - tracker-network

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: workload-tracker-backend
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "${BACKEND_PORT}:8000"
    env_file:
      - .env
    environment:
      # Use internal Docker network for backend->Redis to minimize hiccups
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tracker-network
    command: python manage.py runserver 0.0.0.0:8000

  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: workload-tracker-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - VITE_API_URL=http://${HOST_IP}:8000/api
    depends_on:
      - backend
    networks:
      - tracker-network
    command: npm run dev -- --host 0.0.0.0 --port 3000

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  tracker-network:
    driver: bridge
