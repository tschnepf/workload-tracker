name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_REPO_BACKEND }}
  FRONTEND_IMAGE: ${{ secrets.DOCKER_REPO_FRONTEND }}

jobs:
  backend-check:
    name: Backend Checks (Django)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Django system check
        working-directory: backend
        run: |
          python manage.py check
      - name: Run backend tests
        working-directory: backend
        env:
          DJANGO_SETTINGS_MODULE: config.settings
        run: |
          python manage.py test --noinput

  frontend-check:
    name: Frontend TypeScript + Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Check lockfile drift (fail fast)
        working-directory: frontend
        shell: bash
        run: |
          set -euo pipefail
          npm install --package-lock-only --ignore-scripts --no-audit --no-fund
          if ! git diff --exit-code -- package-lock.json; then
            echo "Lockfile drift detected. Update and commit frontend/package-lock.json (run: npm install or npm install --package-lock-only)" >&2
            exit 1
          fi
      - name: Install deps
        working-directory: frontend
        run: npm ci
      - name: TypeScript check (capture diagnostics)
        working-directory: frontend
        shell: bash
        run: |
          set -euo pipefail
          npx tsc --noEmit 2>&1 | tee ts-errors.txt
      - name: Upload TS diagnostics (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ts-errors
          path: frontend/ts-errors.txt
      - name: Build
        working-directory: frontend
        run: npm run -s build

  contract-check:
    name: Contract Check (OpenAPI or Adapter)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install deps
        working-directory: frontend
        run: npm ci
      - name: Regenerate OpenAPI types
        working-directory: frontend
        run: npm run -s openapi:types
      - name: Fail on OpenAPI drift
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --exit-code -- frontend/src/api/schema.ts; then
            echo "OpenAPI types drift detected. Update adapters/usages or sync backend spec." >&2
            exit 1
          fi

  build-and-push:
    needs: [backend-check, frontend-check, contract-check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Verify required Docker secrets
        shell: bash
        run: |
          set -euo pipefail
          : "${{ env.BACKEND_IMAGE }}"; : "${{ env.FRONTEND_IMAGE }}"
          if [ -z "${{ env.BACKEND_IMAGE }}" ] || [ -z "${{ env.FRONTEND_IMAGE }}" ]; then
            echo "Required secrets DOCKER_REPO_BACKEND/DOCKER_REPO_FRONTEND not set." >&2
            exit 1
          fi

      - name: Extract metadata (backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./docker/backend/Dockerfile
          target: production
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata (frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./docker/frontend/Dockerfile
          target: production
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
