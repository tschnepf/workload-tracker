name: Production Config Guard

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  prod-guard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure docker-compose.prod.yml does not enable DEBUG
        run: |
          if grep -q "DEBUG=true" docker-compose.prod.yml; then
            echo "ERROR: DEBUG=true found in docker-compose.prod.yml" >&2
            exit 1
          fi

      - name: Ensure .env.production.template exists
        run: |
          if [ ! -f .env.production.template ]; then
            echo "ERROR: Missing .env.production.template" >&2
            exit 1
          fi

      - name: Validate prod template defaults (DEBUG=false, non-dev SECRET_KEY)
        run: |
          if grep -E '^DEBUG=true' .env.production.template; then
            echo "ERROR: DEBUG=true found in .env.production.template" >&2
            exit 1
          fi
          if ! grep -E '^DEBUG=false' .env.production.template; then
            echo "ERROR: DEBUG=false not set in .env.production.template" >&2
            exit 1
          fi
          if ! grep -E '^SECRET_KEY=' .env.production.template; then
            echo "ERROR: SECRET_KEY not present in .env.production.template" >&2
            exit 1
          fi
          if grep -q 'SECRET_KEY=dev-secret-key-change-in-production' .env.production.template; then
            echo "ERROR: dev SECRET_KEY used in .env.production.template" >&2
            exit 1
          fi

      - name: Validate prod template flags (OPENAPI_PUBLIC=false, COOKIE_REFRESH_AUTH=true)
        run: |
          if ! grep -E '^OPENAPI_PUBLIC=false' .env.production.template; then
            echo "ERROR: OPENAPI_PUBLIC must be false in .env.production.template" >&2
            exit 1
          fi
          if ! grep -E '^COOKIE_REFRESH_AUTH=true' .env.production.template; then
            echo "ERROR: COOKIE_REFRESH_AUTH must be true in .env.production.template" >&2
            exit 1
          fi

      - name: Ensure ALLOWED_HOSTS present in env example
        run: |
          if ! grep -q "^ALLOWED_HOSTS=" .env.example; then
            echo "ERROR: ALLOWED_HOSTS not present in .env.example" >&2
            exit 1
          fi

      - name: Show summary
        run: |
          echo "Prod config checks passed." 

      - name: Check for pending migrations (dry-run)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.prod.yml run --rm backend python manage.py makemigrations --check --dry-run
